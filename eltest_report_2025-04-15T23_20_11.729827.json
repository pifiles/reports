{
  "created": 1744747993.4913697,
  "duration": 8565.60936164856,
  "exitcode": 1,
  "root": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main",
  "environment": {
    "Python": "3.11.2",
    "Platform": "Linux-6.12.20+rpt-rpi-v8-aarch64-with-glibc2.36",
    "Packages": {
      "pytest": "7.3.1",
      "pluggy": "1.0.0"
    },
    "Plugins": {
      "asyncio": "0.21.1",
      "json-report": "1.5.0",
      "metadata": "2.0.4"
    }
  },
  "summary": {
    "passed": 242,
    "error": 16,
    "failed": 45,
    "skipped": 11,
    "total": 314,
    "collected": 314
  },
  "tests": [
    {
      "nodeid": "tests/test_misc.py::test_misc_removed_democonf",
      "lineno": 19,
      "outcome": "passed",
      "keywords": [
        "test_misc_removed_democonf",
        "prod",
        "pytestmark",
        "tests/test_misc.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.783010077000654,
        "outcome": "passed",
        "stdout": "Reseting device\n\nServer: Advertising a BLE service...\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_misc_removed_democonf\u001b[0m\n"
      },
      "call": {
        "duration": 0.13434448199768667,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=default\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+DIAG DEMOCONF Endpoint=DEMOCONF\\r\\n'...\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF? Endpoint\\r\\n'...\nb'Response: OK default\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008323249967361335,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_misc.py::test_misc_removed_example_staging_endpoint",
      "lineno": 27,
      "outcome": "passed",
      "keywords": [
        "test_misc_removed_example_staging_endpoint",
        "prod",
        "pytestmark",
        "tests/test_misc.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.786539167998853,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_misc_removed_example_staging_endpoint\u001b[0m\n"
      },
      "call": {
        "duration": 0.09279208500083769,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? Endpoint\\r\\n'...\nb'Response: OK d01957845e3vbsmdo9am-ats.iot.us-east-2.amazonaws.com\\r\\n'\n\nb'Command:  AT+CONF? Endpoint\\r\\n'...\nb'Response: OK d01957845e3vbsmdo9am-ats.iot.us-east-2.amazonaws.com\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0006858259985165205,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_misc.py::test_misc_changed_about",
      "lineno": 36,
      "outcome": "passed",
      "keywords": [
        "test_misc_changed_about",
        "prod",
        "pytestmark",
        "tests/test_misc.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.341454990000784,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_misc_changed_about\u001b[0m\n"
      },
      "call": {
        "duration": 0.02182422499754466,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? About\\r\\n'..\nb'Response: OK Si-Labs - SiWG917\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0005343470002117101,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_misc.py::test_misc_changed_version",
      "lineno": 44,
      "outcome": "passed",
      "keywords": [
        "test_misc_changed_version",
        "prod",
        "pytestmark",
        "tests/test_misc.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.91186520699921,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_misc_changed_version\u001b[0m\n"
      },
      "call": {
        "duration": 0.02254840299792704,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? Version\\r\\n'..\nb'Response: OK 1.0.0\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009439349996682722,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_misc.py::test_misc_unassigned_topic_event",
      "lineno": 50,
      "outcome": "error",
      "keywords": [
        "test_misc_unassigned_topic_event",
        "tests/test_misc.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.56491380199805,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb82fe6d0>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_misc_unassigned_topic_event\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_misc_unassigned_topic_event>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb830a520>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb82fe6d0>, max_time = 1744739621.3031898\ntries = 1635573, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb82fe6d0>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006310310018307064,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_1_DefenderCustomMetrics",
      "lineno": 94,
      "outcome": "failed",
      "keywords": [
        "test_10_1_DefenderCustomMetrics",
        "slow",
        "pytestmark",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.814619425000274,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_1_DefenderCustomMetrics\u001b[0m\n"
      },
      "call": {
        "duration": 189.5718797019981,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/botocore/client.py",
          "lineno": 960,
          "message": "botocore.errorfactory.InvalidRequestException: An error occurred (InvalidRequestException) when calling the ListMetricValues operation: Metric with metric name: expresslinkBytesOut is not found"
        },
        "traceback": [
          {
            "path": "tests/test_section10.py",
            "lineno": 126,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 106,
            "message": "in poll"
          },
          {
            "path": "tests/test_section10.py",
            "lineno": 111,
            "message": "in checkMetricValue"
          },
          {
            "path": "venv/lib/python3.11/site-packages/botocore/client.py",
            "lineno": 530,
            "message": "in _api_call"
          },
          {
            "path": "venv/lib/python3.11/site-packages/botocore/client.py",
            "lineno": 960,
            "message": "InvalidRequestException"
          }
        ],
        "stdout": "b'Command:  AT+CONF DefenderPeriod=30\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nSleeping 5 minutes to allow Device Defender metrics to populate\n......\nPolling Device Defender for custom metrics...\n",
        "longrepr": "iot_services_client = <botocore.client.IoT object at 0x7fb799c2d0>\n\n    @pytest.mark.slow\n    def test_10_1_DefenderCustomMetrics(iot_services_client: IoTClient):\n        startTime = datetime.now(tz=tz.tzlocal())\n        assert cmd('AT+CONF DefenderPeriod=30\\r\\n') == 'OK\\r\\n'\n        assert connect_with_retries(cf.get('personal_endpoint', str))\n    \n        thingName: str = pytest.expresslink_info['thing_name']  # type: ignore\n    \n        print('Sleeping 5 minutes to allow Device Defender metrics to populate')\n        for _ in range(6):\n            print(end='.', flush=True)\n            time.sleep(30)\n        print('\\nPolling Device Defender for custom metrics...')\n    \n        def checkMetricValue(metricName):\n            endTime = datetime.now(tz=tz.tzlocal())\n            response = iot_services_client.list_metric_values(\n                thingName=thingName,\n                metricName=metricName,\n                startTime=startTime,\n                endTime=endTime)\n            if len(response['metricDatumList']) == 0:\n                print(f'{endTime}: No metrics yet received')\n            return response['metricDatumList']\n    \n        customMetrics: list[str] = [\n            'expresslinkBytesOut', 'expresslinkMessagesSent',\n            'expresslinkMessagesReceived', 'expresslinkResets',\n            'expresslinkReconnects', 'expresslinkFlashWrites'\n        ]\n        for metric in customMetrics:\n>           metricList = poll(checkMetricValue,\n                              args=(metric, ),\n                              timeout=600,\n                              step=10)\n\ntests/test_section10.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/polling.py:106: in poll\n    val = target(*args, **kwargs)\ntests/test_section10.py:111: in checkMetricValue\n    response = iot_services_client.list_metric_values(\nvenv/lib/python3.11/site-packages/botocore/client.py:530: in _api_call\n    return self._make_api_call(operation_name, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <botocore.client.IoT object at 0x7fb799c2d0>\noperation_name = 'ListMetricValues'\napi_params = {'endTime': datetime.datetime(2025, 4, 15, 23, 27, 4, 764196, tzinfo=tzlocal()), 'metricName': 'expresslinkBytesOut', 'startTime': datetime.datetime(2025, 4, 15, 23, 23, 56, 275865, tzinfo=tzlocal()), 'thingName': 'silicon_labs_thing'}\n\n    def _make_api_call(self, operation_name, api_params):\n        operation_model = self._service_model.operation_model(operation_name)\n        service_name = self._service_model.service_name\n        history_recorder.record(\n            'API_CALL',\n            {\n                'service': service_name,\n                'operation': operation_name,\n                'params': api_params,\n            },\n        )\n        if operation_model.deprecated:\n            logger.debug(\n                'Warning: %s.%s() is deprecated', service_name, operation_name\n            )\n        request_context = {\n            'client_region': self.meta.region_name,\n            'client_config': self.meta.config,\n            'has_streaming_input': operation_model.has_streaming_input,\n            'auth_type': operation_model.auth_type,\n        }\n        endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\n            operation_model, api_params, request_context\n        )\n        request_dict = self._convert_to_request_dict(\n            api_params=api_params,\n            operation_model=operation_model,\n            endpoint_url=endpoint_url,\n            context=request_context,\n            headers=additional_headers,\n        )\n        resolve_checksum_context(request_dict, operation_model, api_params)\n    \n        service_id = self._service_model.service_id.hyphenize()\n        handler, event_response = self.meta.events.emit_until_response(\n            'before-call.{service_id}.{operation_name}'.format(\n                service_id=service_id, operation_name=operation_name\n            ),\n            model=operation_model,\n            params=request_dict,\n            request_signer=self._request_signer,\n            context=request_context,\n        )\n    \n        if event_response is not None:\n            http, parsed_response = event_response\n        else:\n            apply_request_checksum(request_dict)\n            http, parsed_response = self._make_request(\n                operation_model, request_dict, request_context\n            )\n    \n        self.meta.events.emit(\n            'after-call.{service_id}.{operation_name}'.format(\n                service_id=service_id, operation_name=operation_name\n            ),\n            http_response=http,\n            parsed=parsed_response,\n            model=operation_model,\n            context=request_context,\n        )\n    \n        if http.status_code >= 300:\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\n            error_class = self.exceptions.from_code(error_code)\n>           raise error_class(parsed_response, operation_name)\nE           botocore.errorfactory.InvalidRequestException: An error occurred (InvalidRequestException) when calling the ListMetricValues operation: Metric with metric name: expresslinkBytesOut is not found\n\nvenv/lib/python3.11/site-packages/botocore/client.py:960: InvalidRequestException"
      },
      "teardown": {
        "duration": 0.0006268639990594238,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_1_DefenderInterval",
      "lineno": 135,
      "outcome": "passed",
      "keywords": [
        "test_10_1_DefenderInterval",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.90807867699914,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_1_DefenderInterval\u001b[0m\n"
      },
      "call": {
        "duration": 0.711860606999835,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF DefenderPeriod=60\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? DefenderPeriod\\r\\n'...\nb'Response: OK 60\\r\\n'\n\nb'Command:  AT+CONF DefenderPeriod=3600\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? DefenderPeriod\\r\\n'..\nb'Response: OK 3600\\r\\n'\n\nb'Command:  AT+CONF DefenderPeriod=-10\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF? DefenderPeriod\\r\\n'...\nb'Response: OK 3600\\r\\n'\n\nb'Command:  AT+CONF DefenderPeriod=abcdef\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF? DefenderPeriod\\r\\n'..\nb'Response: OK 3600\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.000980194003204815,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_1_DefenderDisabled",
      "lineno": 148,
      "outcome": "passed",
      "keywords": [
        "test_10_1_DefenderDisabled",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.924924439001188,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_1_DefenderDisabled\u001b[0m\n"
      },
      "call": {
        "duration": 0.5305086429980292,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF DefenderPeriod=0\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? DefenderPeriod\\r\\n'...\nb'Response: OK 0\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0012359510001260787,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_1_1_MaxShadow",
      "lineno": 179,
      "outcome": "passed",
      "keywords": [
        "test_10_2_1_1_MaxShadow",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.925140179999289,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_1_1_MaxShadow\u001b[0m\n"
      },
      "call": {
        "duration": 9.307250578000094,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow4=myShadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW4 INIT\\r\\n'...............\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010508039995329455,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_2_1_ShadowInitEvent",
      "lineno": 212,
      "outcome": "passed",
      "keywords": [
        "test_10_2_2_1_ShadowInitEvent",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.90111223099666,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_2_1_ShadowInitEvent\u001b[0m\n"
      },
      "call": {
        "duration": 18.439760175999254,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...........................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 0 SHADOW INIT\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011061370023526251,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_2_2_ShadowInitUnnamed",
      "lineno": 220,
      "outcome": "passed",
      "keywords": [
        "test_10_2_2_2_ShadowInitUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.926810166001815,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_2_2_ShadowInitUnnamed\u001b[0m\n"
      },
      "call": {
        "duration": 11.178113556998142,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 0 SHADOW INIT\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010616190011205617,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_2_2_ShadowInitNamed",
      "lineno": 229,
      "outcome": "passed",
      "keywords": [
        "test_10_2_2_2_ShadowInitNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.912877523001953,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_2_2_ShadowInitNamed\u001b[0m\n"
      },
      "call": {
        "duration": 11.215578171999368,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF Shadow1=myShadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 INIT\\r\\n'..............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 1 SHADOW INIT\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001077396998880431,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_2_6_ShadowServiceStarts",
      "lineno": 245,
      "outcome": "passed",
      "keywords": [
        "test_10_2_2_6_ShadowServiceStarts",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.9142216500004,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_2_6_ShadowServiceStarts\u001b[0m\n"
      },
      "call": {
        "duration": 9.318072968002525,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'................\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010660449988790788,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_2_6_ShadowNamedShadowOutOfRange",
      "lineno": 254,
      "outcome": "passed",
      "keywords": [
        "test_10_2_2_6_ShadowNamedShadowOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.907914628998697,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_2_6_ShadowNamedShadowOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.04447875999903772,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW5 INIT\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011267480003880337,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_2_7_ShadowNamedShadowConfigured",
      "lineno": 263,
      "outcome": "passed",
      "keywords": [
        "test_10_2_2_7_ShadowNamedShadowConfigured",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.904709490998357,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_2_7_ShadowNamedShadowConfigured\u001b[0m\n"
      },
      "call": {
        "duration": 8.50572799099973,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW1 INIT\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001063137999153696,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_2_8_ShadowRequiresConnection",
      "lineno": 271,
      "outcome": "passed",
      "keywords": [
        "test_10_2_2_8_ShadowRequiresConnection",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.897353940999892,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_2_8_ShadowRequiresConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.04382922899822006,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001013155997497961,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_2_9_ShadowDisabledError",
      "lineno": 279,
      "outcome": "passed",
      "keywords": [
        "test_10_2_2_9_ShadowDisabledError",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.815695663997758,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_2_9_ShadowDisabledError\u001b[0m\n"
      },
      "call": {
        "duration": 8.592920294002397,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010742110025603324,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_4_ShadowDocEventUnnamed",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_10_2_4_ShadowDocEventUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.783414326000639,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_4_ShadowDocEventUnnamed\u001b[0m\n"
      },
      "call": {
        "duration": 13.34071117500207,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'......................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 0 SHADOW INIT\\r\\n'\n\nb'Command:  AT+SHADOW DOC\\r\\n'....................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 22 0 SHADOW DOC\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010701749997679144,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_4_ShadowDocEventNamed",
      "lineno": 313,
      "outcome": "passed",
      "keywords": [
        "test_10_2_4_ShadowDocEventNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.817458681998687,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_4_ShadowDocEventNamed\u001b[0m\n"
      },
      "call": {
        "duration": 24.043586547002633,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'.\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow1=test_10_2_4_ShadowDocEventNamed2025-04-15T23:31:40:898705\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW1 INIT\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 1 SHADOW INIT\\r\\n'\n\nb'Command:  AT+SHADOW1 DOC\\r\\n'..................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 22 1 SHADOW DOC\\r\\n'\n\nb'Command:  AT+SHADOW1 DOC\\r\\n'........\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 22 1 SHADOW DOC\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0005351799991331063,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_4_5_ShadowDocOutOfRange",
      "lineno": 336,
      "outcome": "passed",
      "keywords": [
        "test_10_2_4_5_ShadowDocOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.790578634001577,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_4_5_ShadowDocOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.023358136997558177,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SHADOW5 DOC\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001043730997480452,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_4_6_ShadowDocNamedUndefined",
      "lineno": 343,
      "outcome": "passed",
      "keywords": [
        "test_10_2_4_6_ShadowDocNamedUndefined",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.345752304998314,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_4_6_ShadowDocNamedUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.023456044000340626,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SHADOW1 DOC\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011335819981468376,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_4_7_ShadowDocRequiresConnection",
      "lineno": 349,
      "outcome": "passed",
      "keywords": [
        "test_10_2_4_7_ShadowDocRequiresConnection",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.917484179000894,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_4_7_ShadowDocRequiresConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.04375304499990307,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW DOC\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008822130002954509,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_4_8_ShadowDocShadowEnabled",
      "lineno": 358,
      "outcome": "passed",
      "keywords": [
        "test_10_2_4_8_ShadowDocShadowEnabled",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.900586654999643,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_4_8_ShadowDocShadowEnabled\u001b[0m\n"
      },
      "call": {
        "duration": 8.525907793999068,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW DOC\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011758590007957537,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_5_1_ShadowGetDocUnnamed",
      "lineno": 369,
      "outcome": "passed",
      "keywords": [
        "test_10_2_5_1_ShadowGetDocUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.909899467998912,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_5_1_ShadowGetDocUnnamed\u001b[0m\n"
      },
      "call": {
        "duration": 0.10454316200048197,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET DOC\\r\\n'...\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008757499999774154,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_5_2_ShadowGetDocNamed",
      "lineno": 377,
      "outcome": "passed",
      "keywords": [
        "test_10_2_5_2_ShadowGetDocNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.900937992999388,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_5_2_ShadowGetDocNamed\u001b[0m\n"
      },
      "call": {
        "duration": 0.1657992740001646,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow1=test_10_2_5_2_ShadowGetDocNamed2025-04-15T23:33:38:484365\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 GET DOC\\r\\n'...\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009544539971102495,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_5_3_ShadowGetDocNotArrived",
      "lineno": 387,
      "outcome": "passed",
      "keywords": [
        "test_10_2_5_3_ShadowGetDocNotArrived",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.908233727997867,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_5_3_ShadowGetDocNotArrived\u001b[0m\n"
      },
      "call": {
        "duration": 10.875083776998508,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 0 SHADOW INIT\\r\\n'\n\nb'Command:  AT+SHADOW GET DOC\\r\\n'...\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001049749000230804,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_5_4_ShadowGetDocArrived",
      "lineno": 400,
      "outcome": "passed",
      "keywords": [
        "test_10_2_5_4_ShadowGetDocArrived",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.92628091699953,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_5_4_ShadowGetDocArrived\u001b[0m\n"
      },
      "call": {
        "duration": 27.708521906999522,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...........................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'...................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 0 SHADOW INIT\\r\\n'\n\nb'Command:  AT+SHADOW DOC\\r\\n'................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 22 0 SHADOW DOC\\r\\n'\n\nb'Command:  AT+SHADOW GET DOC\\r\\n'..\nb'Response: OK 1 {\"state\":{},\"metadata\":{},\"version\":1335,\"timestamp\":1744740277,\"clientToken\":\"ExpressLink\"}\\r\\n'\n\nb'Command:  AT+CONF Shadow1=test_10_2_5_4_ShadowGetDocArrived2025-04-15T23:34:17:349928\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 INIT\\r\\n'.......................................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 1 SHADOW INIT\\r\\n'\n\nb'Command:  AT+SHADOW1 DOC\\r\\n'................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 22 1 SHADOW DOC\\r\\n'\n\nb'Command:  AT+SHADOW1 GET DOC\\r\\n'...\nb'Response: OK 1 {\"state\":{},\"metadata\":{},\"version\":1,\"timestamp\":1744740282,\"clientToken\":\"ExpressLink\"}\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001427466999302851,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_5_5_ShadowGetDocRejected",
      "lineno": 453,
      "outcome": "passed",
      "keywords": [
        "test_10_2_5_5_ShadowGetDocRejected",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.901098898997589,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_5_5_ShadowGetDocRejected\u001b[0m\n"
      },
      "call": {
        "duration": 20.577880675002234,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow1=test_10_2_5_5_ShadowGetDocRejected2025-04-15T23:34:58:986474\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...........................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW1 INIT\\r\\n'................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 1 SHADOW INIT\\r\\n'\n\nb'Command:  AT+SHADOW1 DOC\\r\\n'...................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 22 1 SHADOW DOC\\r\\n'\n\nb'Command:  AT+SHADOW1 GET DOC\\r\\n'..\nb'Response: OK 0 {\"code\":404,\"message\":\"No shadow exists with name: \\'test_10_2_5_5_ShadowGetDocRejected2025-04-15T23:34:58:986474\\'\",\"clientToken\":\"ExpressLink\"}\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011076560003857594,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_5_6_ShadowGetDocOutOfRange",
      "lineno": 475,
      "outcome": "passed",
      "keywords": [
        "test_10_2_5_6_ShadowGetDocOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.915177761002269,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_5_6_ShadowGetDocOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.08503922700037947,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW5 GET DOC\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008753990005061496,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_5_7_ShadowGetDocNamedUndefined",
      "lineno": 484,
      "outcome": "passed",
      "keywords": [
        "test_10_2_5_7_ShadowGetDocNamedUndefined",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.9052424420006,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_5_7_ShadowGetDocNamedUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.08540237199849798,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 GET DOC\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010229159997834358,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_5_8_ShadowGetDocNamedShadowDisabled",
      "lineno": 493,
      "outcome": "passed",
      "keywords": [
        "test_10_2_5_8_ShadowGetDocNamedShadowDisabled",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.902514385001268,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_5_8_ShadowGetDocNamedShadowDisabled\u001b[0m\n"
      },
      "call": {
        "duration": 0.1560349089995725,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET DOC\\r\\n'...\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET DOC\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011332670001138467,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_6_1_ShadowUpdateUnnamed",
      "lineno": 521,
      "outcome": "error",
      "keywords": [
        "test_10_2_6_1_ShadowUpdateUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.52983524400042,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb7a2ec90>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_6_1_ShadowUpdateUnnamed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_6_1_ShadowUpdateUnnamed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7a1de40>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb7a2ec90>, max_time = 1744740496.1631315\ntries = 1638892, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb7a2ec90>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0005863459991815034,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_6_2_ShadowUpdateNamed",
      "lineno": 545,
      "outcome": "error",
      "keywords": [
        "test_10_2_6_2_ShadowUpdateNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 135.396093526997,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb7a1be90>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_6_2_ShadowUpdateNamed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_6_2_ShadowUpdateNamed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7a1f060>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb7a1be90>, max_time = 1744740631.6021686\ntries = 1640433, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb7a1be90>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0005886239996470977,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_6_3_ShadowUpdateEvent",
      "lineno": 567,
      "outcome": "error",
      "keywords": [
        "test_10_2_6_3_ShadowUpdateEvent",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.94789780500287,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb7a01c50>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_6_3_ShadowUpdateEvent\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_6_3_ShadowUpdateEvent>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7a1f1a0>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb7a01c50>, max_time = 1744740766.6389267\ntries = 1633864, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb7a01c50>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006137529999250546,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_6_4_ShadowUpdateReturn",
      "lineno": 605,
      "outcome": "error",
      "keywords": [
        "test_10_2_6_4_ShadowUpdateReturn",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.57195972299814,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb7809650>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_6_4_ShadowUpdateReturn\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_6_4_ShadowUpdateReturn>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7a1f9c0>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb7809650>, max_time = 1744740901.2537143\ntries = 1639770, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb7809650>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.000604697001108434,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_6_ShadowUpdateErrors",
      "lineno": 624,
      "outcome": "passed",
      "keywords": [
        "test_10_2_6_ShadowUpdateErrors",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.903555693003,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_6_ShadowUpdateErrors\u001b[0m\n"
      },
      "call": {
        "duration": 15.689796631999343,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW UPDATE {\"state\": {\"desired\": {\"RPM\": 325.5}}}\\r\\n'....\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..........................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW UPDATE ---\\\\Astate:\\\\A    desired:\\\\A        lightswitch: on\\r\\n'......\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+SHADOW5 UPDATE {\"state\": {\"desired\": {\"RPM\": 325.5}}}\\r\\n'....\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+SHADOW1 UPDATE {\"state\": {\"desired\": {\"RPM\": 325.5}}}\\r\\n'....\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\nb'Command:  AT+CONF ShadowToken=myToken\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW UPDATE {\"clientToken\": \"myToken\", \"state\": {\"desired\": {\"lightswitch\": \"middle\"}}}\\r\\n'.....\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW UPDATE {\"state\": {\"desired\": {\"RPM\": 325.5}}}\\r\\n'....\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010578420005913358,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_7_ShadowGetUpdateUnnamed",
      "lineno": 683,
      "outcome": "passed",
      "keywords": [
        "test_10_2_7_ShadowGetUpdateUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.902713354000298,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_7_ShadowGetUpdateUnnamed\u001b[0m\n"
      },
      "call": {
        "duration": 0.5511758890024794,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET UPDATE\\r\\n'...\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0012012660008622333,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_7_ShadowGetUpdateNamed",
      "lineno": 689,
      "outcome": "passed",
      "keywords": [
        "test_10_2_7_ShadowGetUpdateNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.920467161999113,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_7_ShadowGetUpdateNamed\u001b[0m\n"
      },
      "call": {
        "duration": 0.5716883510031039,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow1=customShadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 GET UPDATE\\r\\n'...\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010580079979263246,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_7_4_ShadowGetUpdateArrivedUnnamed",
      "lineno": 762,
      "outcome": "error",
      "keywords": [
        "test_10_2_7_4_ShadowGetUpdateArrivedUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 23.94825967399811,
        "outcome": "failed",
        "crash": {
          "path": "/usr/lib/python3.11/socket.py",
          "lineno": 962,
          "message": "socket.gaierror: [Errno -3] Temporary failure in name resolution"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 251,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/paho/mqtt/client.py",
            "lineno": 914,
            "message": "in connect"
          },
          {
            "path": "venv/lib/python3.11/site-packages/paho/mqtt/client.py",
            "lineno": 1044,
            "message": "in reconnect"
          },
          {
            "path": "venv/lib/python3.11/site-packages/paho/mqtt/client.py",
            "lineno": 3685,
            "message": "in _create_socket_connection"
          },
          {
            "path": "/usr/lib/python3.11/socket.py",
            "lineno": 827,
            "message": "in create_connection"
          },
          {
            "path": "/usr/lib/python3.11/socket.py",
            "lineno": 962,
            "message": "gaierror"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_7_4_ShadowGetUpdateArrivedUnnamed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_7_4_ShadowGetUpdateArrivedUnnamed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n>       client.connect(host=endpoint, port=8883, keepalive=60)\n\ntests/conftest.py:251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/paho/mqtt/client.py:914: in connect\n    return self.reconnect()\nvenv/lib/python3.11/site-packages/paho/mqtt/client.py:1044: in reconnect\n    sock = self._create_socket_connection()\nvenv/lib/python3.11/site-packages/paho/mqtt/client.py:3685: in _create_socket_connection\n    return socket.create_connection(addr, timeout=self._connect_timeout, source_address=source)\n/usr/lib/python3.11/socket.py:827: in create_connection\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com', port = 8883, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 0, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -3] Temporary failure in name resolution\n\n/usr/lib/python3.11/socket.py:962: gaierror"
      },
      "teardown": {
        "duration": 0.000634326999715995,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_7_4_ShadowGetUpdateArrivedNamed",
      "lineno": 771,
      "outcome": "error",
      "keywords": [
        "test_10_2_7_4_ShadowGetUpdateArrivedNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 136.3465234139985,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb77fd150>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_7_4_ShadowGetUpdateArrivedNamed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_7_4_ShadowGetUpdateArrivedNamed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7752480>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb77fd150>, max_time = 1744741120.5876436\ntries = 1637249, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb77fd150>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006274750012380537,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_7_5_ShadowGetUpdateOutOfRange",
      "lineno": 784,
      "outcome": "passed",
      "keywords": [
        "test_10_2_7_5_ShadowGetUpdateOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.791113992003375,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_7_5_ShadowGetUpdateOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.09148722000099951,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW5 GET UPDATE\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009287130014854483,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_7_6_ShadowGetUpdateUndefined",
      "lineno": 794,
      "outcome": "passed",
      "keywords": [
        "test_10_2_7_6_ShadowGetUpdateUndefined",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.785305811001308,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_7_6_ShadowGetUpdateUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.09206338099829736,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 GET UPDATE\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009296379976149183,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_7_7_ShadowGetUpdateDisabled",
      "lineno": 803,
      "outcome": "passed",
      "keywords": [
        "test_10_2_7_7_ShadowGetUpdateDisabled",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.791929099999834,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_7_7_ShadowGetUpdateDisabled\u001b[0m\n"
      },
      "call": {
        "duration": 0.19788521699956618,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET UPDATE\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET UPDATE\\r\\n'...\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET UPDATE\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010579709996818565,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_8_3_ShadowSubscribeSubackUnnamed",
      "lineno": 855,
      "outcome": "passed",
      "keywords": [
        "test_10_2_8_3_ShadowSubscribeSubackUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.777222598997469,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_8_3_ShadowSubscribeSubackUnnamed\u001b[0m\n"
      },
      "call": {
        "duration": 10.901550008002232,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW SUBSCRIBE\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 26 0 SHADOW SUBACK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001120451997849159,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_8_3_ShadowSubscribeSubackNamed",
      "lineno": 862,
      "outcome": "passed",
      "keywords": [
        "test_10_2_8_3_ShadowSubscribeSubackNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.788807338998595,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_8_3_ShadowSubscribeSubackNamed\u001b[0m\n"
      },
      "call": {
        "duration": 18.03209166600209,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF Shadow1=st_10_2_8_3_ShadowSubscribeSubackNamed2025-04-15T23:50:05:865421\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 SUBSCRIBE\\r\\n'.............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 26 1 SHADOW SUBACK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011686920006468426,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_8_5_ShadowSubscribeOutOfRange",
      "lineno": 874,
      "outcome": "passed",
      "keywords": [
        "test_10_2_8_5_ShadowSubscribeOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.780113318000076,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_8_5_ShadowSubscribeOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.0441828010007157,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW5 SUBSCRIBE\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.00104856400139397,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_8_6_ShadowSubscribeUndefined",
      "lineno": 883,
      "outcome": "passed",
      "keywords": [
        "test_10_2_8_6_ShadowSubscribeUndefined",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.335163465999358,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_8_6_ShadowSubscribeUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.04424091199689428,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 SUBSCRIBE\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010460449993843213,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_8_7_ShadowSubscribeRequiresConnection",
      "lineno": 890,
      "outcome": "passed",
      "keywords": [
        "test_10_2_8_7_ShadowSubscribeRequiresConnection",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.904949004001537,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_8_7_ShadowSubscribeRequiresConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.08636667800237774,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW SUBSCRIBE\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\nb'Command:  AT+CONF Shadow1=customShadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 SUBSCRIBE\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010515639987715986,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_8_8_ShadowSubscribeShadowError",
      "lineno": 900,
      "outcome": "passed",
      "keywords": [
        "test_10_2_8_8_ShadowSubscribeShadowError",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.91545773299731,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_8_8_ShadowSubscribeShadowError\u001b[0m\n"
      },
      "call": {
        "duration": 8.525621758999478,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW SUBSCRIBE\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011398610004107468,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_9_3_ShadowUnsubscribeReturnsOK",
      "lineno": 930,
      "outcome": "passed",
      "keywords": [
        "test_10_2_9_3_ShadowUnsubscribeReturnsOK",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.910726670001168,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_9_3_ShadowUnsubscribeReturnsOK\u001b[0m\n"
      },
      "call": {
        "duration": 16.258404910000536,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow1=myShadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW UNSUBSCRIBE\\r\\n'................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 UNSUBSCRIBE\\r\\n'..............\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010461580022820272,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_9_4_ShadowUnsubscribeOutOfRange",
      "lineno": 941,
      "outcome": "passed",
      "keywords": [
        "test_10_2_9_4_ShadowUnsubscribeOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.900359088002006,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_9_4_ShadowUnsubscribeOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.02166461999877356,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SHADOW5 UNSUBSCRIBE\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0004457930008356925,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_9_5_ShadowUnsubscribeUndefined",
      "lineno": 949,
      "outcome": "passed",
      "keywords": [
        "test_10_2_9_5_ShadowUnsubscribeUndefined",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.790471680000337,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_9_5_ShadowUnsubscribeUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.023405456999171292,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SHADOW1 UNSUBSCRIBE\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010499359996174462,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_9_6_ShadowUnsubscribeRequiresConnection",
      "lineno": 955,
      "outcome": "passed",
      "keywords": [
        "test_10_2_9_6_ShadowUnsubscribeRequiresConnection",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.341119533997698,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_9_6_ShadowUnsubscribeRequiresConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.08636849500180688,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW UNSUBSCRIBE\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\nb'Command:  AT+CONF Shadow1=shadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 UNSUBSCRIBE\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008874369996192399,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_9_7_ShadowUnsubscribeShadowError",
      "lineno": 965,
      "outcome": "passed",
      "keywords": [
        "test_10_2_9_7_ShadowUnsubscribeShadowError",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.917202782999084,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_9_7_ShadowUnsubscribeShadowError\u001b[0m\n"
      },
      "call": {
        "duration": 9.018194030999439,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW UNSUBSCRIBE\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+CONF Shadow1=shadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 UNSUBSCRIBE\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010651390002749395,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_misc_NoDeltasAfterShadowUnsubscribe",
      "lineno": 979,
      "outcome": "error",
      "keywords": [
        "test_misc_NoDeltasAfterShadowUnsubscribe",
        "prod",
        "slow",
        "pytestmark",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.49120817700168,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb7806790>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_misc_NoDeltasAfterShadowUnsubscribe\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_misc_NoDeltasAfterShadowUnsubscribe>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7750ea0>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb7806790>, max_time = 1744741520.3348982\ntries = 1641708, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb7806790>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006376059973263182,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_10_3_ShadowGetDeltaNonPending",
      "lineno": 1053,
      "outcome": "passed",
      "keywords": [
        "test_10_2_10_3_ShadowGetDeltaNonPending",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.913803918996564,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'....\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_10_3_ShadowGetDeltaNonPending\u001b[0m\n"
      },
      "call": {
        "duration": 0.14634516600199277,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'.\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET DELTA\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow1=shadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 GET DELTA\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008873990009305999,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_10_3_ShadowGetDeltaRetrievedUnnamed",
      "lineno": 1073,
      "outcome": "error",
      "keywords": [
        "test_10_2_10_3_ShadowGetDeltaRetrievedUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.51503427699936,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb7a2a390>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_10_3_ShadowGetDeltaRetrievedUnnamed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_10_3_ShadowGetDeltaRetrievedUnnamed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7753a60>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb7a2a390>, max_time = 1744741669.0026548\ntries = 1644167, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb7a2a390>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006305690003500786,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_10_3_ShadowGetDeltaRetrievedNamed",
      "lineno": 1097,
      "outcome": "error",
      "keywords": [
        "test_10_2_10_3_ShadowGetDeltaRetrievedNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 135.40262918200096,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb7819650>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_10_3_ShadowGetDeltaRetrievedNamed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_10_3_ShadowGetDeltaRetrievedNamed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7752b60>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb7819650>, max_time = 1744741804.448504\ntries = 1638037, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb7819650>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006729390006512403,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_10_5_ShadowGetDeltaOutOfRange",
      "lineno": 1122,
      "outcome": "passed",
      "keywords": [
        "test_10_2_10_5_ShadowGetDeltaOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.327843766001024,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_10_5_ShadowGetDeltaOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.044210691998159746,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW5 GET DELTA\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010537870002735872,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_11_3_ShadowDeleteRequestEventUnnamed",
      "lineno": 1148,
      "outcome": "passed",
      "keywords": [
        "test_10_2_11_3_ShadowDeleteRequestEventUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.914662605999183,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_11_3_ShadowDeleteRequestEventUnnamed\u001b[0m\n"
      },
      "call": {
        "duration": 13.579998130000604,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 0 SHADOW INIT\\r\\n'\n\nb'Command:  AT+SHADOW DELETE\\r\\n'.................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 25 0 SHADOW DELETE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010338610009057447,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_11_3_ShadowDeleteRequestEventNamed",
      "lineno": 1161,
      "outcome": "passed",
      "keywords": [
        "test_10_2_11_3_ShadowDeleteRequestEventNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.90371817399864,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_11_3_ShadowDeleteRequestEventNamed\u001b[0m\n"
      },
      "call": {
        "duration": 13.687264995998703,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow1=0_2_11_3_ShadowDeleteRequestEventNamed2025-04-16T00:01:00:270872\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW1 INIT\\r\\n'.................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 20 1 SHADOW INIT\\r\\n'\n\nb'Command:  AT+SHADOW1 DELETE\\r\\n'.................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 25 1 SHADOW DELETE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011643220022961032,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_11_5_ShadowDeleteOutOfRange",
      "lineno": 1180,
      "outcome": "passed",
      "keywords": [
        "test_10_2_11_5_ShadowDeleteOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.90608399499979,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_11_5_ShadowDeleteOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.04386537800019141,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW5 DELETE\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.00099339799999143,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_11_6_ShadowDeleteUndefined",
      "lineno": 1189,
      "outcome": "passed",
      "keywords": [
        "test_10_2_11_6_ShadowDeleteUndefined",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.92182063799919,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_11_6_ShadowDeleteUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.044294336999882944,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 DELETE\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010453239992784802,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_11_7_ShadowDeleteRequiresConnection",
      "lineno": 1196,
      "outcome": "passed",
      "keywords": [
        "test_10_2_11_7_ShadowDeleteRequiresConnection",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.794452784000896,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_11_7_ShadowDeleteRequiresConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.08621408199906,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW DELETE\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\nb'Command:  AT+CONF Shadow1=shadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 DELETE\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008813630010990892,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_11_8_ShadowDeleteShadowError",
      "lineno": 1207,
      "outcome": "passed",
      "keywords": [
        "test_10_2_11_8_ShadowDeleteShadowError",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.334559991999413,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_11_8_ShadowDeleteShadowError\u001b[0m\n"
      },
      "call": {
        "duration": 8.49217171700002,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SHADOW DELETE\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0014571899992006365,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_12_ShadowGetDeleteUnnamed",
      "lineno": 1226,
      "outcome": "passed",
      "keywords": [
        "test_10_2_12_ShadowGetDeleteUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.346932543001458,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_12_ShadowGetDeleteUnnamed\u001b[0m\n"
      },
      "call": {
        "duration": 0.10835356099778437,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET DELETE\\r\\n'...\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008811960033199284,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_12_ShadowGetDeleteNamed",
      "lineno": 1232,
      "outcome": "passed",
      "keywords": [
        "test_10_2_12_ShadowGetDeleteNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.337289597999188,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_12_ShadowGetDeleteNamed\u001b[0m\n"
      },
      "call": {
        "duration": 0.12940431099923444,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Shadow1=shadow\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 GET DELETE\\r\\n'...\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010051579993159976,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_12_4_ShadowGetDeleteArrivedUnnamed",
      "lineno": 1257,
      "outcome": "error",
      "keywords": [
        "test_10_2_12_4_ShadowGetDeleteArrivedUnnamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.95827874300085,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb7800510>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_12_4_ShadowGetDeleteArrivedUnnamed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_12_4_ShadowGetDeleteArrivedUnnamed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb77f4680>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb7800510>, max_time = 1744742103.491315\ntries = 1640941, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb7800510>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006237169982341584,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_12_4_ShadowGetDeleteArrivedNamed",
      "lineno": 1278,
      "outcome": "error",
      "keywords": [
        "test_10_2_12_4_ShadowGetDeleteArrivedNamed",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.52852658499978,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb782c850>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_12_4_ShadowGetDeleteArrivedNamed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_10_2_12_4_ShadowGetDeleteArrivedNamed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb77f54e0>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb782c850>, max_time = 1744742238.1479335\ntries = 1643903, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb782c850>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006304939997789916,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_12_5_ShadowGetDeleteOutOfRange",
      "lineno": 1304,
      "outcome": "passed",
      "keywords": [
        "test_10_2_12_5_ShadowGetDeleteOutOfRange",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.900467153998761,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_12_5_ShadowGetDeleteOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.08531086700168089,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW5 GET DELETE\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011069339998357464,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_12_6_ShadowGetDeleteUndefined",
      "lineno": 1314,
      "outcome": "passed",
      "keywords": [
        "test_10_2_12_6_ShadowGetDeleteUndefined",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.932779331000347,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_12_6_ShadowGetDeleteUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.08538427299936302,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW1 GET DELETE\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009120280010392889,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_2_12_7_ShadowGetDeleteDisabled",
      "lineno": 1323,
      "outcome": "passed",
      "keywords": [
        "test_10_2_12_7_ShadowGetDeleteDisabled",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.89646768899911,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_2_12_7_ShadowGetDeleteDisabled\u001b[0m\n"
      },
      "call": {
        "duration": 0.15713800600133254,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET DELETE\\r\\n'...\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+CONF Endpoint=endpoint\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF EnableShadow=0\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW GET DELETE\\r\\n'..\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011195820006832946,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section10.py::test_10_3_1_JobCommandReserved",
      "lineno": 1362,
      "outcome": "passed",
      "keywords": [
        "test_10_3_1_JobCommandReserved",
        "tests/test_section10.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.931158291001339,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_10_3_1_JobCommandReserved\u001b[0m\n"
      },
      "call": {
        "duration": 0.023279484998056432,
        "outcome": "passed",
        "stdout": "b'Command:  AT+JOB\\r\\n'..\nb'Response: ERR3 COMMAND NOT FOUND\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010279899979650509,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section11.py::test_11_1_1_1_TimeAvailable",
      "lineno": 27,
      "outcome": "passed",
      "keywords": [
        "test_11_1_1_1_TimeAvailable",
        "slow",
        "pytestmark",
        "tests/test_section11.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.761418229998526,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_11_1_1_1_TimeAvailable\u001b[0m\n"
      },
      "call": {
        "duration": 38.56825517700054,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+TIME?\\r\\n'..\nb'Response: OK date 2025/04/15 time 18:39:07.00 UTC\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001022027001454262,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section11.py::test_11_1_1_2_TimeNotAvailable",
      "lineno": 40,
      "outcome": "passed",
      "keywords": [
        "test_11_1_1_2_TimeNotAvailable",
        "tests/test_section11.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.791858887998387,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_11_1_1_2_TimeNotAvailable\u001b[0m\n"
      },
      "call": {
        "duration": 0.02426075299808872,
        "outcome": "passed",
        "stdout": "b'Command:  AT+TIME?\\r\\n'..\nb'Response: ERR15 TIME NOT AVAILABLE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010445080006320495,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section11.py::test_11_1_2_1_WhereAvailable",
      "lineno": 53,
      "outcome": "skipped",
      "keywords": [
        "test_11_1_2_1_WhereAvailable",
        "skipif",
        "pytestmark",
        "tests/test_section11.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.0009659170027589425,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section11.py', 54, 'Skipped: AT+WHERE? unavailable')"
      },
      "teardown": {
        "duration": 0.000955268998950487,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section11.py::test_11_1_2_2_WhereNotAvailable",
      "lineno": 67,
      "outcome": "passed",
      "keywords": [
        "test_11_1_2_2_WhereNotAvailable",
        "skipif",
        "pytestmark",
        "tests/test_section11.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.349936728001921,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_11_1_2_2_WhereNotAvailable\u001b[0m\n"
      },
      "call": {
        "duration": 0.023523519001173554,
        "outcome": "passed",
        "stdout": "b'Command:  AT+WHERE?\\r\\n'..\nb'Response: ERR16 LOCATION NOT AVAILABLE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010024909970525187,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_1_1_StagingAccountConnection",
      "lineno": 39,
      "outcome": "passed",
      "keywords": [
        "test_12_1_1_StagingAccountConnection",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.899719359997107,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_1_1_StagingAccountConnection\u001b[0m\n"
      },
      "call": {
        "duration": 8.58684699800142,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONNECT\\r\\n'......................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 1 0 CONNECTED STAGING\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010300079993612599,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_1_2_StagingAccountEndpoint",
      "lineno": 50,
      "outcome": "passed",
      "keywords": [
        "test_12_1_2_StagingAccountEndpoint",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.923772276000818,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_1_2_StagingAccountEndpoint\u001b[0m\n"
      },
      "call": {
        "duration": 0.10495469400120783,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? Endpoint\\r\\n'...\nb'Response: OK d01957845e3vbsmdo9am-ats.iot.us-east-2.amazonaws.com\\r\\n'\n\nb'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 0 0 DISCONNECTED STAGING\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.000995528000203194,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_1_3_BirthCertificateCommonNameIsThingName",
      "lineno": 100,
      "outcome": "failed",
      "keywords": [
        "test_12_1_3_BirthCertificateCommonNameIsThingName",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.7935043030011,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_1_3_BirthCertificateCommonNameIsThingName\u001b[0m\n"
      },
      "call": {
        "duration": 0.15294422100123484,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section12.py",
          "lineno": 109,
          "message": "AssertionError: assert 'AWS IoT Certificate' == 'silicon_labs_thing'\n  - silicon_labs_thing\n  + AWS IoT Certificate"
        },
        "traceback": [
          {
            "path": "tests/test_section12.py",
            "lineno": 109,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? Certificate pem\\r\\n'..\nb'Response: OK20 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIDWTCCAkGgAwIBAgIUOWBvTtHMVup0MWDN3Z2ugpshHhYwDQYJKoZIhvcNAQEL\r\nBQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\r\nSW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIzMDMyMzEyNDE0\r\nMloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\r\nZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrT0KmqZTJovLoCnaaa\r\n9issa0GvqIOAYqPL3J8dD8HIRQnJnDggWHvf0K23hP1Uhfwpe6IrPB9wPS2O523/\r\nFzDf5O+KBVVd2VyWgNvfhzAU+1nKx9/1ktjNR4bkFozOtS4AWrTCOS4f/fq+Bx4R\r\nsb+8gtjfbO6XP6sbvj+ygoN8Zm7SyLCBxBgSyCiZGWlecYhVXSpdWx2kjImYpXzG\r\ntf0ltnAPuUJhQ7rcqWvh/LWnIYX1/UUlVX/sTy4fHU4o/5S3W+dKdK6JQNk4f3VQ\r\ndrFeApdRk8EKlCfPZlDjZiZPsQkhpMqG3Vc3I04fA34JMfSgWGGOnl6IVjWJuVvO\r\nE2MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUDIXnS+v3EsBBkQLM2hzTvEJMqNAwHQYD\r\nVR0OBBYEFImms3SJJei7bsV2aPqFQ9WoC9XCMAwGA1UdEwEB/wQCMAAwDgYDVR0P\r\nAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQDenzmAeoxlJ0yPMmPS5ceG+VmW\r\n1yGY+tENA0lY5JHq4uza4UIHOlNXCWtkd53SjoT2UoTuPVN8tZb4+F2Yjjkpj/yq\r\n8yEND8UyyyWiqWbOx2EXJUgdL86Mi/LQ+c7nblUOwLMw/esSqa0qS7XsxtO46xYo\r\n8mB/MIMK+Uvfhn5etHXkiWjAu71guyYeF0II46O3yUxxhKNVxpclGTdmzbOzogP9\r\nJYIaJ2Yw/ptCw+zjkIRi7Vlh18Hx/i2lNKOhWOADw0tXMWyCKg0KJqrcP4QG/t9Z\r\nQjP2EnJSEJTuqn74i+/7mm2eE018e0SENMIzEJpC1d25huun0xh7XqnO7zxB\r\n-----END CERTIFICATE-----\r\nb'Command:  AT+CONF? ThingName\\r\\n'..\nb'Response: OK silicon_labs_thing\\r\\n'\n\n",
        "longrepr": "def test_12_1_3_BirthCertificateCommonNameIsThingName():\n        certificate = _GetCertificatePem('Certificate')\n        cert = x509.load_pem_x509_certificate(certificate.encode())\n        common_name = cert.subject.get_attributes_for_oid(\n            x509.oid.NameOID.COMMON_NAME)[0].value\n    \n        Thing_name = cmd(\"AT+CONF? ThingName\\r\\n\")\n    \n>       assert common_name == Thing_name[3:-2]\nE       AssertionError: assert 'AWS IoT Certificate' == 'silicon_labs_thing'\nE         - silicon_labs_thing\nE         + AWS IoT Certificate\n\ntests/test_section12.py:109: AssertionError"
      },
      "teardown": {
        "duration": 0.0005652719992212951,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_1_3_BirthCertificateExpiry",
      "lineno": 111,
      "outcome": "passed",
      "keywords": [
        "test_12_1_3_BirthCertificateExpiry",
        "prod",
        "pytestmark",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.343764699999156,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_1_3_BirthCertificateExpiry\u001b[0m\n"
      },
      "call": {
        "duration": 0.1300741589984682,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? Certificate pem\\r\\n'..\nb'Response: OK20 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIDWTCCAkGgAwIBAgIUOWBvTtHMVup0MWDN3Z2ugpshHhYwDQYJKoZIhvcNAQEL\r\nBQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\r\nSW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIzMDMyMzEyNDE0\r\nMloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\r\nZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrT0KmqZTJovLoCnaaa\r\n9issa0GvqIOAYqPL3J8dD8HIRQnJnDggWHvf0K23hP1Uhfwpe6IrPB9wPS2O523/\r\nFzDf5O+KBVVd2VyWgNvfhzAU+1nKx9/1ktjNR4bkFozOtS4AWrTCOS4f/fq+Bx4R\r\nsb+8gtjfbO6XP6sbvj+ygoN8Zm7SyLCBxBgSyCiZGWlecYhVXSpdWx2kjImYpXzG\r\ntf0ltnAPuUJhQ7rcqWvh/LWnIYX1/UUlVX/sTy4fHU4o/5S3W+dKdK6JQNk4f3VQ\r\ndrFeApdRk8EKlCfPZlDjZiZPsQkhpMqG3Vc3I04fA34JMfSgWGGOnl6IVjWJuVvO\r\nE2MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUDIXnS+v3EsBBkQLM2hzTvEJMqNAwHQYD\r\nVR0OBBYEFImms3SJJei7bsV2aPqFQ9WoC9XCMAwGA1UdEwEB/wQCMAAwDgYDVR0P\r\nAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQDenzmAeoxlJ0yPMmPS5ceG+VmW\r\n1yGY+tENA0lY5JHq4uza4UIHOlNXCWtkd53SjoT2UoTuPVN8tZb4+F2Yjjkpj/yq\r\n8yEND8UyyyWiqWbOx2EXJUgdL86Mi/LQ+c7nblUOwLMw/esSqa0qS7XsxtO46xYo\r\n8mB/MIMK+Uvfhn5etHXkiWjAu71guyYeF0II46O3yUxxhKNVxpclGTdmzbOzogP9\r\nJYIaJ2Yw/ptCw+zjkIRi7Vlh18Hx/i2lNKOhWOADw0tXMWyCKg0KJqrcP4QG/t9Z\r\nQjP2EnJSEJTuqn74i+/7mm2eE018e0SENMIzEJpC1d25huun0xh7XqnO7zxB\r\n-----END CERTIFICATE-----\r\n"
      },
      "teardown": {
        "duration": 0.0006709189983666874,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_1_5_LoginSignature",
      "lineno": 166,
      "outcome": "passed",
      "keywords": [
        "test_12_1_5_LoginSignature",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.903029539997078,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_1_5_LoginSignature\u001b[0m\n"
      },
      "call": {
        "duration": 0.0010682680003810674,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0009788800016394816,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_3_2_StagingEndpointMode",
      "lineno": 292,
      "outcome": "passed",
      "keywords": [
        "test_12_3_2_StagingEndpointMode",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.897140032000607,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_3_2_StagingEndpointMode\u001b[0m\n"
      },
      "call": {
        "duration": 0.6961591530016449,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 0 0 DISCONNECTED STAGING\\r\\n'\n\nb'Command:  AT+CONF Endpoint=example.com\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 0 1 DISCONNECTED CUSTOMER\\r\\n'\n\nb'Command:  AT+CONF Endpoint=d01957845e3vbsmdo9am-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 0 0 DISCONNECTED STAGING\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010630830001900904,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_3_2_OnboardingByClaim",
      "lineno": 302,
      "outcome": "passed",
      "keywords": [
        "test_12_3_2_OnboardingByClaim",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 15.183710230001452,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_3_2_OnboardingByClaim\u001b[0m\nAttempting to connect to: d01957845e3vbsmdo9am-ats.iot.us-east-2.amazonaws.com\n"
      },
      "call": {
        "duration": 31.260930001000816,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONNECT\\r\\n'....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 1 0 CONNECTED STAGING\\r\\n'\n\nPublished an outgoing message:\r\n silicon_labs_thing/expresslink_config: {\"Endpoint\": \"a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\"}\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 1 0 MSG\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 3 0 CONLOST\\r\\n'\n\nb'Command:  AT+GET0\\r\\n'..\nb'Response: OK1 silicon_labs_thing/expresslink_config\\r\\n'\n\nb'Command:  '.\nb'Response: {\"Endpoint\": \"a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\"}\\r\\n'\n\nb'Command:  AT+CONF? Endpoint\\r\\n'...\nb'Response: OK a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'\n\nb'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 0 1 DISCONNECTED CUSTOMER\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.......................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0014509489992633462,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_3_2_1_NoClaimOnCustomerAccount",
      "lineno": 324,
      "outcome": "error",
      "keywords": [
        "test_12_3_2_1_NoClaimOnCustomerAccount",
        "slow",
        "pytestmark",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 134.54510042499896,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb77efad0>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_3_2_1_NoClaimOnCustomerAccount\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_12_3_2_1_NoClaimOnCustomerAccount>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7794fe0>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb77efad0>, max_time = 1744742652.2193725\ntries = 1638705, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb77efad0>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0005814210016978905,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section12.py::test_12_3_2_5_ShadowErrorInStaging",
      "lineno": 340,
      "outcome": "passed",
      "keywords": [
        "test_12_3_2_5_ShadowErrorInStaging",
        "tests/test_section12.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.898973170998943,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_12_3_2_5_ShadowErrorInStaging\u001b[0m\n"
      },
      "call": {
        "duration": 8.849455857998691,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONNECT\\r\\n'....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SHADOW INIT\\r\\n'...\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+SHADOW DOC\\r\\n'...\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+SHADOW UPDATE { \"state\": { \"desired\": { \"testkey\": \"testvalue\"}}}\\r\\n'.......\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+SHADOW SUBSCRIBE\\r\\n'...\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\nb'Command:  AT+SHADOW DELETE\\r\\n'...\nb'Response: ERR24 SHADOW ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010071199976664502,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_1_1_1_bleInitCentral",
      "lineno": 141,
      "outcome": "passed",
      "keywords": [
        "test_13_1_1_1_bleInitCentral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.782061584002804,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_1_1_1_bleInitCentral\u001b[0m\n"
      },
      "call": {
        "duration": 0.022122438000224065,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008815100009087473,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_1_1_1_bleInitPeripheral",
      "lineno": 147,
      "outcome": "passed",
      "keywords": [
        "test_13_1_1_1_bleInitPeripheral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.344260153000505,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_1_1_1_bleInitPeripheral\u001b[0m\n"
      },
      "call": {
        "duration": 0.1656251259992132,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\", \"indicate\": 1, \"write\": 1, \"read\": 1, \"notify\": 1}\\r\\n'......\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={\"appearance\": \"0340\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008889169985195622,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_1_1_2_bleInitBadParam",
      "lineno": 165,
      "outcome": "passed",
      "keywords": [
        "test_13_1_1_2_bleInitBadParam",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.912258874002873,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_1_1_2_bleInitBadParam\u001b[0m\n"
      },
      "call": {
        "duration": 0.15324009499818203,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE INIT \\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE INIT FOO\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL1\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL1\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE1 INIT CENTRAL\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE1 INIT PERIPHERAL\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009832680007093586,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_1_1_3_bleInitMissingConfig",
      "lineno": 184,
      "outcome": "passed",
      "keywords": [
        "test_13_1_1_3_bleInitMissingConfig",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.89621395100039,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_1_1_3_bleInitMissingConfig\u001b[0m\n"
      },
      "call": {
        "duration": 0.023434444003214594,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: ERR28 CONFIGURATION ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011139339985675178,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_1_1_4_bleInitAlreadyCentral",
      "lineno": 191,
      "outcome": "passed",
      "keywords": [
        "test_13_1_1_4_bleInitAlreadyCentral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.794815978999395,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_1_1_4_bleInitAlreadyCentral\u001b[0m\n"
      },
      "call": {
        "duration": 0.14705650500036427,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010493230001884513,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_1_1_4_bleInitAlreadyPeripheral",
      "lineno": 200,
      "outcome": "passed",
      "keywords": [
        "test_13_1_1_4_bleInitAlreadyPeripheral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.343902607000928,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_1_1_4_bleInitAlreadyPeripheral\u001b[0m\n"
      },
      "call": {
        "duration": 0.16782719700131565,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010146569984499365,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_2_bleDiscoverClearScan",
      "lineno": 237,
      "outcome": "failed",
      "keywords": [
        "test_13_2_1_2_bleDiscoverClearScan",
        "skipif",
        "slow",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.931072913001117,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_2_bleDiscoverClearScan\u001b[0m\n"
      },
      "call": {
        "duration": 12.325276030998793,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 253,
          "message": "AssertionError: assert None\n +  where None = get_next_event('^OK \\\\d+ \\\\d+ BLE DISCOVER COMPLETE\\\\r\\\\n', print_dots=False, timeout=10)"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 253,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER 1\\r\\n'..\nb'Response: OK\\r\\n'\n\nWaiting for DISCOVER COMPLETE event\nTimed out while waiting for an event to match: ^OK \\d+ \\d+ BLE DISCOVER COMPLETE\\r\\n\n",
        "longrepr": "@pytest.mark.slow\n    @pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_1_2_bleDiscoverClearScan() -> None:\n        # filter to a single device, discard duplicates\n        config = _get_gap_config()\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n    \n        # Start multiple discovers, but don't allow previous discovers to finish\n        for _ in range(100):\n            assert cmd('AT+BLE1 DISCOVER\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE1 DISCOVER 1\\r\\n')\n    \n        # Only one discover operation should complete\n        print(\"Waiting for DISCOVER COMPLETE event\")\n>       assert get_next_event(r'^OK \\d+ \\d+ BLE DISCOVER COMPLETE\\r\\n',\n                              print_dots=False,\n                              timeout=10)\nE       AssertionError: assert None\nE        +  where None = get_next_event('^OK \\\\d+ \\\\d+ BLE DISCOVER COMPLETE\\\\r\\\\n', print_dots=False, timeout=10)\n\ntests/test_section13.py:253: AssertionError"
      },
      "teardown": {
        "duration": 0.0005733280013373587,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_3_bleDiscoverDuration",
      "lineno": 262,
      "outcome": "failed",
      "keywords": [
        "test_13_2_1_3_bleDiscoverDuration",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.898869508000644,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_3_bleDiscoverDuration\u001b[0m\n"
      },
      "call": {
        "duration": 16.178038759997435,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 275,
          "message": "AssertionError: assert None\n +  where None = get_next_event('^OK \\\\d+ \\\\d+ BLE DISCOVER COMPLETE\\\\r\\\\n', print_dots=False, timeout=(5 * 3))"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 275,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\", \"filterDups\": 1}\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER 5\\r\\n'..\nb'Response: OK\\r\\n'\n\nWaiting for DISCOVER COMPLETE event\nTimed out while waiting for an event to match: ^OK \\d+ \\d+ BLE DISCOVER COMPLETE\\r\\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_1_3_bleDiscoverDuration() -> None:\n        # Filter to a single address and filter duplicates to ensure\n        # backing memory for GET DISCOVER messages does not overrun.\n        config = _get_gap_config()\n        config['filterDups'] = 1\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        expectedDuration = 5\n        assert cmd(f'AT+BLE1 DISCOVER {expectedDuration}\\r\\n') == 'OK\\r\\n'\n        t1 = time.time()\n        print('Waiting for DISCOVER COMPLETE event')\n>       assert get_next_event(r'^OK \\d+ \\d+ BLE DISCOVER COMPLETE\\r\\n',\n                              print_dots=False,\n                              timeout=expectedDuration * 3)\nE       AssertionError: assert None\nE        +  where None = get_next_event('^OK \\\\d+ \\\\d+ BLE DISCOVER COMPLETE\\\\r\\\\n', print_dots=False, timeout=(5 * 3))\n\ntests/test_section13.py:275: AssertionError"
      },
      "teardown": {
        "duration": 0.0005625319972750731,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_4_bleDiscoverCompleteEvent",
      "lineno": 284,
      "outcome": "failed",
      "keywords": [
        "test_13_2_1_4_bleDiscoverCompleteEvent",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.781131627998548,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_4_bleDiscoverCompleteEvent\u001b[0m\n"
      },
      "call": {
        "duration": 6.085657436000474,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 291,
          "message": "AssertionError: assert None\n +  where None = get_next_event('OK 41 0 BLE DISCOVER COMPLETE\\r\\n', print_dots=False, timeout=6)"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 291,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER 3\\r\\n'..\nb'Response: OK\\r\\n'\n\nWaiting for discover complete event\nTimed out while waiting for an event to match: OK 41 0 BLE DISCOVER COMPLETE\r\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_1_4_bleDiscoverCompleteEvent() -> None:\n        assert cmd('AT+CONF BLECentral1={}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE1 DISCOVER 3\\r\\n') == 'OK\\r\\n'\n        print('Waiting for discover complete event')\n>       assert get_next_event('OK 41 0 BLE DISCOVER COMPLETE\\r\\n',\n                              print_dots=False,\n                              timeout=6)\nE       AssertionError: assert None\nE        +  where None = get_next_event('OK 41 0 BLE DISCOVER COMPLETE\\r\\n', print_dots=False, timeout=6)\n\ntests/test_section13.py:291: AssertionError"
      },
      "teardown": {
        "duration": 0.0005663470001309179,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_7_bleDiscoverOk",
      "lineno": 305,
      "outcome": "passed",
      "keywords": [
        "test_13_2_1_7_bleDiscoverOk",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.333541686999524,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_7_bleDiscoverOk\u001b[0m\n"
      },
      "call": {
        "duration": 0.06403703699834296,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009931940003298223,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_8_bleDiscoverCancel",
      "lineno": 316,
      "outcome": "passed",
      "keywords": [
        "test_13_2_1_8_bleDiscoverCancel",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.92550860800111,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_8_bleDiscoverCancel\u001b[0m\n"
      },
      "call": {
        "duration": 0.1470263370028988,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLECentral2={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER CANCEL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE2 DISCOVER CANCEL\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009189360025629867,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_9_bleDiscoverRequiresDuration",
      "lineno": 329,
      "outcome": "passed",
      "keywords": [
        "test_13_2_1_9_bleDiscoverRequiresDuration",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.925662818997807,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_9_bleDiscoverRequiresDuration\u001b[0m\n"
      },
      "call": {
        "duration": 0.08591656799762859,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER \\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER 0\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008757879986660555,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_10_bleDiscoverRequiresConnectionIndex",
      "lineno": 339,
      "outcome": "passed",
      "keywords": [
        "test_13_2_1_10_bleDiscoverRequiresConnectionIndex",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.780833563996566,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_10_bleDiscoverRequiresConnectionIndex\u001b[0m\n"
      },
      "call": {
        "duration": 0.04420868899978814,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE DISCOVER\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010532489977777004,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_11_bleDiscoverOutOfRange",
      "lineno": 347,
      "outcome": "passed",
      "keywords": [
        "test_13_2_1_11_bleDiscoverOutOfRange",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.331653475001076,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_11_bleDiscoverOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.06556409599943436,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 DISCOVER\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 DISCOVER\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010412669980723877,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_12_bleDiscoverRequiresConfig",
      "lineno": 356,
      "outcome": "passed",
      "keywords": [
        "test_13_2_1_12_bleDiscoverRequiresConfig",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.898440773999027,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_12_bleDiscoverRequiresConfig\u001b[0m\n"
      },
      "call": {
        "duration": 0.066163145002065,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER 1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010458420001668856,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_1_13_bleDiscoverNotCentral",
      "lineno": 365,
      "outcome": "passed",
      "keywords": [
        "test_13_2_1_13_bleDiscoverNotCentral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.901379905000795,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_1_13_bleDiscoverNotCentral\u001b[0m\n"
      },
      "call": {
        "duration": 0.23179121000066516,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER 30\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER 30\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010589899975457229,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_2_1_bleGetDiscoverEmpty",
      "lineno": 425,
      "outcome": "passed",
      "keywords": [
        "test_13_2_2_1_bleGetDiscoverEmpty",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.776358401002653,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_2_1_bleGetDiscoverEmpty\u001b[0m\n"
      },
      "call": {
        "duration": 0.04313460599951213,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET DISCOVER\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009955829991667997,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_2_2_bleDiscoverResponse",
      "lineno": 434,
      "outcome": "failed",
      "keywords": [
        "test_13_2_2_2_bleDiscoverResponse",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.341884270001174,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_2_2_bleDiscoverResponse\u001b[0m\n"
      },
      "call": {
        "duration": 10.147391392001737,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 443,
          "message": "AssertionError: assert None\n +  where None = get_next_event('OK \\\\d+ \\\\d+ BLE DISCOVER COMPLETE\\\\r\\\\n', print_dots=False, timeout=10)"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 443,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\", \"filterDups\": 1}\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCOVER 5\\r\\n'..\nb'Response: OK\\r\\n'\n\nTimed out while waiting for an event to match: OK \\d+ \\d+ BLE DISCOVER COMPLETE\\r\\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_2_2_bleDiscoverResponse() -> None:\n        config = _get_gap_config()\n        config['filterDups'] = 1\n        # filter to a single device, discard duplicates\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE1 DISCOVER 5\\r\\n') == 'OK\\r\\n'\n>       assert get_next_event(r'OK \\d+ \\d+ BLE DISCOVER COMPLETE\\r\\n',\n                              print_dots=False,\n                              timeout=10)\nE       AssertionError: assert None\nE        +  where None = get_next_event('OK \\\\d+ \\\\d+ BLE DISCOVER COMPLETE\\\\r\\\\n', print_dots=False, timeout=10)\n\ntests/test_section13.py:443: AssertionError"
      },
      "teardown": {
        "duration": 0.0005719020009564701,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_2_3_bleGetDiscoverNotCentral",
      "lineno": 451,
      "outcome": "passed",
      "keywords": [
        "test_13_2_2_3_bleGetDiscoverNotCentral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.91165962300147,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_2_3_bleGetDiscoverNotCentral\u001b[0m\n"
      },
      "call": {
        "duration": 0.16818901999795344,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE GET DISCOVER\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET DISCOVER\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001127155999711249,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_3_1_bleConnect",
      "lineno": 487,
      "outcome": "passed",
      "keywords": [
        "test_13_2_3_1_bleConnect",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.90596004300096,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_3_1_bleConnect\u001b[0m\n"
      },
      "call": {
        "duration": 0.15605974800200784,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008897139996406622,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_2_bleConnectOutOfRange",
      "lineno": 497,
      "outcome": "passed",
      "keywords": [
        "test_13_2_2_bleConnectOutOfRange",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.789281084998947,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_2_bleConnectOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.06521419000273454,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 CONNECT\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE255 CONNECT\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009350840009574313,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_3_3_bleConnectNotDescribed",
      "lineno": 506,
      "outcome": "passed",
      "keywords": [
        "test_13_2_3_3_bleConnectNotDescribed",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.343366626002535,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_3_3_bleConnectNotDescribed\u001b[0m\n"
      },
      "call": {
        "duration": 0.12781309099955251,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: ERR28 CONFIGURATION ERROR\\r\\n'\n\nb'Command:  AT+CONF BLECentral1={\"filterDups\": 1}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: ERR28 CONFIGURATION ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009938049988704734,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_3_4_bleConnectNotConfigured",
      "lineno": 520,
      "outcome": "passed",
      "keywords": [
        "test_13_2_3_4_bleConnectNotConfigured",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.915467572001944,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_3_4_bleConnectNotConfigured\u001b[0m\n"
      },
      "call": {
        "duration": 0.04422446600074181,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011031559988623485,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_3_5_bleConnectAlready",
      "lineno": 529,
      "outcome": "failed",
      "keywords": [
        "test_13_2_3_5_bleConnectAlready",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.920278208999662,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_3_5_bleConnectAlready\u001b[0m\n"
      },
      "call": {
        "duration": 0.17788627799745882,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 536,
          "message": "AssertionError: assert 'OK\\r\\n' == 'ERR25 NOT ALLOWED\\r\\n'\n  - ERR25 NOT ALLOWED\r\n  + OK"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 536,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_3_5_bleConnectAlready() -> None:\n        config = _get_gap_config()\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n>       assert cmd('AT+BLE1 CONNECT\\r\\n', timeout=60) == 'ERR25 NOT ALLOWED\\r\\n'\nE       AssertionError: assert 'OK\\r\\n' == 'ERR25 NOT ALLOWED\\r\\n'\nE         - ERR25 NOT ALLOWED\r\nE         + OK\n\ntests/test_section13.py:536: AssertionError"
      },
      "teardown": {
        "duration": 0.0005636799978674389,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_3_6_bleConnectNotCentral",
      "lineno": 540,
      "outcome": "passed",
      "keywords": [
        "test_13_2_3_6_bleConnectNotCentral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.788996980001684,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_3_6_bleConnectNotCentral\u001b[0m\n"
      },
      "call": {
        "duration": 0.20943286399779026,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010558229987509549,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_3_7_bleConnectTimeout",
      "lineno": 554,
      "outcome": "failed",
      "keywords": [
        "test_13_2_3_7_bleConnectTimeout",
        "skipif",
        "slow",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.34685423100018,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_3_7_bleConnectTimeout\u001b[0m\n"
      },
      "call": {
        "duration": 0.13569623800140107,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 565,
          "message": "assert 0.07053852081298828 == 30 \u00b1 5.0e+00\n  comparison failed\n  Obtained: 0.07053852081298828\n  Expected: 30 \u00b1 5.0e+00"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 565,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"00:11:22:33:DC:BA\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\n",
        "longrepr": "@pytest.mark.slow\n    @pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_3_7_bleConnectTimeout() -> None:\n        config = GapConfig(peer=_hex_to_mac(0x00_11_22_33_DC_BA))\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        t1 = time.time()\n        assert cmd('AT+BLE1 CONNECT\\r\\n',\n                   timeout=60) == 'ERR14 UNABLE TO CONNECT\\r\\n'\n        t2 = time.time()\n>       assert (t2 - t1) == pytest.approx(30, abs=5)\nE       assert 0.07053852081298828 == 30 \u00b1 5.0e+00\nE         comparison failed\nE         Obtained: 0.07053852081298828\nE         Expected: 30 \u00b1 5.0e+00\n\ntests/test_section13.py:565: AssertionError"
      },
      "teardown": {
        "duration": 0.0005738270010624547,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_4_2_centralConnectQueryConnected",
      "lineno": 577,
      "outcome": "failed",
      "keywords": [
        "test_13_2_4_2_centralConnectQueryConnected",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.92207631799829,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_4_2_centralConnectQueryConnected\u001b[0m\n"
      },
      "call": {
        "duration": 0.1789131190016633,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 584,
          "message": "AssertionError: assert 'OK 0 DISCONNECTED\\r\\n' == 'OK 1 CONNECTED\\r\\n'\n  - OK 1 CONNECTED\r\n  ?    ^^\n  + OK 0 DISCONNECTED\r\n  ?    ^^^^^"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 584,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT?\\r\\n'..\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_4_2_centralConnectQueryConnected() -> None:\n        assert cmd(\n            f'AT+CONF BLECentral1={json.dumps(_get_gap_config())}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n>       assert cmd('AT+BLE1 CONNECT?\\r\\n') == 'OK 1 CONNECTED\\r\\n'\nE       AssertionError: assert 'OK 0 DISCONNECTED\\r\\n' == 'OK 1 CONNECTED\\r\\n'\nE         - OK 1 CONNECTED\r\nE         ?    ^^\nE         + OK 0 DISCONNECTED\r\nE         ?    ^^^^^\n\ntests/test_section13.py:584: AssertionError"
      },
      "teardown": {
        "duration": 0.0006091229988669511,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_4_3_centralConnectQueryDisconnected",
      "lineno": 588,
      "outcome": "passed",
      "keywords": [
        "test_13_2_4_3_centralConnectQueryDisconnected",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.911374587001774,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_4_3_centralConnectQueryDisconnected\u001b[0m\n"
      },
      "call": {
        "duration": 0.06474854599946411,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT?\\r\\n'..\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011180629990121815,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_4_4_centralConnectQueryBadIndex",
      "lineno": 597,
      "outcome": "passed",
      "keywords": [
        "test_13_2_4_4_centralConnectQueryBadIndex",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.778642833000049,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_4_4_centralConnectQueryBadIndex\u001b[0m\n"
      },
      "call": {
        "duration": 0.06505319200005033,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 CONNECT?\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 CONNECT?\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001003768000373384,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_4_5_connectQueryIndexAsPeripheral",
      "lineno": 606,
      "outcome": "passed",
      "keywords": [
        "test_13_2_4_5_connectQueryIndexAsPeripheral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.336745270997199,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_4_5_connectQueryIndexAsPeripheral\u001b[0m\n"
      },
      "call": {
        "duration": 0.14677120399937849,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT?\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010669530020095408,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_5_1_centralDisconnectDisconnects",
      "lineno": 619,
      "outcome": "passed",
      "keywords": [
        "test_13_2_5_1_centralDisconnectDisconnects",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.90560460800043,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_5_1_centralDisconnectDisconnects\u001b[0m\n"
      },
      "call": {
        "duration": 0.198489875998348,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT?\\r\\n'..\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010170089990424458,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_5_2_centralDisconnectOk",
      "lineno": 631,
      "outcome": "passed",
      "keywords": [
        "test_13_2_5_2_centralDisconnectOk",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.928126431997953,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_5_2_centralDisconnectOk\u001b[0m\n"
      },
      "call": {
        "duration": 0.04309379099868238,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008923989989852998,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_5_3_centralDisconnectBadIndex",
      "lineno": 639,
      "outcome": "passed",
      "keywords": [
        "test_13_2_5_3_centralDisconnectBadIndex",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.793690395999874,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_5_3_centralDisconnectBadIndex\u001b[0m\n"
      },
      "call": {
        "duration": 0.06542765099948156,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 DISCONNECT\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 DISCONNECT\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008793250017333776,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_5_5_centralDisconnectNotCentral",
      "lineno": 652,
      "outcome": "passed",
      "keywords": [
        "test_13_2_5_5_centralDisconnectNotCentral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.33596328600106,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_5_5_centralDisconnectNotCentral\u001b[0m\n"
      },
      "call": {
        "duration": 0.06462037999881431,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 DISCONNECT\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010164160012209322,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_6_1_bleReadHexPayload",
      "lineno": 667,
      "outcome": "failed",
      "keywords": [
        "test_13_2_6_1_bleReadHexPayload",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.920517124999606,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_6_1_bleReadHexPayload\u001b[0m\n"
      },
      "call": {
        "duration": 0.25896881299922825,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 679,
          "message": "assert None"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 679,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"AE400002B5A3F383E0A9E50E24DCCA9B\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 READ1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_6_1_bleReadHexPayload() -> None:\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(_get_gap_config())}\\r\\n')\n        config = GattConfig(\n            chr=_hex_to_uuid(cf.get('peer_characteristic_read_uuid', int)),\n            service=_hex_to_uuid(cf.get('peer_service_read_uuid', int)))\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n        match = re.match(r'^OK ([a-zA-Z0-9]{0,1024})\\r\\n$',\n                         cmd('AT+BLE1 READ1\\r\\n'))\n>       assert match\nE       assert None\n\ntests/test_section13.py:679: AssertionError"
      },
      "teardown": {
        "duration": 0.000606493998930091,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_6_3_bleReadCentralUndefined",
      "lineno": 691,
      "outcome": "passed",
      "keywords": [
        "test_13_2_6_3_bleReadCentralUndefined",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.907535531001486,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_6_3_bleReadCentralUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.25829109600090305,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"service\": \"32EF00010FDF458989CAED89ECF678D7\", \"chr\": \"32EF00020FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE2 READ1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010275829990860075,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_6_3_bleReadGattUndefined",
      "lineno": 703,
      "outcome": "passed",
      "keywords": [
        "test_13_2_6_3_bleReadGattUndefined",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.787024895998911,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_6_3_bleReadGattUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.17779105400040862,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 READ1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010144350017071702,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_6_6_bleReadOutOfRange",
      "lineno": 717,
      "outcome": "passed",
      "keywords": [
        "test_13_2_6_6_bleReadOutOfRange",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.345217656999012,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_6_6_bleReadOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.41155905200139387,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"AE400002B5A3F383E0A9E50E24DCCA9B\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 READ1\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 READ1\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 READ0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 READ0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 READ0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 READ512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 READ512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 READ512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008976770004665013,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_6_7_bleReadNoConnection",
      "lineno": 735,
      "outcome": "passed",
      "keywords": [
        "test_13_2_6_7_bleReadNoConnection",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.930680303998088,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_6_7_bleReadNoConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.16710721100025694,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"AE400002B5A3F383E0A9E50E24DCCA9B\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 READ1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009451389996684156,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_6_9_bleReadNotCentral",
      "lineno": 752,
      "outcome": "passed",
      "keywords": [
        "test_13_2_6_9_bleReadNotCentral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.900252212999476,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_6_9_bleReadNotCentral\u001b[0m\n"
      },
      "call": {
        "duration": 0.20982463500331505,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"AE400002B5A3F383E0A9E50E24DCCA9B\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 READ1\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 READ1\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.00113432299986016,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_7_1_bleWrite",
      "lineno": 776,
      "outcome": "failed",
      "keywords": [
        "test_13_2_7_1_bleWrite",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.76429766900037,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_7_1_bleWrite\u001b[0m\n"
      },
      "call": {
        "duration": 0.2588497569995525,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 786,
          "message": "AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\n  - OK\r\n  + ERR6 NO CONNECTION"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 786,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400002B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 WRITE1 ABCDEF01\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_7_1_bleWrite() -> None:\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(_get_gap_config())}\\r\\n')\n        config = GattConfig(\n            chr=_hex_to_uuid(cf.get('peer_characteristic_write_uuid', int)),\n            service=_hex_to_uuid(cf.get('peer_service_write_uuid', int)))\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n')\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n>       assert cmd('AT+BLE1 WRITE1 ABCDEF01\\r\\n') == 'OK\\r\\n'\nE       AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\nE         - OK\r\nE         + ERR6 NO CONNECTION\n\ntests/test_section13.py:786: AssertionError"
      },
      "teardown": {
        "duration": 0.0005593649984803051,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_7_2_bleWriteNotHex",
      "lineno": 790,
      "outcome": "passed",
      "keywords": [
        "test_13_2_7_2_bleWriteNotHex",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.350819937000779,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_7_2_bleWriteNotHex\u001b[0m\n"
      },
      "call": {
        "duration": 0.32333656400078326,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400002B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 WRITE1\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE1 WRITE1 foo\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE1 WRITE1 foobar\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE1 WRITE1 ABC\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001016231002722634,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_7_3_bleWriteCentralConfigUndefined",
      "lineno": 807,
      "outcome": "passed",
      "keywords": [
        "test_13_2_7_3_bleWriteCentralConfigUndefined",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.903844558000856,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_7_3_bleWriteCentralConfigUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.258483736000926,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400002B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE2 WRITE1 ABDCEF01\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001022221000312129,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_7_bleWriteOutOfRange",
      "lineno": 823,
      "outcome": "passed",
      "keywords": [
        "test_13_2_7_bleWriteOutOfRange",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.900034930997208,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_7_bleWriteOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.41151286699823686,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400002B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 WRITE1 ABCDEF01\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 WRITE1 ABCDEF01\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 WRITE0 ABCDEF01\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 WRITE0 ABCDEF01\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 WRITE0 ABCDEF01\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 WRITE512 ABCDEF01\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 WRITE512 ABCDEF01\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 WRITE512 ABCDEF01\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009466479968978092,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_7_6_bleWriteGattNoConnection",
      "lineno": 842,
      "outcome": "passed",
      "keywords": [
        "test_13_2_7_6_bleWriteGattNoConnection",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.777672042997438,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_7_6_bleWriteGattNoConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.16741931900105556,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400002B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 WRITE1 ABCEDF01\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010523689998080954,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_7_7_bleWriteGattNotCentral",
      "lineno": 855,
      "outcome": "passed",
      "keywords": [
        "test_13_2_7_7_bleWriteGattNotCentral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.34399405899967,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_7_7_bleWriteGattNotCentral\u001b[0m\n"
      },
      "call": {
        "duration": 0.20965860700016492,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400002B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 WRITE1 ABCEDF01\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 WRITE1 ABCEDF01\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011258680024184287,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_8_1_bleSubscribeOk",
      "lineno": 881,
      "outcome": "failed",
      "keywords": [
        "test_13_2_8_1_bleSubscribeOk",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.92855134400088,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_8_1_bleSubscribeOk\u001b[0m\n"
      },
      "call": {
        "duration": 0.258993706000183,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 891,
          "message": "AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\n  - OK\r\n  + ERR6 NO CONNECTION"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 891,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_8_1_bleSubscribeOk() -> None:\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(_get_gap_config())}\\r\\n')\n        config = GattConfig(\n            chr=_hex_to_uuid(cf.get('peer_characteristic_subscribe_uuid', int)),\n            service=_hex_to_uuid(cf.get('peer_service_subscribe_uuid', int)))\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n>       assert cmd('AT+BLE1 SUBSCRIBE1\\r\\n') == 'OK\\r\\n'\nE       AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\nE         - OK\r\nE         + ERR6 NO CONNECTION\n\ntests/test_section13.py:891: AssertionError"
      },
      "teardown": {
        "duration": 0.0007699669986322988,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_8_2_bleSubscribeParameterUndefined",
      "lineno": 895,
      "outcome": "passed",
      "keywords": [
        "test_13_2_8_2_bleSubscribeParameterUndefined",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.920196433999081,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_8_2_bleSubscribeParameterUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 0.17825026900027297,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010090739997394849,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_8_bleSubscribeOutofRange",
      "lineno": 907,
      "outcome": "passed",
      "keywords": [
        "test_13_2_8_bleSubscribeOutofRange",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.791743551999389,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_8_bleSubscribeOutofRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.4115531600000395,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 SUBSCRIBE1\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 SUBSCRIBE1\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 SUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 SUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 SUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 SUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008972239993454423,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_8_5_bleSubscribeNoConnection",
      "lineno": 925,
      "outcome": "passed",
      "keywords": [
        "test_13_2_8_5_bleSubscribeNoConnection",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.342202443000133,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_8_5_bleSubscribeNoConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.1677934199979063,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010193529997195583,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_8_6_bleSubscribeNotAllowed",
      "lineno": 938,
      "outcome": "passed",
      "keywords": [
        "test_13_2_8_6_bleSubscribeNotAllowed",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.925645310999244,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_8_6_bleSubscribeNotAllowed\u001b[0m\n"
      },
      "call": {
        "duration": 0.1465944550000131,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE1\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009023359998536762,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_bleSubscribeEvent",
      "lineno": 956,
      "outcome": "failed",
      "keywords": [
        "test_13_2_bleSubscribeEvent",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.909824774000299,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_bleSubscribeEvent\u001b[0m\n"
      },
      "call": {
        "duration": 0.25849679200109676,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 966,
          "message": "AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\n  - OK\r\n  + ERR6 NO CONNECTION"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 966,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_bleSubscribeEvent() -> None:\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(_get_gap_config())}\\r\\n')\n        config = GattConfig(\n            chr=_hex_to_uuid(cf.get('peer_characteristic_subscribe_uuid', int)),\n            service=_hex_to_uuid(cf.get('peer_service_subscribe_uuid', int)))\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n>       assert cmd('AT+BLE1 SUBSCRIBE1\\r\\n') == 'OK\\r\\n'\nE       AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\nE         - OK\r\nE         + ERR6 NO CONNECTION\n\ntests/test_section13.py:966: AssertionError"
      },
      "teardown": {
        "duration": 0.0005676940018020105,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_9_1_bleGetSubscribeOkEmpty",
      "lineno": 982,
      "outcome": "passed",
      "keywords": [
        "test_13_2_9_1_bleGetSubscribeOkEmpty",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.786652282000432,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_9_1_bleGetSubscribeOkEmpty\u001b[0m\n"
      },
      "call": {
        "duration": 0.2568209630007914,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 GET SUBSCRIBE1\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011723309980880003,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_9_2_bleGetSubscribeWithPayloadIndexMissing",
      "lineno": 996,
      "outcome": "failed",
      "keywords": [
        "test_13_2_9_2_bleGetSubscribeWithPayloadIndexMissing",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.330622164001397,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_9_2_bleGetSubscribeWithPayloadIndexMissing\u001b[0m\n"
      },
      "call": {
        "duration": 0.2589222169990535,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 1006,
          "message": "AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\n  - OK\r\n  + ERR6 NO CONNECTION"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 1006,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_9_2_bleGetSubscribeWithPayloadIndexMissing() -> None:\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(_get_gap_config())}\\r\\n')\n        config = GattConfig(\n            chr=_hex_to_uuid(cf.get('peer_characteristic_subscribe_uuid', int)),\n            service=_hex_to_uuid(cf.get('peer_service_subscribe_uuid', int)))\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n>       assert cmd('AT+BLE1 SUBSCRIBE1\\r\\n') == 'OK\\r\\n'\nE       AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\nE         - OK\r\nE         + ERR6 NO CONNECTION\n\ntests/test_section13.py:1006: AssertionError"
      },
      "teardown": {
        "duration": 0.0005711750018235762,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_9_2_bleGetSubscribeWithPayloadWithIndex",
      "lineno": 1019,
      "outcome": "failed",
      "keywords": [
        "test_13_2_9_2_bleGetSubscribeWithPayloadWithIndex",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.905570541999623,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_9_2_bleGetSubscribeWithPayloadWithIndex\u001b[0m\n"
      },
      "call": {
        "duration": 0.2589931479997176,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 1029,
          "message": "AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\n  - OK\r\n  + ERR6 NO CONNECTION"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 1029,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_9_2_bleGetSubscribeWithPayloadWithIndex() -> None:\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(_get_gap_config())}\\r\\n')\n        config = GattConfig(\n            chr=_hex_to_uuid(cf.get('peer_characteristic_subscribe_uuid', int)),\n            service=_hex_to_uuid(cf.get('peer_service_subscribe_uuid', int)))\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n>       assert cmd('AT+BLE1 SUBSCRIBE1\\r\\n') == 'OK\\r\\n'\nE       AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\nE         - OK\r\nE         + ERR6 NO CONNECTION\n\ntests/test_section13.py:1029: AssertionError"
      },
      "teardown": {
        "duration": 0.0005730829980166163,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_9_bleGetSubscribeOutOfRange",
      "lineno": 1046,
      "outcome": "passed",
      "keywords": [
        "test_13_2_9_bleGetSubscribeOutOfRange",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.92727679300151,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_9_bleGetSubscribeOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.45547289500245824,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 GET SUBSCRIBE1\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 GET SUBSCRIBE1\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 GET SUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 GET SUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 GET SUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 GET SUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 GET SUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 GET SUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 GET SUBSCRIBE\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 GET SUBSCRIBE\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009140219990513287,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_9_5_bleGetSubscribeMissingConfig",
      "lineno": 1067,
      "outcome": "passed",
      "keywords": [
        "test_13_2_9_5_bleGetSubscribeMissingConfig",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.7794886949996,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_9_5_bleGetSubscribeMissingConfig\u001b[0m\n"
      },
      "call": {
        "duration": 0.25836069399883854,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE2 GET SUBSCRIBE1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010197609990427736,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_9_6_bleUnsubscribeNotAllowed",
      "lineno": 1081,
      "outcome": "passed",
      "keywords": [
        "test_13_2_9_6_bleUnsubscribeNotAllowed",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.350676080000994,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_9_6_bleUnsubscribeNotAllowed\u001b[0m\n"
      },
      "call": {
        "duration": 0.20976641900051618,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 GET SUBSCRIBE1\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 GET SUBSCRIBE1\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011272779993305448,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_10_1_bleUnsubscribeOk",
      "lineno": 1100,
      "outcome": "failed",
      "keywords": [
        "test_13_2_10_1_bleUnsubscribeOk",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.907042580001871,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_10_1_bleUnsubscribeOk\u001b[0m\n"
      },
      "call": {
        "duration": 0.2605502210026316,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section13.py",
          "lineno": 1110,
          "message": "AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\n  - OK\r\n  + ERR6 NO CONNECTION"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 1110,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 SUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    def test_13_2_10_1_bleUnsubscribeOk() -> None:\n        assert cmd(f'AT+CONF BLECentral1={json.dumps(_get_gap_config())}\\r\\n')\n        assert cmd('AT+BLE INIT CENTRAL\\r\\n') == 'OK\\r\\n'\n        _ble_connect_with_retries()\n        config = GattConfig(\n            chr=_hex_to_uuid(cf.get('peer_characteristic_subscribe_uuid', int)),\n            service=_hex_to_uuid(cf.get('peer_service_subscribe_uuid', int)))\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n>       assert cmd('AT+BLE1 SUBSCRIBE1\\r\\n') == 'OK\\r\\n'\nE       AssertionError: assert 'ERR6 NO CONNECTION\\r\\n' == 'OK\\r\\n'\nE         - OK\r\nE         + ERR6 NO CONNECTION\n\ntests/test_section13.py:1110: AssertionError"
      },
      "teardown": {
        "duration": 0.0007656540001335088,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_10_2_bleUnsubscribeMissingCentralConfig",
      "lineno": 1117,
      "outcome": "passed",
      "keywords": [
        "test_13_2_10_2_bleUnsubscribeMissingCentralConfig",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.901562504001049,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_10_2_bleUnsubscribeMissingCentralConfig\u001b[0m\n"
      },
      "call": {
        "duration": 0.1783478590004961,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 UNSUBSCRIBE1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010325760013074614,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_10_3_bleUnsubscribeMissingGattConfig",
      "lineno": 1127,
      "outcome": "passed",
      "keywords": [
        "test_13_2_10_3_bleUnsubscribeMissingGattConfig",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.79137839300165,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_10_3_bleUnsubscribeMissingGattConfig\u001b[0m\n"
      },
      "call": {
        "duration": 0.2582864479991258,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE2 UNSUBSCRIBE1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011473330014268868,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_10_bleUnsubscribeOutOfRange",
      "lineno": 1143,
      "outcome": "passed",
      "keywords": [
        "test_13_2_10_bleUnsubscribeOutOfRange",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.34225647600033,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_10_bleUnsubscribeOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.4058851970003161,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'....\nb'Response: ERR14 UNABLE TO CONNECT\\r\\n'\n\nb'Command:  AT+BLE1 CONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE0 UNSUBSCRIBE1\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 UNSUBSCRIBE1\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 UNSUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 UNSUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 UNSUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE1 UNSUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE0 UNSUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE512 UNSUBSCRIBE512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010290950012858957,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_10_6_bleUnsubscribeNoConnection",
      "lineno": 1162,
      "outcome": "passed",
      "keywords": [
        "test_13_2_10_6_bleUnsubscribeNoConnection",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.921311804002471,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_10_6_bleUnsubscribeNoConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.1675156990022515,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 UNSUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010589830017124768,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_2_10_7_bleUnsubscribeNotAllowed",
      "lineno": 1175,
      "outcome": "passed",
      "keywords": [
        "test_13_2_10_7_bleUnsubscribeNotAllowed",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.896889314000873,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_2_10_7_bleUnsubscribeNotAllowed\u001b[0m\n"
      },
      "call": {
        "duration": 0.14649997199740028,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLECentral1={\"peer\": \"D8:3A:DD:0D:FC:D1\"}\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"6E400003B5A3F393E0A9E50E24DCCA9E\", \"service\": \"6E400001B5A3F393E0A9E50E24DCCA9E\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 UNSUBSCRIBE1\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009017820011649746,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_1_1_peripheralConnectQueryDisconnected",
      "lineno": 1198,
      "outcome": "passed",
      "keywords": [
        "test_13_3_1_1_peripheralConnectQueryDisconnected",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.767869418999908,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_1_1_peripheralConnectQueryDisconnected\u001b[0m\n"
      },
      "call": {
        "duration": 0.14662645300268196,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE CONNECT?\\r\\n'..\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011268720008956734,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_1_2_peripheralConnectQueryConnected",
      "lineno": 1209,
      "outcome": "failed",
      "keywords": [
        "test_13_3_1_2_peripheralConnectQueryConnected",
        "asyncio",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.355704066001636,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_1_2_peripheralConnectQueryConnected\u001b[0m\n"
      },
      "call": {
        "duration": 60.65419501500219,
        "outcome": "failed",
        "crash": {
          "path": "/usr/lib/python3.11/asyncio/timeouts.py",
          "lineno": 98,
          "message": "TimeoutError"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 1223,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/__init__.py",
            "lineno": 491,
            "message": "in __aenter__"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/__init__.py",
            "lineno": 531,
            "message": "in connect"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py",
            "lineno": 141,
            "message": "in connect"
          },
          {
            "path": "/usr/lib/python3.11/asyncio/timeouts.py",
            "lineno": 98,
            "message": "TimeoutError"
          }
        ],
        "stdout": "b'Command:  AT+CONF CustomName=ELTest\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE\\r\\n'..\nb'Response: OK\\r\\n'\n\nConnecting to a central device...\n",
        "longrepr": "self = <bleak.backends.bluezdbus.client.BleakClientBlueZDBus object at 0x7fb784dd90>\ndangerous_use_bleak_cache = False, kwargs = {}, timeout = 60\non_connected_changed = <function BleakClientBlueZDBus.connect.<locals>.on_connected_changed at 0x7fb79619e0>\non_value_changed = <function BleakClientBlueZDBus.connect.<locals>.on_value_changed at 0x7fb76f4e00>\nlocal_disconnect_monitor_event = <asyncio.locks.Event object at 0x7fb77ee710 [set]>\nreply = <Message METHOD_RETURN serial=1258 reply_serial=3 sender=:1.3 destination=:1.241 path=None interface=None member=None error_name=None signature= body=[]>\n\n    async def connect(self, dangerous_use_bleak_cache: bool = False, **kwargs) -> bool:\n        \"\"\"Connect to the specified GATT server.\n    \n        Keyword Args:\n            timeout (float): Timeout for required ``BleakScanner.find_device_by_address`` call. Defaults to 10.0.\n    \n        Returns:\n            Boolean representing connection status.\n    \n        Raises:\n            BleakError: If the device is already connected or if the device could not be found.\n            BleakDBusError: If there was a D-Bus error\n            asyncio.TimeoutError: If the connection timed out\n        \"\"\"\n        logger.debug(\"Connecting to device @ %s\", self.address)\n    \n        if self.is_connected:\n            raise BleakError(\"Client is already connected\")\n    \n        if not BlueZFeatures.checked_bluez_version:\n            await BlueZFeatures.check_bluez_version()\n        if not BlueZFeatures.supported_version:\n            raise BleakError(\"Bleak requires BlueZ >= 5.43.\")\n        # A Discover must have been run before connecting to any devices.\n        # Find the desired device before trying to connect.\n        timeout = kwargs.get(\"timeout\", self._timeout)\n        if self._device_path is None:\n            device = await BleakScanner.find_device_by_address(\n                self.address,\n                timeout=timeout,\n                adapter=self._adapter,\n                backend=BleakScannerBlueZDBus,\n            )\n    \n            if device:\n                self._device_info = device.details.get(\"props\")\n                self._device_path = device.details[\"path\"]\n            else:\n                raise BleakDeviceNotFoundError(\n                    self.address, f\"Device with address {self.address} was not found.\"\n                )\n    \n        manager = await get_global_bluez_manager()\n    \n        async with async_timeout(timeout):\n            while True:\n                # Each BLE connection session needs a new D-Bus connection to avoid a\n                # BlueZ quirk where notifications are automatically enabled on reconnect.\n                self._bus = await MessageBus(\n                    bus_type=BusType.SYSTEM,\n                    negotiate_unix_fd=True,\n                    auth=get_dbus_authenticator(),\n                ).connect()\n    \n                def on_connected_changed(connected: bool) -> None:\n                    if not connected:\n                        logger.debug(f\"Device disconnected ({self._device_path})\")\n    \n                        self._is_connected = False\n    \n                        if self._disconnect_monitor_event:\n                            self._disconnect_monitor_event.set()\n                            self._disconnect_monitor_event = None\n    \n                        self._cleanup_all()\n                        if self._disconnected_callback is not None:\n                            self._disconnected_callback()\n                        disconnecting_event = self._disconnecting_event\n                        if disconnecting_event:\n                            disconnecting_event.set()\n    \n                def on_value_changed(char_path: str, value: bytes) -> None:\n                    callback = self._notification_callbacks.get(char_path)\n    \n                    if callback:\n                        callback(bytearray(value))\n    \n                watcher = manager.add_device_watcher(\n                    self._device_path, on_connected_changed, on_value_changed\n                )\n                self._remove_device_watcher = lambda: manager.remove_device_watcher(\n                    watcher\n                )\n    \n                self._disconnect_monitor_event = (\n                    local_disconnect_monitor_event\n                ) = asyncio.Event()\n    \n                try:\n                    try:\n                        #\n                        # The BlueZ backend does not disconnect devices when the\n                        # application closes or crashes. This can cause problems\n                        # when trying to reconnect to the same device. To work\n                        # around this, we check if the device is already connected.\n                        #\n                        # For additional details see https://github.com/bluez/bluez/issues/89\n                        #\n                        if manager.is_connected(self._device_path):\n                            logger.debug(\n                                'skipping calling \"Connect\" since %s is already connected',\n                                self._device_path,\n                            )\n                        else:\n                            logger.debug(\n                                \"Connecting to BlueZ path %s\", self._device_path\n                            )\n>                           reply = await self._bus.call(\n                                Message(\n                                    destination=defs.BLUEZ_SERVICE,\n                                    interface=defs.DEVICE_INTERFACE,\n                                    path=self._device_path,\n                                    member=\"Connect\",\n                                )\n                            )\n\nvenv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py:204: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <dbus_fast.aio.message_bus.MessageBus object at 0x7fb76d6420>\nmsg = <Message METHOD_CALL serial=2 reply_serial=0 sender=None destination=org.bluez path=/org/bluez/hci0/dev_D4_48_67_DD_E6_7A interface=org.bluez.Device1 member=Connect error_name=None signature= body=[]>\n\n    async def call(self, msg: Message) -> Optional[Message]:\n        \"\"\"Send a method call and wait for a reply from the DBus daemon.\n    \n        :param msg: The method call message to send.\n        :type msg: :class:`Message <dbus_fast.Message>`\n    \n        :returns: A message in reply to the message sent. If the message does\n            not expect a reply based on the message flags or type, returns\n            ``None`` after the message is sent.\n        :rtype: :class:`Message <dbus_fast.Message>` or :class:`None` if no reply is expected.\n    \n        :raises:\n            - :class:`Exception` - If a connection error occurred.\n        \"\"\"\n        if (\n            msg.flags.value & NO_REPLY_EXPECTED_VALUE\n            or msg.message_type is not MessageType.METHOD_CALL\n        ):\n            await self.send(msg)\n            return None\n    \n        future = self._loop.create_future()\n    \n        def reply_handler(reply, err):\n            if not future.done():\n                if err:\n                    _future_set_exception(future, err)\n                else:\n                    _future_set_result(future, reply)\n    \n        self._call(msg, reply_handler, check_callback=False)\n    \n>       await future\nE       asyncio.exceptions.CancelledError\n\nvenv/lib/python3.11/site-packages/dbus_fast/aio/message_bus.py:390: CancelledError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    @pytest.mark.asyncio\n    async def test_13_3_1_2_peripheralConnectQueryConnected() -> None:\n        config = GattConfig(chr=LOCAL_CHAR_ID, service=LOCAL_SERVICE_ID)\n        dname = cf.get('peer_name', str)\n        assert cmd(f'AT+CONF CustomName={dname}\\r\\n') == 'OK\\r\\n'\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+CONF BLEPeripheral={}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT PERIPHERAL\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE ADVERTISE\\r\\n') == 'OK\\r\\n'\n        print('Connecting to a central device...')\n        device = await BleakScanner.find_device_by_name(dname, timeout=60)\n        assert device, f'{dname} not found'\n>       async with BleakClient(device, timeout=60) as client:\n\ntests/test_section13.py:1223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/bleak/__init__.py:491: in __aenter__\n    await self.connect()\nvenv/lib/python3.11/site-packages/bleak/__init__.py:531: in connect\n    return await self._backend.connect(**kwargs)\nvenv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py:141: in connect\n    async with async_timeout(timeout):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Timeout [expired]>\nexc_type = <class 'asyncio.exceptions.CancelledError'>\nexc_val = CancelledError(), exc_tb = <traceback object at 0x7fb77ef1c0>\n\n    async def __aexit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> Optional[bool]:\n        assert self._state in (_State.ENTERED, _State.EXPIRING)\n    \n        if self._timeout_handler is not None:\n            self._timeout_handler.cancel()\n            self._timeout_handler = None\n    \n        if self._state is _State.EXPIRING:\n            self._state = _State.EXPIRED\n    \n            if self._task.uncancel() == 0 and exc_type is exceptions.CancelledError:\n                # Since there are no outstanding cancel requests, we're\n                # handling this.\n>               raise TimeoutError\nE               TimeoutError\n\n/usr/lib/python3.11/asyncio/timeouts.py:98: TimeoutError"
      },
      "teardown": {
        "duration": 0.0012202219986647833,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_1_3_peripheralConnectQueryAdvertising",
      "lineno": 1230,
      "outcome": "passed",
      "keywords": [
        "test_13_3_1_3_peripheralConnectQueryAdvertising",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.329339290001371,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_1_3_peripheralConnectQueryAdvertising\u001b[0m\n"
      },
      "call": {
        "duration": 0.16859025899975677,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE CONNECT?\\r\\n'..\nb'Response: OK 2 ADVERTISING\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009383010001329239,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_1_4_peripheralConnectQueryNotPeripheral",
      "lineno": 1242,
      "outcome": "passed",
      "keywords": [
        "test_13_3_1_4_peripheralConnectQueryNotPeripheral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.914536268999655,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_1_4_peripheralConnectQueryNotPeripheral\u001b[0m\n"
      },
      "call": {
        "duration": 0.04398745399885229,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE CONNECT?\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010437810014991555,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_2_1_peripheralDisconnect",
      "lineno": 1252,
      "outcome": "failed",
      "keywords": [
        "test_13_3_2_1_peripheralDisconnect",
        "asyncio",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.902753684997151,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_2_1_peripheralDisconnect\u001b[0m\n"
      },
      "call": {
        "duration": 30.376777206998668,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/bleak/backends/bluezdbus/manager.py",
          "lineno": 686,
          "message": "bleak.exc.BleakError: failed to discover services, device disconnected"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 1269,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/__init__.py",
            "lineno": 491,
            "message": "in __aenter__"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/__init__.py",
            "lineno": 531,
            "message": "in connect"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py",
            "lineno": 263,
            "message": "in connect"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py",
            "lineno": 649,
            "message": "in get_services"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/backends/bluezdbus/manager.py",
            "lineno": 581,
            "message": "in get_services"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/backends/bluezdbus/manager.py",
            "lineno": 686,
            "message": "BleakError"
          }
        ],
        "stdout": "b'Command:  AT+CONF CustomName=ELTest\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE\\r\\n'..\nb'Response: OK\\r\\n'\n\nConnecting to a central device...\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\ndisconnect: BleakClient, D4:48:67:DD:E6:7A\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    @pytest.mark.asyncio\n    async def test_13_3_2_1_peripheralDisconnect() -> None:\n        config = GattConfig(chr=LOCAL_CHAR_ID, service=LOCAL_SERVICE_ID)\n        dname = cf.get('peer_name', str)\n        assert cmd(f'AT+CONF CustomName={dname}\\r\\n') == 'OK\\r\\n'\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+CONF BLEPeripheral={}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT PERIPHERAL\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE ADVERTISE\\r\\n') == 'OK\\r\\n'\n        print('Connecting to a central device...')\n        device = await BleakScanner.find_device_by_name(dname, timeout=60)\n        assert device, f'{dname} not found'\n    \n        succeeded: bool = False\n        try:\n>           async with BleakClient(\n                    device,\n                    disconnected_callback=(\n                        lambda client: print(f'disconnect: {client}')),\n                    timeout=60) as client:\n\ntests/test_section13.py:1269: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/bleak/__init__.py:491: in __aenter__\n    await self.connect()\nvenv/lib/python3.11/site-packages/bleak/__init__.py:531: in connect\n    return await self._backend.connect(**kwargs)\nvenv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py:263: in connect\n    await self.get_services(\nvenv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py:649: in get_services\n    self.services = await manager.get_services(\nvenv/lib/python3.11/site-packages/bleak/backends/bluezdbus/manager.py:581: in get_services\n    await self._wait_for_services_discovery(device_path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <bleak.backends.bluezdbus.manager.BlueZManager object at 0x7fb7595610>\ndevice_path = '/org/bluez/hci0/dev_D4_48_67_DD_E6_7A'\n\n    async def _wait_for_services_discovery(self, device_path: str) -> None:\n        \"\"\"\n        Waits for the device services to be discovered.\n    \n        If a disconnect happens before the completion a BleakError exception is raised.\n        \"\"\"\n        services_discovered_wait_task = asyncio.create_task(\n            self._wait_condition(device_path, \"ServicesResolved\", True)\n        )\n        device_disconnected_wait_task = asyncio.create_task(\n            self._wait_condition(device_path, \"Connected\", False)\n        )\n        done, pending = await asyncio.wait(\n            {services_discovered_wait_task, device_disconnected_wait_task},\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n    \n        for p in pending:\n            p.cancel()\n    \n        if device_disconnected_wait_task in done:\n>           raise BleakError(\"failed to discover services, device disconnected\")\nE           bleak.exc.BleakError: failed to discover services, device disconnected\n\nvenv/lib/python3.11/site-packages/bleak/backends/bluezdbus/manager.py:686: BleakError"
      },
      "teardown": {
        "duration": 0.0010522630000195932,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_2_1_peripheralDisconnectAlready",
      "lineno": 1286,
      "outcome": "passed",
      "keywords": [
        "test_13_3_2_1_peripheralDisconnectAlready",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.90324453699941,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_2_1_peripheralDisconnectAlready\u001b[0m\n"
      },
      "call": {
        "duration": 0.14540737700008322,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE DISCONNECT\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008742099998926278,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_2_2_peripheralDisconnectNotPeripheral",
      "lineno": 1297,
      "outcome": "passed",
      "keywords": [
        "test_13_3_2_2_peripheralDisconnectNotPeripheral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.787541831999988,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_2_2_peripheralDisconnectNotPeripheral\u001b[0m\n"
      },
      "call": {
        "duration": 0.0654908799988334,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE DISCONNECT\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE DISCONNECT\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010587809993012343,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_3_1_bleAdvertise",
      "lineno": 1315,
      "outcome": "passed",
      "keywords": [
        "test_13_3_3_1_bleAdvertise",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.33250567199866,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_3_1_bleAdvertise\u001b[0m\n"
      },
      "call": {
        "duration": 0.1473308589993394,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010694109987525735,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_3_2_bleAdvertiseCancel",
      "lineno": 1326,
      "outcome": "passed",
      "keywords": [
        "test_13_3_3_2_bleAdvertiseCancel",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.917092184001376,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_3_2_bleAdvertiseCancel\u001b[0m\n"
      },
      "call": {
        "duration": 0.1880060500006948,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE CANCEL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE CANCEL\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008962649990280624,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_3_2_bleAdvertiseCancelConnected",
      "lineno": 1338,
      "outcome": "failed",
      "keywords": [
        "test_13_3_3_2_bleAdvertiseCancelConnected",
        "asyncio",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.9038104809988,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_3_2_bleAdvertiseCancelConnected\u001b[0m\n"
      },
      "call": {
        "duration": 60.65085145700141,
        "outcome": "failed",
        "crash": {
          "path": "/usr/lib/python3.11/asyncio/timeouts.py",
          "lineno": 98,
          "message": "TimeoutError"
        },
        "traceback": [
          {
            "path": "tests/test_section13.py",
            "lineno": 1352,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/__init__.py",
            "lineno": 491,
            "message": "in __aenter__"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/__init__.py",
            "lineno": 531,
            "message": "in connect"
          },
          {
            "path": "venv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py",
            "lineno": 141,
            "message": "in connect"
          },
          {
            "path": "/usr/lib/python3.11/asyncio/timeouts.py",
            "lineno": 98,
            "message": "TimeoutError"
          }
        ],
        "stdout": "b'Command:  AT+CONF CustomName=ELTest\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE\\r\\n'..\nb'Response: OK\\r\\n'\n\nConnecting to a central device...\n",
        "longrepr": "self = <bleak.backends.bluezdbus.client.BleakClientBlueZDBus object at 0x7fb74ff4d0>\ndangerous_use_bleak_cache = False, kwargs = {}, timeout = 60\non_connected_changed = <function BleakClientBlueZDBus.connect.<locals>.on_connected_changed at 0x7fb7716160>\non_value_changed = <function BleakClientBlueZDBus.connect.<locals>.on_value_changed at 0x7fb7961120>\nlocal_disconnect_monitor_event = <asyncio.locks.Event object at 0x7fb797e290 [set]>\nreply = <Message METHOD_RETURN serial=1714 reply_serial=3 sender=:1.3 destination=:1.328 path=None interface=None member=None error_name=None signature= body=[]>\n\n    async def connect(self, dangerous_use_bleak_cache: bool = False, **kwargs) -> bool:\n        \"\"\"Connect to the specified GATT server.\n    \n        Keyword Args:\n            timeout (float): Timeout for required ``BleakScanner.find_device_by_address`` call. Defaults to 10.0.\n    \n        Returns:\n            Boolean representing connection status.\n    \n        Raises:\n            BleakError: If the device is already connected or if the device could not be found.\n            BleakDBusError: If there was a D-Bus error\n            asyncio.TimeoutError: If the connection timed out\n        \"\"\"\n        logger.debug(\"Connecting to device @ %s\", self.address)\n    \n        if self.is_connected:\n            raise BleakError(\"Client is already connected\")\n    \n        if not BlueZFeatures.checked_bluez_version:\n            await BlueZFeatures.check_bluez_version()\n        if not BlueZFeatures.supported_version:\n            raise BleakError(\"Bleak requires BlueZ >= 5.43.\")\n        # A Discover must have been run before connecting to any devices.\n        # Find the desired device before trying to connect.\n        timeout = kwargs.get(\"timeout\", self._timeout)\n        if self._device_path is None:\n            device = await BleakScanner.find_device_by_address(\n                self.address,\n                timeout=timeout,\n                adapter=self._adapter,\n                backend=BleakScannerBlueZDBus,\n            )\n    \n            if device:\n                self._device_info = device.details.get(\"props\")\n                self._device_path = device.details[\"path\"]\n            else:\n                raise BleakDeviceNotFoundError(\n                    self.address, f\"Device with address {self.address} was not found.\"\n                )\n    \n        manager = await get_global_bluez_manager()\n    \n        async with async_timeout(timeout):\n            while True:\n                # Each BLE connection session needs a new D-Bus connection to avoid a\n                # BlueZ quirk where notifications are automatically enabled on reconnect.\n                self._bus = await MessageBus(\n                    bus_type=BusType.SYSTEM,\n                    negotiate_unix_fd=True,\n                    auth=get_dbus_authenticator(),\n                ).connect()\n    \n                def on_connected_changed(connected: bool) -> None:\n                    if not connected:\n                        logger.debug(f\"Device disconnected ({self._device_path})\")\n    \n                        self._is_connected = False\n    \n                        if self._disconnect_monitor_event:\n                            self._disconnect_monitor_event.set()\n                            self._disconnect_monitor_event = None\n    \n                        self._cleanup_all()\n                        if self._disconnected_callback is not None:\n                            self._disconnected_callback()\n                        disconnecting_event = self._disconnecting_event\n                        if disconnecting_event:\n                            disconnecting_event.set()\n    \n                def on_value_changed(char_path: str, value: bytes) -> None:\n                    callback = self._notification_callbacks.get(char_path)\n    \n                    if callback:\n                        callback(bytearray(value))\n    \n                watcher = manager.add_device_watcher(\n                    self._device_path, on_connected_changed, on_value_changed\n                )\n                self._remove_device_watcher = lambda: manager.remove_device_watcher(\n                    watcher\n                )\n    \n                self._disconnect_monitor_event = (\n                    local_disconnect_monitor_event\n                ) = asyncio.Event()\n    \n                try:\n                    try:\n                        #\n                        # The BlueZ backend does not disconnect devices when the\n                        # application closes or crashes. This can cause problems\n                        # when trying to reconnect to the same device. To work\n                        # around this, we check if the device is already connected.\n                        #\n                        # For additional details see https://github.com/bluez/bluez/issues/89\n                        #\n                        if manager.is_connected(self._device_path):\n                            logger.debug(\n                                'skipping calling \"Connect\" since %s is already connected',\n                                self._device_path,\n                            )\n                        else:\n                            logger.debug(\n                                \"Connecting to BlueZ path %s\", self._device_path\n                            )\n>                           reply = await self._bus.call(\n                                Message(\n                                    destination=defs.BLUEZ_SERVICE,\n                                    interface=defs.DEVICE_INTERFACE,\n                                    path=self._device_path,\n                                    member=\"Connect\",\n                                )\n                            )\n\nvenv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py:204: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <dbus_fast.aio.message_bus.MessageBus object at 0x7fb76d7140>\nmsg = <Message METHOD_CALL serial=2 reply_serial=0 sender=None destination=org.bluez path=/org/bluez/hci0/dev_D4_48_67_DD_E6_7A interface=org.bluez.Device1 member=Connect error_name=None signature= body=[]>\n\n    async def call(self, msg: Message) -> Optional[Message]:\n        \"\"\"Send a method call and wait for a reply from the DBus daemon.\n    \n        :param msg: The method call message to send.\n        :type msg: :class:`Message <dbus_fast.Message>`\n    \n        :returns: A message in reply to the message sent. If the message does\n            not expect a reply based on the message flags or type, returns\n            ``None`` after the message is sent.\n        :rtype: :class:`Message <dbus_fast.Message>` or :class:`None` if no reply is expected.\n    \n        :raises:\n            - :class:`Exception` - If a connection error occurred.\n        \"\"\"\n        if (\n            msg.flags.value & NO_REPLY_EXPECTED_VALUE\n            or msg.message_type is not MessageType.METHOD_CALL\n        ):\n            await self.send(msg)\n            return None\n    \n        future = self._loop.create_future()\n    \n        def reply_handler(reply, err):\n            if not future.done():\n                if err:\n                    _future_set_exception(future, err)\n                else:\n                    _future_set_result(future, reply)\n    \n        self._call(msg, reply_handler, check_callback=False)\n    \n>       await future\nE       asyncio.exceptions.CancelledError\n\nvenv/lib/python3.11/site-packages/dbus_fast/aio/message_bus.py:390: CancelledError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.skipif(not cf.get('feature_ble', bool), reason='BLE unavailable')\n    @pytest.mark.asyncio\n    async def test_13_3_3_2_bleAdvertiseCancelConnected() -> None:\n        config = GattConfig(chr=LOCAL_CHAR_ID, service=LOCAL_SERVICE_ID)\n        dname = cf.get('peer_name', str)\n        assert cmd(f'AT+CONF CustomName={dname}\\r\\n') == 'OK\\r\\n'\n        assert cmd(f'AT+CONF BLEGATT1={json.dumps(config)}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+CONF BLEPeripheral={}\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE INIT PERIPHERAL\\r\\n') == 'OK\\r\\n'\n        assert cmd('AT+BLE ADVERTISE\\r\\n') == 'OK\\r\\n'\n        print('Connecting to a central device...')\n        device = await BleakScanner.find_device_by_name(dname, timeout=60)\n        assert device, f'{dname} not found'\n>       async with BleakClient(device, timeout=60) as client:\n\ntests/test_section13.py:1352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/bleak/__init__.py:491: in __aenter__\n    await self.connect()\nvenv/lib/python3.11/site-packages/bleak/__init__.py:531: in connect\n    return await self._backend.connect(**kwargs)\nvenv/lib/python3.11/site-packages/bleak/backends/bluezdbus/client.py:141: in connect\n    async with async_timeout(timeout):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Timeout [expired]>\nexc_type = <class 'asyncio.exceptions.CancelledError'>\nexc_val = CancelledError(), exc_tb = <traceback object at 0x7fb87c3a00>\n\n    async def __aexit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -> Optional[bool]:\n        assert self._state in (_State.ENTERED, _State.EXPIRING)\n    \n        if self._timeout_handler is not None:\n            self._timeout_handler.cancel()\n            self._timeout_handler = None\n    \n        if self._state is _State.EXPIRING:\n            self._state = _State.EXPIRED\n    \n            if self._task.uncancel() == 0 and exc_type is exceptions.CancelledError:\n                # Since there are no outstanding cancel requests, we're\n                # handling this.\n>               raise TimeoutError\nE               TimeoutError\n\n/usr/lib/python3.11/asyncio/timeouts.py:98: TimeoutError"
      },
      "teardown": {
        "duration": 0.0012146690023655538,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_3_3_bleAdvertiseIndex",
      "lineno": 1360,
      "outcome": "passed",
      "keywords": [
        "test_13_3_3_3_bleAdvertiseIndex",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.925677436000115,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_3_3_bleAdvertiseIndex\u001b[0m\n"
      },
      "call": {
        "duration": 0.1466970269975718,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE1 ADVERTISE\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011206140006834175,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_3_6_bleAdvertiseNotPeripheral",
      "lineno": 1380,
      "outcome": "passed",
      "keywords": [
        "test_13_3_3_6_bleAdvertiseNotPeripheral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.79654591399958,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_3_6_bleAdvertiseNotPeripheral\u001b[0m\n"
      },
      "call": {
        "duration": 0.06560864899802255,
        "outcome": "passed",
        "stdout": "b'Command:  AT+BLE ADVERTISE\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE ADVERTISE\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010528189995966386,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_4_1_bleGetHasValue",
      "lineno": 1394,
      "outcome": "passed",
      "keywords": [
        "test_13_3_4_1_bleGetHasValue",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.33181685999807,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_4_1_bleGetHasValue\u001b[0m\n"
      },
      "call": {
        "duration": 0.16709214900038205,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE SET1 AB\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET1\\r\\n'..\nb'Response: OK AB\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010176910000154749,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_4_2_bleGetEmpty",
      "lineno": 1407,
      "outcome": "passed",
      "keywords": [
        "test_13_3_4_2_bleGetEmpty",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.907839292998688,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_4_2_bleGetEmpty\u001b[0m\n"
      },
      "call": {
        "duration": 0.14586723500178778,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET1\\r\\n'..\nb'Response: OK \\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011424299991631415,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_4_3_bleGetNoConfig",
      "lineno": 1418,
      "outcome": "passed",
      "keywords": [
        "test_13_3_4_3_bleGetNoConfig",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.901029739001387,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_4_3_bleGetNoConfig\u001b[0m\n"
      },
      "call": {
        "duration": 0.14664341999741737,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET2\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011225590023968834,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_4_bleGetNoIndex",
      "lineno": 1427,
      "outcome": "passed",
      "keywords": [
        "test_13_3_4_bleGetNoIndex",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.767428704999475,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_4_bleGetNoIndex\u001b[0m\n"
      },
      "call": {
        "duration": 0.14674566899702768,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010550229999353178,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_4_4_bleGetOutOfRange",
      "lineno": 1438,
      "outcome": "passed",
      "keywords": [
        "test_13_3_4_4_bleGetOutOfRange",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.3545964440018,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_4_4_bleGetOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.16829482599860057,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE GET512\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010588389995973557,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_4_5_bleGetNotPeripheral",
      "lineno": 1450,
      "outcome": "passed",
      "keywords": [
        "test_13_3_4_5_bleGetNotPeripheral",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.914124204999098,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_4_5_bleGetNotPeripheral\u001b[0m\n"
      },
      "call": {
        "duration": 0.14696072099832236,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET1\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET1\\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001049300997692626,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_5_1_bleSetOk",
      "lineno": 1470,
      "outcome": "passed",
      "keywords": [
        "test_13_3_5_1_bleSetOk",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.902160082001501,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_5_1_bleSetOk\u001b[0m\n"
      },
      "call": {
        "duration": 0.2085817359984503,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE SET1 AB\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET1\\r\\n'..\nb'Response: OK AB\\r\\n'\n\nb'Command:  AT+BLE SET1 \\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE GET1\\r\\n'..\nb'Response: OK \\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008918779967643786,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_5_2_bleSetByteHexArray",
      "lineno": 1486,
      "outcome": "passed",
      "keywords": [
        "test_13_3_5_2_bleSetByteHexArray",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.789624678996915,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_5_2_bleSetByteHexArray\u001b[0m\n"
      },
      "call": {
        "duration": 0.2099785829996108,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE SET1 hello world\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE GET1\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+BLE SET1 AAAAA\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+BLE GET1\\r\\n'..\nb'Response: OK \\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010609870005282573,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_5_3_bleSetNotConfigured",
      "lineno": 1502,
      "outcome": "passed",
      "keywords": [
        "test_13_3_5_3_bleSetNotConfigured",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.34193817599953,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_5_3_bleSetNotConfigured\u001b[0m\n"
      },
      "call": {
        "duration": 0.1465572519991838,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE SET2 \\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009263579995604232,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_5_4_bleSetNotConfigured",
      "lineno": 1513,
      "outcome": "passed",
      "keywords": [
        "test_13_3_5_4_bleSetNotConfigured",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.901658791997761,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_5_4_bleSetNotConfigured\u001b[0m\n"
      },
      "call": {
        "duration": 0.1682155420021445,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={}\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE INIT PERIPHERAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE SET0 \\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+BLE SET512 \\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.00102043199876789,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_3_5_5_bleSetNotConfigured",
      "lineno": 1525,
      "outcome": "passed",
      "keywords": [
        "test_13_3_5_5_bleSetNotConfigured",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.906613552000636,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_3_5_5_bleSetNotConfigured\u001b[0m\n"
      },
      "call": {
        "duration": 0.1472863690032682,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF BLEGATT1={\"chr\": \"32EF00020FDF458989CAED89ECF678D7\", \"service\": \"32EF00010FDF458989CAED89ECF678D7\"}\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE SET1 \\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\nb'Command:  AT+BLE INIT CENTRAL\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+BLE SET1 \\r\\n'..\nb'Response: ERR25 NOT ALLOWED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010491350003576372,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section13.py::test_13_ble_conf_invalidJson",
      "lineno": 1539,
      "outcome": "passed",
      "keywords": [
        "test_13_ble_conf_invalidJson",
        "skipif",
        "pytestmark",
        "tests/test_section13.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.791219881997677,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_13_ble_conf_invalidJson\u001b[0m\n"
      },
      "call": {
        "duration": 0.3180052940006135,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? BLECentral1\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF BLECentral1={\"hello\": \"aaaaa\"}\\r\\n'...\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF BLECentral1=hello\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF? BLECentral1\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF? BLEGATT1\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF BLEGATT1={\"hello\": \"aaaaa\"}\\r\\n'...\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF BLEGATT1=hello\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF? BLEGATT1\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF? BLEPeripheral\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral={\"hello\": \"aaaaa\"}\\r\\n'...\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF BLEPeripheral=hello\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF? BLEPeripheral\\r\\n'..\nb'Response: OK \\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.000974710001173662,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_2_1_1_CommandNotFound",
      "lineno": 39,
      "outcome": "passed",
      "keywords": [
        "test_4_2_1_1_CommandNotFound",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.348573800998565,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_2_1_1_CommandNotFound\u001b[0m\n"
      },
      "call": {
        "duration": 0.04362978900098824,
        "outcome": "passed",
        "stdout": "b'Command:  AT+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n'...\nb'Response: ERR3 COMMAND NOT FOUND\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001068782999936957,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_2_2_1_NumericSuffixParameterError",
      "lineno": 51,
      "outcome": "passed",
      "keywords": [
        "test_4_2_2_1_NumericSuffixParameterError",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.924076377999882,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_2_2_1_NumericSuffixParameterError\u001b[0m\n"
      },
      "call": {
        "duration": 8.937569005000114,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONNECT5\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011358750016370323,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_2_2_2_NumericSuffixOutOfRange",
      "lineno": 61,
      "outcome": "passed",
      "keywords": [
        "test_4_2_2_2_NumericSuffixOutOfRange",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.906416572997841,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_2_2_2_NumericSuffixOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 16.124503019000258,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE999\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001106874999095453,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_2_4_1_AllowsOnlySpaceAfterSuffix",
      "lineno": 72,
      "outcome": "passed",
      "keywords": [
        "test_4_2_4_1_AllowsOnlySpaceAfterSuffix",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.914707170999463,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_2_4_1_AllowsOnlySpaceAfterSuffix\u001b[0m\n"
      },
      "call": {
        "duration": 13.808048520000739,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF?\\x00 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x01 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x02 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x03 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x04 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x05 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x06 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x07 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x08 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\t About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x0b About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x0c About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x0e About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x0f About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x10 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x11 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x12 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x13 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x14 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x15 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x16 About\\r\\n'.\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x17 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x18 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x19 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x1a About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x1b About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x1c About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x1d About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x1e About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x1f About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\" About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?# About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?$ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?% About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?& About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb\"Command:  AT+CONF?' About\\r\\n\"..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?( About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?) About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?* About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?+ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?, About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?- About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?. About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?/ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?: About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?; About\\r\\n'.\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?< About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?= About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?> About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?@ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?[ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\\\ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?] About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?^ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?` About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?{ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?| About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?} About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?~ About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x7f About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x80 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x81 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x82 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x83 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x84 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x85 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x86 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x87 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x88 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x89 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x8a About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x8b About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x8c About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x8d About\\r\\n'.\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x8e About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x8f About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x90 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x91 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x92 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x93 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x94 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x95 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x96 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x97 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x98 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x99 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x9a About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x9b About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x9c About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x9d About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x9e About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\x9f About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa0 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa1 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa2 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa3 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa4 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa5 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa6 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa7 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa8 About\\r\\n'.\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xa9 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xab About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xac About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xad About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xae About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xaf About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xb0 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xb1 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xb4 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xb6 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xb7 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xb8 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xbb About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xbf About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xd7 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF?\\xf7 About\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF Topic1=topic\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x00 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x01 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x02 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x03 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x04 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x05 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x06 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x07 \\r\\n'.\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x08 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\t \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x0b \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x0c \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x0e \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x0f \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x10 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x11 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x12 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x13 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x14 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x15 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x16 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x17 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x18 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x19 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x1a \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x1b \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x1c \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x1d \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x1e \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x1f \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\" \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1# \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1$ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1% \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1& \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb\"Command:  AT+SUBSCRIBE1' \\r\\n\"..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1( \\r\\n'.\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1) \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1* \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1+ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1, \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1- \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1. \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1/ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1: \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1; \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1< \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1= \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1> \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1@ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1[ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\\\ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1] \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1^ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1` \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1{ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1| \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1} \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1~ \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x7f \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x80 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x81 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x82 \\r\\n'.\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x83 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x84 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x85 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x86 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x87 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x88 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x89 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x8a \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x8b \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x8c \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x8d \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x8e \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x8f \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x90 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x91 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x92 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x93 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x94 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x95 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x96 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x97 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x98 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x99 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x9a \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x9b \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x9c \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x9d \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x9e \\r\\n'.\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\x9f \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa0 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa1 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa2 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa3 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa4 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa5 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa6 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa7 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa8 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xa9 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xab \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xac \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xad \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xae \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xaf \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xb0 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xb1 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xb4 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xb6 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xb7 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xb8 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xbb \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xbf \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xd7 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\xf7 \\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009164519979094621,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_2_5_1_ProcessParameterError",
      "lineno": 97,
      "outcome": "passed",
      "keywords": [
        "test_4_2_5_1_ProcessParameterError",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.931493957999919,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_2_5_1_ProcessParameterError\u001b[0m\n"
      },
      "call": {
        "duration": 0.023250605001521762,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SLEEP Five\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010530059989832807,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_2_6_LineFeedOrCarriageReturn",
      "lineno": 104,
      "outcome": "passed",
      "keywords": [
        "test_4_2_6_LineFeedOrCarriageReturn",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.928583938999509,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_2_6_LineFeedOrCarriageReturn\u001b[0m\n"
      },
      "call": {
        "duration": 0.04293051599961473,
        "outcome": "passed",
        "stdout": "b'Command:  AT\\r'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008921369990275707,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_2_7_BinaryParametersAllowed",
      "lineno": 113,
      "outcome": "error",
      "keywords": [
        "test_4_2_7_BinaryParametersAllowed",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 135.64954060200034,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/venv/lib/python3.11/site-packages/polling.py",
          "lineno": 120,
          "message": "polling.TimeoutException: (<queue.Queue object at 0x7fb74fc750>, False)"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 252,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/polling.py",
            "lineno": 120,
            "message": "TimeoutException"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_2_7_BinaryParametersAllowed\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_4_2_7_BinaryParametersAllowed>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n        client.connect(host=endpoint, port=8883, keepalive=60)\n>       poll(check_connect, timeout=120, step=0)\n\ntests/conftest.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = <function mqtt_client.<locals>.check_connect at 0x7fb7720ea0>, step = 0\nargs = (), kwargs = {}, timeout = 120, max_tries = None\ncheck_success = <function is_truthy at 0x7fba90c040>\nstep_function = <function step_constant at 0x7fba8afd80>, ignore_exceptions = ()\npoll_forever = False, collect_values = None, a = (), k = {}\nvalues = <queue.Queue object at 0x7fb74fc750>, max_time = 1744744400.2993734\ntries = 1639503, last_item = False, val = False\n\n    def poll(target, step, args=(), kwargs=None, timeout=None, max_tries=None, check_success=is_truthy,\n             step_function=step_constant, ignore_exceptions=(), poll_forever=False, collect_values=None, *a, **k):\n        \"\"\"Poll by calling a target function until a certain condition is met. You must specify at least a target\n        function to be called and the step -- base wait time between each function call.\n    \n        :param step: Step defines the amount of time to wait (in seconds)\n        :param args: Arguments to be passed to the target function\n        :type kwargs: dict\n        :param kwargs: Keyword arguments to be passed to the target function\n        :param timeout: The target function will be called until the time elapsed is greater than the maximum timeout\n        (in seconds). NOTE that the actual execution time of the function *can* exceed the time specified in the timeout.\n        For instance, if the target function takes 10 seconds to execute and the timeout is 21 seconds, the polling\n        function will take a total of 30 seconds (two iterations of the target --20s which is less than the timeout--21s,\n        and a final iteration)\n        :param max_tries: Maximum number of times the target function will be called before failing\n        :param check_success: A callback function that accepts the return value of the target function. It should\n        return true if you want the polling function to stop and return this value. It should return false if you want it\n        to continue executing. The default is a callback that tests for truthiness (anything not False, 0, or empty\n        collection).\n        :param step_function: A callback function that accepts each iteration's \"step.\" By default, this is constant,\n        but you can also pass a function that will increase or decrease the step. As an example, you can increase the wait\n        time between calling the target function by 10 seconds every iteration until the step is 100 seconds--at which\n        point it should remain constant at 100 seconds\n    \n        >>> def my_step_function(step):\n        >>>     step += 10\n        >>>     return max(step, 100)\n    \n        :type ignore_exceptions: tuple\n        :param ignore_exceptions: You can specify a tuple of exceptions that should be caught and ignored on every\n        iteration. If the target function raises one of these exceptions, it will be caught and the exception\n        instance will be pushed to the queue of values collected during polling. Any other exceptions raised will be\n        raised as normal.\n        :param poll_forever: If set to true, this function will retry until an exception is raised or the target's\n        return value satisfies the check_success function. If this is not set, then a timeout or a max_tries must be set.\n        :type collect_values: Queue\n        :param collect_values: By default, polling will create a new Queue to store all of the target's return values.\n        Optionally, you can specify your own queue to collect these values for access to it outside of function scope.\n        :return: Polling will return first value from the target function that meets the condions of the check_success\n        callback. By default, this will be the first value that is not None, 0, False, '', or an empty collection.\n        \"\"\"\n    \n        assert (timeout is not None or max_tries is not None) or poll_forever, \\\n            ('You did not specify a maximum number of tries or a timeout. Without either of these set, the polling '\n             'function will poll forever. If this is the behavior you want, pass \"poll_forever=True\"')\n    \n        assert not ((timeout is not None or max_tries is not None) and poll_forever), \\\n            'You cannot specify both the option to poll_forever and max_tries/timeout.'\n    \n        kwargs = kwargs or dict()\n        values = collect_values or Queue()\n    \n        max_time = time.time() + timeout if timeout else None\n        tries = 0\n    \n        last_item = None\n        while True:\n    \n            if max_tries is not None and tries >= max_tries:\n                raise MaxCallException(values, last_item)\n    \n            try:\n                val = target(*args, **kwargs)\n                last_item = val\n            except ignore_exceptions as e:\n                last_item = e\n            else:\n                # Condition passes, this is the only \"successful\" exit from the polling function\n                if check_success(val):\n                    return val\n    \n            values.put(last_item)\n            tries += 1\n    \n            # Check the time after to make sure the poll function is called at least once\n            if max_time is not None and time.time() >= max_time:\n>               raise TimeoutException(values, last_item)\nE               polling.TimeoutException: (<queue.Queue object at 0x7fb74fc750>, False)\n\nvenv/lib/python3.11/site-packages/polling.py:120: TimeoutException"
      },
      "teardown": {
        "duration": 0.0006105669999669772,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_3_1_1_EscapeLineFeedInput",
      "lineno": 135,
      "outcome": "passed",
      "keywords": [
        "test_4_3_1_1_EscapeLineFeedInput",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.341432406999957,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_3_1_1_EscapeLineFeedInput\u001b[0m\n"
      },
      "call": {
        "duration": 0.044372476997523336,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=mytopic\\\\Atwo\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Topic1\\r\\n'..\nb'Response: OK mytopic\\\\Atwo\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010696730023482814,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_3_1_2_EscapeCarriageReturnInput",
      "lineno": 142,
      "outcome": "passed",
      "keywords": [
        "test_4_3_1_2_EscapeCarriageReturnInput",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.914857474999735,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_3_1_2_EscapeCarriageReturnInput\u001b[0m\n"
      },
      "call": {
        "duration": 0.04365552399758599,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=mytopic\\\\Atwo\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Topic1\\r\\n'..\nb'Response: OK mytopic\\\\Atwo\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008829159996821545,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_3_2_EscapeCarriageReturnInput",
      "lineno": 150,
      "outcome": "passed",
      "keywords": [
        "test_4_3_2_EscapeCarriageReturnInput",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.896111011999892,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_3_2_EscapeCarriageReturnInput\u001b[0m\n"
      },
      "call": {
        "duration": 0.0438135410004179,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=mytopic\\\\\\\\two\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Topic1\\r\\n'..\nb'Response: OK mytopic\\\\\\\\two\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001038006001181202,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_3_2_1_EscapeInvalid",
      "lineno": 158,
      "outcome": "passed",
      "keywords": [
        "test_4_3_2_1_EscapeInvalid",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.785836298000504,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_3_2_1_EscapeInvalid\u001b[0m\n"
      },
      "call": {
        "duration": 5.586711883002863,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=myTopic\\\\\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x00\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x01\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x02\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x03\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x04\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x05\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x06\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x07\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x08\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\t\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\n\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x0b\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x0c\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\r\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x0e\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x0f\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x10\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x11\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x12\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x13\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x14\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x15\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x16\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x17\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x18\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x19\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x1a\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x1b\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x1c\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x1d\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x1e\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x1f\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\ \\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\!\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\"\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\#\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\$\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\%\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\&\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb\"Command:  AT+CONF Topic1=myTopic\\\\'\\r\\n\"..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\(\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\)\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\*\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\+\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\,\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\-\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\.\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\/\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\0\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\1\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\2\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\3\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\4\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\5\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\6\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\7\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\8\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\9\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\:\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\;\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\<\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\=\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\>\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\?\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\@\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\B\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\C\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\E\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\F\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\G\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\H\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\I\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\J\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\K\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\L\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\M\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\N\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\O\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\P\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\Q\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\R\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\S\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\T\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\U\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\V\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\W\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\X\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\Y\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\Z\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\[\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\]\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\^\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\_\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\`\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\a\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\b\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\c\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\d\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\e\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\f\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\g\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\h\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\i\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\j\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\k\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\l\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\m\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\n\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\o\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\p\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\q\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\r\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\s\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\t\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\u\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\v\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\w\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\x\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\y\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\z\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\{\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\|\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\}\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\~\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x7f\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x80\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x81\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x82\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x83\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x84\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x85\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x86\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x87\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x88\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x89\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x8a\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x8b\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x8c\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x8d\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x8e\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x8f\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x90\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x91\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x92\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x93\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x94\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x95\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x96\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x97\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x98\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x99\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x9a\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x9b\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x9c\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x9d\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x9e\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\x9f\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa0\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa1\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa2\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa3\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa4\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa5\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa6\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa7\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa8\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xa9\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xaa\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xab\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xac\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xad\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xae\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xaf\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb0\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb1\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb2\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb3\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb4\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb5\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb6\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb7\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb8\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xb9\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xba\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xbb\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xbc\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xbd\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xbe\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xbf\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc0\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc1\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc2\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc3\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc4\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc5\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc6\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc7\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc8\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xc9\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xca\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xcb\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xcc\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xcd\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xce\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xcf\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd0\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd1\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd2\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd3\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd4\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd5\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd6\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd7\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd8\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xd9\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xda\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xdb\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xdc\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xdd\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xde\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xdf\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe0\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe1\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe2\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe3\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe4\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe5\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe6\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe7\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe8\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xe9\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xea\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xeb\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xec\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xed\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xee\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xef\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf0\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf1\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf2\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf3\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf4\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf5\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf6\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf7\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf8\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xf9\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xfa\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xfb\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xfc\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xfd\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xfe\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\\\\\xff\\r\\n'..\nb'Response: ERR5 INVALID ESCAPE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009160070003417786,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_4_1_MaxCommandStringLength",
      "lineno": 177,
      "outcome": "passed",
      "keywords": [
        "test_4_4_1_MaxCommandStringLength",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.345200542000384,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_4_1_MaxCommandStringLength\u001b[0m\n"
      },
      "call": {
        "duration": 5.641657524000038,
        "outcome": "passed",
        "stdout": "b'Commandr\\n'.................................................................................................................................................................................................................................................\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001079876001313096,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_4_2_MaxCommandWordLength",
      "lineno": 184,
      "outcome": "passed",
      "keywords": [
        "test_4_4_2_MaxCommandWordLength",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.916498655999021,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_4_2_MaxCommandWordLength\u001b[0m\n"
      },
      "call": {
        "duration": 0.04322194199994556,
        "outcome": "passed",
        "stdout": "b'Command:  AT+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n'...\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010054699996544514,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_5_1_ExecutionBeforeEOL",
      "lineno": 194,
      "outcome": "passed",
      "keywords": [
        "test_4_5_1_ExecutionBeforeEOL",
        "slow",
        "pytestmark",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.897104037001554,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_5_1_ExecutionBeforeEOL\u001b[0m\n"
      },
      "call": {
        "duration": 30.023069234001014,
        "outcome": "passed",
        "stdout": "b'Command:  \\r\\n'..\nb'Response: OK \\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001262023000890622,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_5_2_1_DataOverflow",
      "lineno": 216,
      "outcome": "passed",
      "keywords": [
        "test_4_5_2_1_DataOverflow",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.804902473999391,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_5_2_1_DataOverflow\u001b[0m\n"
      },
      "call": {
        "duration": 32.08672303500134,
        "outcome": "passed",
        "stdout": "b'Commandr\\n'.................................................................................................................................................................................................................................................\nb'Response: ERR1 OVERFLOW\\r\\n'\n\nb'Command:  AT+D\\x82<\\xfd\\xe6\\xf1\\xc2k0\\xf9\\x0e\\xc7\\xdd\\x01\\xe4\\x88u4\\xa2\\x0f\\x0b\\x04\\xc3n\\xd8\\x0eq\\xe0\\xfdw\\xb0vp\\xeb\\x94\\x0b\\xd53_\\x97=\\xaa\\xd8a\\x9b\\x91\\xff\\xc9\\x11\\xf5|\\xce\\xd4X\\xbb\\xbf,\\xe07S\\xc9\\xbd\\xfa\\x0f\\xf0\\x16\\x9d\\xc9WVt\\x06fv\\xcf\\xb0\\xb4\\xeb\\x89\\x02\\xc4Bi\\xda\\x1c\\xf6\\xbaf\\xd3\\xf8\\xb6\\xd4\\xb1\\x00\\xa9\\xea\\x0euZ\\\\.\\x82\\x10$*\\x08\\xe7\\x07\\x8f\\x7f\\x898^\\xb0\\x94#UQ\\x82V\\x8b\\x96\\xe8\\xa4\\xfe\\xf2:\\x0c\\x9f\\xc5\\xaf\\xd7`\\x847\\x81k\\xdds\\t\\xcbJ\\x12R\\xe4\\xdap\\xe6r\\x0f\\xca\\xa4\\xda\\x1e\\x98@l\\x18\\x9c$\\'\\x9e\\x98Q\\xd5\\x81B\\x04\\x13o\\xebW\\x13\\xc1f\\xb12i\\xddc\\xfc5\\xc7\\x97\\xff\\x08\\xa6\\xcd\\x90\\tPf\\xa7E\\xad\\xdbm\\x881\\xc2\\xb0\\xf8x!\\x14+DVUm\\x89\\xaa\\x82\\xbc\\xad\\xae:\\x95x\\xfaE5\\xa4\\x14\\xd0%\\xc2K@\\xae:\\xc1\\'r)\\x88\\xba\\x97:\\xea\\x8d7\\x17\\x97\\x06\\x07.\\xd3:\\x14`z\\xd7R;\\xe6U{Q4\\xde\\xc1\\x96\\x81\\xf4\\xa13j\\xa2\\x14\\x05\\x97\\xa3\\xe6\\xc8\\xa0\\xcc\\xa2\\xe99\\x80n\\xf0\\xb6\\x84]j\\x9de~\\xb8)\\x8f-\\xe5.\\xadt\\xc7\\x9d\\x15\\xa7_\\xa2\\x9b}\\xab3/}p|\\xcd%\\x89$&\\x0b\\x05\\x94\\xb7\\xfc\\xf0N3\\xa7\\'X[LH\\xa3\\x9c6\\x96@iH\\x10\\xa1i[\\x99\\xddP\\x18~\\x81\\xe4\\xdc\\x80\\xe0\\xe8\\x05\\xca\\xadW\\x84\\xf8\\x0c\\xd5\\t\\x1f\\xb5F@F\\x84\\x8d\\xcb\\xcdX-w\\xf8\\x03Z\\xa2\\xe0sz\\xa0\\xfd\\xf5s\\xd3\\xac\\x8cp\\x18$\\xbcQh\\x9f\\x98\\x99\\xbeT\\xed+?\\xc1ZO\\x80\\xdao\\x1a\\xfd\\xc9\\xb2\\xc4T\\x14.\\x823\\x88*G)\\xe3{\\xc3\\xdd\\xcbT\\xa6\\xe0@\\xf9l=\\xdc\\xd1<\\x97\\x8e\\x7f\\xc1\\x02a\\xe0\\x0f|\\x85iX\\x91Kf\\x8b\\x9f\\x80\\xe4V\\xb6\\xfb\\xd7>j\\xc4h\\x917\\x0c<\\x06\\x97E&\\xbf\\x9f\\xdf\\xb6\\xa5\\x00?\\xe2\\xe6\\xb3\\x9c\\xcc\\xad\\xfc9\\xc1\\xc3h\\x01\\x8ee\\xec\\xd1\\x9cW\\xe6e\\xb8\\x01\\xc7\\xda\\xcf\\xac\"\\xfc~\\x94\\xd0O\\xcb\\x8a[%\\x05\\xb2\\x87\\xd2\\x9bM\\xec\\x84\\xf8V\\xef\\x17\\x8a2\\xd8#\\xb5\"\\xe2TR/\\xcd\\x8d\\x9bjjy\\xaa\\x89#&\\xbc\\xef\\x19V\\x98\\x8a\\xb6v\\xc8\\xccX\\xf7\\x84\\xa8q\\x84}\\x0f\\xce\\xa2\\xdd\\x7f\\x89a%T\\xe3K\\x86\\xebSFF\\xe1\\xb8\\x9e\\xcd{;i\\x9c\"6t\\xcb\\xa4\\xfc3_\\x17\\x1c\\x0bn\\x11\\xfd\\xe2\\xaf\\x8c<X0q\\xccw\\xfd\\xe6\\xc1Vvx\\x91\\xec\\xc7l\\xe7\\x84\\xa9\\xfe8m(\\x17\\x07\\x02\\xf5\\xa3\\xc4\\x93d\\xccQM\\x0f\\x07\\xc6J\\x1d\\xc2\\x82B(\\xec\\x9b\\x07\\x12\\x1fB\\x15\\x8c<\\xdd.a\\x0e\\xffB\\x8eb\\xe5\\xc7\\xa8\\x89\\x85|}\\x1eY\\xb3\\xdb\\x1f\\xb4\\xd3f\\xd9#\\x88%\\x80Z1M\\x1eh\\xdb\\x16\\x1b.\\xf0\\xbd2\\xa0\\x14@\\x10\\xe2A\\xca\\xe4\\x0c\\x8a.\\x80\\xa6+\\x9a\\x11\\xc4\\x1d\\x85\\xa0B\\x85\\xc2;\\x9b0\\xd9}i\\xa9\\xad\\xc8\\xf65B\\xe5\\x0f\\x95Pf\\xbd\\xc7\\xa61\\xd1\\xb0@!\\x16\\x99\\xa0\\xd5\\x98\\xa3\\xb4\\x8b\\xa6\\x04>L\\xa2\\xa6\\xa7#\\xe7\\x8f\\xf5\\xe8\\xba\\xc2(\\x1cD\\x18\\xfb\\x80}\\xad\\xb9\\xbd\\xce\\x9d\\xed\\xaeU\\x0eK\\x80qD9^\\xd2\\x192\\x886h\\x85\"(%oX\\xdd\\x0b\\xbc\\xf9\\x91pf\\xfcx\\xd9\\xe7\\xbb`\\xf6%\\x83\\xd0g\\x04\\xc2\\xf9\\'\\xce\\xd9\\x14\\xb4\\xea\\x03a\\x99\\x02=\\x9a\\xa1\\x90\\xd2\\xd1\\x9d\\xe7\\x9aC\\xe3GS\\x81\\x04\\xd9\\x12\\xbc\\xd7\\xcd\\x90\\t..\\x02\\xc4\\x89\\xed\\x8b\\xbe\\xf6\\xac\\xc6\\xe9;\\xf7\\xb5J\\xd4K\\tX\\x85\\xbcA\\x93\\xd3\\x84\\x93\\xd7\\x8c\\xdd\\xab\\xf8n\\xfb\\xcd\\xd9.BiLu4\\x81O\\xf52\\xcc_\\x01-\\xda\\x1ao\\xd8\\xb1\\x184\\xd6<\\x87\\x8e[\\xf5\\x18m,\\xc7?\\xe5\\x96\\xfe\\xc9;\\xf56L\\xc5gU\\x83\\xd5\\x93\\xfcm\\xac\\xf84\\x04\\xb1\\x88\\x1c\\xe1\\x993u\\x8c\\x8a~\\xd2KB\\x83c\\xd0\\x1dL\\xd3\\x8a\\x8f\\xf5\\x9c\\x88\\xfbm\\xff\\xbc\\xf0{\\xadZ\\\\\\xe6L\\x1d\\xa6Em\\xa1\\xfc\\xf5\\xa8<AG\\x83s-\\x19X;sf\\x9d\\xd8\\xa7\\x02\\x9cp+r\\x8f\\xae\\x89\\xc2\\x0b>\\xa8\\xb1G:\\x80I\\x15\\xb1\\'/4\\x99\\xa2\\x7f\\x89\\x19\\xb9\\x0f(G\\xcc\\xbe{0\\xa8\\x8c\\x04\\xa49\\xb4@\\x8a\\xcf.\\xf3\\xd6\\xc9\\x9ap\\x9aD\\x1b8Y{n\\xde\\x8c\\x80\\x8a\\x86\\xf2@\\xce5\\xbf#\\xb9\\x0f\\x9d\\xe4CO&Hn\\xf7\\xab\\xba\\x95QO\\xc3\\xe1\\xcf<J\\x8a\\x97\\x04\\x04C\\xc23\\xeb\\x0f\\xdd\\xd8\\x8d\\xbd\\xd1\\xcf\\xec\\x1b2\\xf1\\x13\\x00\\x158G\\xb6\\x8a\\xb6\\xf2}z6\\xb7Q;\\x14\\xa0\\xd8\\xb1\\x81\\x1c\\xde\\xd4\\xc0\\xb7\\x96\\xae\\xe1yI\\x1c\\xae:X\\xf9\\xae>\\x0b\\xf5k\\xc4Y\\xcbt3\\x7f\\xab\\xa8}\\xec\\xf1\\xbd\\xfcc\\xdd\\xe1\\xcc=\\xf9\\x88@L\\x06\\xc0\\xd47&]\\xea\\xc1\\x93ON6\\x82\\t\\xed\\xcbt\\xc8\\x02\\x7f\\xd8Q[\\xafz&RY\\xc0\\x0bo\\xdax\\x14a\\'~\\xcb\\xee<\\x18\\xc6-0\\xf5\\x17z\\x06\\x9f\\xee\\x8e\\xd4UD\\xa2\\xe5\\xd5U\\xca\\xc7f\\xfd\\x8e\\xb8M\\x84\\x8fY*\\xb8\\xacI\\x84\\x82\\x81\\xb2\\xc4\\x8e\\xef\\x06LB\\x81sd$e\\xdbzG\\xeb\\xc8d*\\'N\\x1d\\x0f\\xcf\\xc3\\xd5FB%{\\xc3G\\x92g\\xcb\\xb6[s\\x98I\\xb2\\xfb\\x95-\\x99j\\xed\\x0b\\x944\\xbe\\xe3\\x82\\x1d\\x1a\\xa1QC49\\xde}j\\xcb>l\\xc4D\\x82\\x01=g\\xc1\\xf6v\\x89\\x13Uw\\xd2\\x8c\\xd7\\xcc\\x8b\\xfc2B_\\x08\\xe8\\x16\\xfam\\xc9\\xac|0\\'\\x15\\xd8\\xe2`Xa\\xc5\\xb8dw\\xb8!\\xae\\x1a\\xea\\x16ZK\\x92\\xf0\\x16!\\xca/\\xcc\\x9a\\xc9\\x89\\xb4\\xf0\\x19\\xf4\\x08\\xda\\x9b\\xa2L\\x8e!\\xb8\\xd4\\xc8\\x0c:\\x12\\x073\\xaa\\xac\\xbc\\x11\\xbd%\\xf8*\\xe4\\xab\\x01R\\xa6\\xb8mJK7\\xce\\xa2\\xd7\\xb8\\xae\\x85\\xbc\\x13~\\x87\\xcb\\x91*&W\\x88\\xd3*@\\x90\\x86xk2\\x8d\\xf5\\x18\\x9ah&\\xa1\\xad\\x97D\\x12\\xe2\\xba\\x13\\x0e\\xa1\\xd5S\\x14\\xd9^ew:B>\\x88\\xead\\x1c\\xb8\\xe9\\xab\\xb5p\\x04\\x07\\xfa\\x10T\\x81\\x14\\x04u+X\\x11fk\\xe2\\x93|\\xfb\\xbe\\xa6\\xc8%c\\\\`\\x98\\xda\\xf2\\xba\\x0b\\xf95\\xdd\\xaf\\xad%\\xd7c\\xfd\\xf4\\xe6\\xf1T\\x89\\x9a\\xca\\x84\\x82\\x9e\\x07\\x17\\xea\\xea\\xb6v\\xe3k\\xf3\\xabJ\\xc4\\xdf\\x1b8\\xb6\\x04\\x82\\x1b\\x9c\\xc1\\x07\\xa6\\xad\\x9e\\x19j)\\xa8=!A\\x96\\xd1\\xaew]\\xbb\\x9a\\x96\\xc1\\xd7\\xec%e\\xd0v\\x15{r|\\xca\\xc2kM\\x99\\xb8\\x00\\x9d\\xe3\\xfeWJ\\x0f\\xbd\\xdf\\xaf\\xfa\\xa29\\x95\\x8d\\xdb\\x05\\x9f,\\xfb:p\\x87\\xdf\\xbev\\x1b4SB\\x95\\x18\"o\\x01\\x1f\\xd8!\\x1c\\x04\\x11\\xad\\xaa\\t\\x04l\\xf0f\\x88\\x97\\x80w]k\\xc8\\x1ez\\xe7\\x12\\xa9\\xa7\\xd0=\\x08^/^osZ\\x9b2\\x1e\\xa0J\\xe2Lv\\x16\\x92\\xb0\\x1d-\\xe2ft^=\\x1dg\\x1b;,p\\x92\\x81\\xd8\\x7f\\x10\\x80c\\xa6\\xb3\\xb6\\xe8\\xc3\\xc5-\\xda}\\xfa\\xaf[:z%\\xdf\\x8d\\x9b\\xab\\xbd\\xd1\\xe9\\xba\\xb4\\xa1\\xca\\xf1\\x08\\xbdA\\x9aV\\x9a@LU\\xeaMER(\\x81x\\xb6\\xa1W\\x8d\\xf2\\x9e\\'\\xdbN\\xb4\\xe67O\\xa1#_\\xf5\\x11\\x17b\\xb6\\xbb\\xb5\\xbf\\xaf=^\\xc0\\x10\\x8ak\\x1f~\\x9b\\xa7\\xce}\\xb8\\x19v\\x94\\x03d1Er\\xbc\\x88HSt&\\x9f\\xdd\\xe0\\xf3]\\xb6d\\xdd%\\x8diuHDjS\\xf8\\xb9^\\x19\\xb8*yl,\\xe1d\\xafT\\to\\xa1\\xf5\\x12\\x1a\\xbb\\xff\\xb2E\\xf9\"\\xa3\\x9f\\xa2-\\xf6\\xad\\xd4$\\x86\\xa5\\t\\\\\\xa7s\\xa0\\x86\\x81\\x9c\\xf9\\xd4\\x06\\x96S\\x94\\x18;\\xdc\\xdco\\x8e\\xb6\\xfd\\x90\\x83X\\xa5I\\xb40\\xcb\\xb6b\\xca\\xe6L\\xf6|\\x13~($\\x13\\xf1\\xf7\\xa7W\\xfe\\xcb\\x06\\xc5\\xe6T\\xbf\\x1a\\xbc\\xb4\\xe0y\\x9b-\\xe2\\xb6cRD\\xe2\\x17\\xba\\xacX\\xfb\\xf4\\x04w\\x1e\\xe3Sj\\xcc\\xee?\\xa1\\x86FV\\xa8C\\\\\\x9dw\\xda\\xef\\xea\\x9fV\\x9ei\\x90O\\x03\\xae<\\xd9\\xc2[\\xe1\\xe6\\xe2\\xbai\\x1b+61\\xc6F\\xe3\\xcb]\\xf3\\xe5\\x12c\\xe6\\xfa\\xc7\\x94\\xb2X\\x8b\\\\\\x0e\\x1f!u\\xe4\\xa3\\xe2\\xab4\\xc6\\x1b\\xef\\x8e\\xd1\\xee\\xa91T\\xcd\\xda\\xf4L\\xa3J\\xb3Fcsn\\xe8O44\\xd9\\x1a\\xe8M\\xbf\\xa4\\x8f\\xcb\\x07\\xc6\\xf9\\xe4\\x9a\\x9b\\xc6\\xa0\\x94Y3\\xfa\\\\\\xe4N\\xea6?\\xa3\\xa1\\xfd\\xae\\xa3\\xec\\xa5\\xf8\\xc9oU{f}\\x1a\\xa4\\x1f\\xa8\\xd6\\x0f\\xb0\\xb8\\xb9\\xd1k\\x93r\\xa0\\xcb\\xc4Y\\x04\\xc7\\xb3qw!\\xa3\\xc4h\\x961\\xde\\x02\\xb3/\\xd0N9[\\xaeI\\xc0\\xdf\\xa6\\x8djcQTRK=\\xe2B\\xdcD\\xaa\\xa2F\\xb7Ysx\\xfe\\xfa\\x11-D\\xf0Ik\\xb8F\\x8f\\xb2!\\xc4\\xf3\\x0f\\xecd{i\\x02\\x9b\\x15\\x88`$68\\xcc\\xa95\\xe4\\xf7\\x8fI\\xdc\\xbe\\xb2\\xc4\\xd2\\xdf\\xbcid!Jyz{\\xc9\\xe9\\xe10\\x1bX\\x03\\x16\\xdc\\x8e\\xd4Cx\\xbf\\xd4\\xaf\\x18\\xe8B\\xba\\x1e\\xb2<}?\\xdfL\\t\\xbbBM\\x93\\x0c\\xf1\\xf7\"\\xdc/\\xf01A\\xc9\\xd1{\\xc2\\xf4\\xa2\\xe0;\"k\\xbd51\\xb56d8,\\x01\\xddx.\\x9d\\xf9\\x1f\\xdb\\x98\\xc8\\x14\\x0e\\x8d\\xf4\\xe0p\\x89\\xa4\\xf4\\xe2\\x1c\\x89X\\xe0\\xe9\\x97]\\xa4\\xcb\\xd3\\xcb\\xf4p\\x9c\\x08K\\xfc;\\xb8\\x84\\x9e\\x9bF6F\\xe9\\x13\\xe4\\xf0\\xa6\\xbe@\\x07g\\x89!\\xec\\x91\\x06\\x88\\x0b\\xcd92\\xa4\\xe5.\\xff\\xaf\\x16`V\\x1c;\\x15<\\x9cfRLto-\\xb4\\xde\\x88D\\x92\\x7f#\\x87\\x1d\\x0b\\xdd\\x90\\xf3\\xd8\\xdf\"^m\\x11\\xdb\\xd4\\xb5\\xb5K[su\\x1e\\xbb\"\\xe4\\xa4op\\x83O\\xc36\\xf4\\x00\\xf1\\x9f\\x86\\x95jC\\xc2\\x11\\xc3\\xea\\x0cCv\\xfc2\\x97\\xdff\\xaa2\\x7f|\\xfb;[\\xfe\\xb7\\xdd\\xcc\\xd7\\x0c\\xccH\\xd9A\\x1f\\x95\\xc6\\xdc0g\\x8a\\xf5\\xd8\\x876\\xa6N\\x84\\x0c1\\xbd\\xe8\\x870\\x91G+\\xd0\\xc2\\x0e\\xf5B\\xc8\\xfbw\\x0e\\xc0\\x1f\\xd2+\\x7f\\x14\\xe8*\\x96\\x14\\xb1\\x15\"%\\x17\\x9d\\xb5\\x9d.\\xf0\\xb7\\xa7W\\xb5\\x7f\\xa7w\\x7fo\\x9f\\x9c\\xa5\\x9a\\x02\\xf6\\x81uK{R+\\x84\\xccgFT%\\xa1\\xc5lQ\\x13\\xe4n\\xcd9\\x9fp\\x94\\xe4\\xac*#$v=\\xed\\xea\\x05U\\xea\\xdd8b\\x07|\\x9dm\\x96\\x9d\\x87\\xb2\\x88\\x93\\x18\\x0e\\x05\\xe1\\x15i\\'\\xa1\\xe7\\x9b:~8b\\x0fcE\\xe1\\x0et\\xf3X\\x04rF\\x08F\\xa4+\\x85c\\xcb\\x04\\x8f\\xb4\\x84\\xc5\\xce\\xee\\x8e-\\\\\\xf5\\xc9Dj\\x1a\\xa2Jp\\xa3\\xcb\\x14\\xd1\\xf3!\\x11C\\xd2\\xc7\\x8b\\x16oc\\x9b\\xc2\\x99\\x0b\\x88aSu-k\\xf5T\\x1a\\xce\\x90\\x07M2\\x14\\xdc\\xf3Yo\\xef7\\xcfrA\\xad\\xf3\\xfc\\xbc\\xdd\\x7f\\xe2\\x85\\xce\\xb6\\xc5u\\xc16\\\\\\xb0&\\xd6\\xfc\\x1f\\xeb8w\\xe8\\xb3.\\xab\\x12\\x8d\\xabBU\\xdc\\x9f\\xe2|\\xfa\\xc4\\x0e\\x82=\\x92\\x84\\x0c+\\xa6\\\\p\\x96)W\\xe9\\xbe\\xcc\\xe7\\xf14\\xfa*\\x11\\x1e\\t\\x8e\\x12\\x89\\x9fZ\\xf4\\xac\\x08\\xe8\\xafys\\xb1\\x1d\\x0b\\xe1e\\xc9N[v)\\xca\\x14Y\\xa3\\x02\\xe8S\\x13\\xd8q\\x83\\xe0`\\x14\\xc1\\xd2\\xcc\\xda\\x8b\\xe2\\xac\\x0c(\\xf1\\xd6R\\xdcRX\\x88\\xd3\\xf6\\x92\\xb1\\xe9\\xcb\\xc0\\x92z\\xb7s\\x87%\\x86\\xc7R\\x87\\x81\\xfb\\x08Q\\xf78pM9\\xc4\\x1dX\"0\\xef\\xef\\x0c\\x1d\\x8a\\x1a\\xf1j\\xb6\\xe08\\xad\\xa3\\xc3\\xc7\\x94*u\\xe1\\xb2\\xda\\xdc\\xdf\\x88_M\\x1b\\xa9\\xb4\\xc0\"\\xa2ZJ:h\\xf4w\\xb7Rh\\x99WF\\xcc\\xd9\\xfa\\xb3\\x11&\\x0c\\xbc\\x7fOm\\xca\\xe3\\x8b\\xda\\xad\\xf6\\xae)\\x1cG\\xf0Z.\\x04!\\x0c]\\x8ec\\xeb\\xcd\\x8a\\x87\\xc45\\xca\\xed{$\\xa0D\\xc1\\x1c\\x94\\xb0\\x08\\xe0\\xa2\\x05\\xa1\\xc8\\x1a\\xe41\\xd8\\xcf?\\x08\\x05\\xd1\\xb2Y\\xcf\\x14I\\x92\\xd2U\\xf0\\x96\\x83\\x11\\xc8\\xd2J\\xa5W\\xe8\\xc9@(\\xc9\\x85\\xc8\\xfa\\x11\\x94Q\\x89\\xc6\\x8c?\\x82\\x04=6\\xefM\\xee{y\\x15s(71\\x13:\\x16\\x81\\xd4K\\xb1:\\x19\\xc7rQ\\xfaW\\xb4\\xcbW\\xa6$\\x19\\x07\\x982\\xe6,\\x00\\x18\\x8f\\x9c\\x82\\xea\\xc4<r\\x9c@\\x0c\\xbb\\xe40\\xdcO\\x8c:\\xbf\\x81l\\xa8Hr\\x03u\\xf7\\xb7A\\xd1\\xaf\\xda\\xe19\\x80\\x1b\\x97\\xa3eju{\\xc0\\xb1\\x83\\x00\\xfbG\\xda\\xf7.\\x8d3p7\\xda\\xcfH:\\xe1nRn\\x8b\\xbb\\xa7\\xb1\\x80L\\x0fq\\x83\\xf6\\x08\\xaf\\x08Yf\\x84u%\\xda\\xbc\\xbda6\\x02\\xc8\\xad\\xa8\\xd2\\xaf\\x83\\xce\\x8d\\xb4&\\xdfr\\xf1\\xb1\\x90\\x0e6\\x1bWs\\xe0\\x96\\xd8\\xcc\\x02\"\\xcbNj\\xf2\\xc9\\xfc2\\xd1T\\xfcn\\x9e\\x12\\x98\\x96G\\x80\\x9b\\xf3D\\xdf\\xaa\\xa4k\\x8e\\x14\\x9f\\x96\\xfe\\x99\\x87Q\\x94\\x86\\xabL\\x84\\xc6\\xe2\\xfdV\\xc4\\x14/i\\xa2\\x1a\\x9c\\x14\\xd47\\xa5B\\x05\\xb0{\\xb5\\xde{*\\x10\\xab\\t\\xe3V\\x8fk\\xdb\\x94T\\x16\\x13\\xfe\\xc79\\xc2\\x93\\xdf\\x19u\\xaa\\xd6\\xf9h-\\xac\\xcf[x\\xf8$\\xd6\\xcao\\x82\\x00\\x90\\x10\\x85+\\\\\\x81\\xe5\\xde\\x9c3\\x98\\x1b\\xf4Y\\x82j@\\x15\\xcc\\x05\\x98\\x01\\xc3\\xae1\\x83Rf%Y\\xc1\\x0bp\\xcf\\t\\x02\\xd4Y\\x1b\\xca\\xd4aQq.\\xe7\\xab\\x80b\\x82\\xc6~\\x95\\x83K\\x88\\xb9\\x8dp`\\x0b5o\\x8dV\\xa4pS\\x10p\\xc6\\x86\\x83l\\x85\\xc0\\x15\\x10N\\xfe\\xdf\\x9a\\xbb\\xcf\\xb6e\\x92\\x8f\\x87\\xf7N\\xb6H\\xc7\\x1f$\\x85&\\xfcj\\xe8\\x9d\\x14\\x89\\xac\\x02\\xfd\\xdc\\xdc\\xd8\\xbb\\xf8c\\xdd\\xc8\\x941)R\\xac\\xbb\\xdb\\xc3?\\xc0\\x1a\\xdef9u\\xf4\\xc4XDp1\\xb1\\xa5\\xe1U\\xc1\\xf7^\\x13e\\x7fC=\\x8c\\x06\\x02\\xbe\\x92m\\x1b\\x9fKA\"P\\xd6\\x89B%bR\\xd5n\\xc9\\xfaX\\xff|h%M}`K\\x84!\\xbe(\\xb6\\x8e[\\xf0\\xddq@<\\xde\\xdb\\xbcr\\xe3\\xc8\\xaa]\\x1a\\x18\\xbc\\xedR\\xee\\xbf\\xb4O\\xeaf\\xf4\\x90jAp\\x906-t\\xd9m\\x99\\xfc\\x1f\\xc0h\\x1b\\x9e\\x99k\\xdb\\x06\\xe9\\xa6\\xd6|5V\\x1a\\xc3S\\x08\\xfd\\xf8\\xbc\\xda\\x0e\\xdf\\xc7y\\x04\\x16f\\xa1\\x12E\\xe0[\\xe7JI\\x80\\xc3/?$\\xc4\\xf7\\xbbk\\x13\\xd1p\\xf6eVyd\\xad\\x98\\xf4xm\\x90?\\x05\\x12\\xa1-[\\xe9)\\xd1G\\x16G\\xa3\\xb7\\xe7a\\xcc\\xed+\\xc9\\xbb\\x05\\x91l\\xb6\\xbf\\x030\\xe4\\xcf\\x9dX\\x99p\\xa8\\xaal\\x14\\x1a\\t]\\xec\\xa6\\x12\\x88\\x8b!\\x7f\\x06B\\xd3\\xb1\\x8a\\xff\\x13\\xc58\\x9c\\xd6\\x7fu\\xdf\\x87\\x05\\x02M\\xf3L\\xb3\\'~OC\\xcdG\\xa9cBF;A\\x11\\x8e\\x8b\\xb4\\x03J\\x04\\xe9\\xdd\\xcb\\x9eD\\xc8\\xda\\xb8\\xe5\\xb3\\x95\\xf3_\\x89\\x04\\x9fu\\x1b\\xff\\x1e\\x03(\\xed\\x01}C\\xc8\\xc6q\\x8d]oR.\\xa9\\xb1,>vh\\xa8\\xe5*\\xdc\\xb6T\\\\4\\xb5^\\xfc(\\xe9\\xdco\"\\x80\\xa8\\xc8\\xbc\\xa7\\xdc$a\\xd2\\xb1\\xfe\\xb1=\\xe5\\xa8\\x04s\\x9b\\xd2Gb\\x8e\\x17S\\x9e\\x1d8\\x889\\\\\\xe7~\\xef\\xdc\\x1bH\\xfc\\xb8\\x95\\xc0-\\xdfBw\\xdb\\xf9\\xb9^\\x1fha\\t\\xb1yz\\xd2\\xd4Tx\\x00p\\x1dO.\\x0cH\\x88u\\xb8\\xaaF0\\x82\\xd3\\xb6\\x15\\x1f\\xea\\x13\\xa1\\x9f\\x99\\xc7\\x9d\\xc5\\xf7\\x96=\\x056\\xd9%j?\\x04}\\xf0$l\\xaem\\x97\\x92\\xee\\xeek\\xec\\xc0*\\x0f%\\x9a\\xe6h\\x97\\xd4^\\xca\\xc0\\xedq~\\xfc\\x07\\x95\\x89\\xf2\\xfc\\xb48=m\\xe4\\xc6n\\xd7\\x1fZ\\xc5\\xd9\\xbfH\"Q\\x17l\\xee\\x9e\\x9a\\xf3D\\xe7\\xde\\xb0\\xdf\\xbao\\x8ah\\xec\\xf2\\x8a\\xd4\\x91\\x8d\\xe3!8\\xa6\\xe5\\x93t\\xa3\\x7fOP\\x82\\x7f\\xd2\\x0f\\xdb\\xcbsE$+T\\xef\\xc2p\\x95\\xc8\\x89\\x04\\x91L=\\xdc\\x90\\x9a\\xd6\\x1fL1T\\xf9\\xdd8\\x1d\\xb7\\xa2\\x9d\\x12\\x9c\\xe7\\x10\\xb0\\x91l\\x86\\x8cV\\x92\\xad-\\x12AC\\xc4\\xa5\\xad\\xf1U\\x95\\x87\\t\\x0b\\xd7\\xed\\x0c\\xc76?\\x08\\xc4-\\xffm\\xb5\\x10\\xd1\\xf1\\xa3`\\x04A\\xf1\\xf1\\x80\\xdd3\\xd5\\xe7\\x97/\\x1a\\xd8N\\xb3e*\\xe9\\xb98\\xa93h\\xa2QR\\xa9)j\\x96!\\xfb\\xec\\xe3\\xc5\\xba\\xf3YH\\x00Y\\x9dZLjD|\\xeaF+\\xf8\\xc7\\xc9\\xd9\\xdf\\xf0\\x8f\\xf4@e\\xc1\\x12\\x8cG\\xe1oO\\xc7\\xe2\\x1f\\xb1sO\\x92\\xfa\\xa9N!\\xc9%%\\x00\\x0f&,C\\x80\\x1fj\\xdc\\xac\\x8e\\xb5fQ\\xd1)\\xb5;\\xd8\\xe6\\xaa4\\x05\\x1cK\\xd0lg\"R\\xe9\\x0c\\xa7\\x96\\x9eN\\xe7\\x1a\\x16\\x93Q\\x0c\\xa1\\x0cK\\x816w\\x83\\xfd\\xffb\\'C\\x92\\x0fxPY|\\xeb7\\x01d\\xbbW\\x8a0)\\x99v\\xc0\\x98E\\x9aG\\x98=\\x993j\\xe1\\xcc2\\x0f\\xca\\xf4\\x03\\x96\\xf0\\xf0\\xbc\\\\k\\xf4fsF\\xdde\\xba\\xfbt\\x18}:\\xb9\"\\x15l\\xdd\\xa9\\xd0\\xe6\\xe2\\xeb\\xe5\\xbe\\x14h\\x84B7\\xd4f\\xa74\\x02re\\xc4c\\x9b\\x9e\\xbfw\\x0e\\x7f\\x8e\\x9c\\\\:\\x07\\xb2O\\xc7\\xfb\\xe99s\\xb3\\x1f*{We\\xdaG\\xc1\\xcd\\xb4*\\x13\\xe9\\xb5\\x93\\xbe\\xa8\\xbf\\x05:\\xc6\\x9a\\x8b\\x1d\\xf5\\x8d\\x1a\\xfb\\xa2\\xdb\\xe9pW\\x15\\xcd\\x83b\\xa1g9U\\xd7\\xd7\\x81B/\\x84z\\x8f^\\xe8\\xd9\\x08J\\x9cFH\\xd2\\x12\\xef\\xfd\\x16\\xc66\\x96\\xd3\\xed7\\xda\\xd2\\x86\\x1f\\x95\\x84\\xa6\\x0eG\\x1co\\xa11S\\x9a\\xd3I(\\xfd\\xda\\xbbL\\xeb\\xcf\\xa7\\x90\\xff\\'E\\t-i\\xba\\xf5KYC\\xd9\\x17&\\xb6\\x9f\\x80\\xb8\\xbd\\x9e\\xd0\\xcc\\xf3\\xe0\\xbc\\xa6\\xd3MC\\xf4\\x80\\x81\\xda\\xf1\\x18\\x96\\xfc\\xb0\\xfdC\\xe4J\\xf2Mw\\xaa#\\xbaW\\xd7\\xd1\\x9b\\x8aq\\x05\\xf5\\xb7)\\x86\\xf8\\xc9\\xeb\\x17\\xda\\x81\\xf9L\\xa4Ki\\xc3>8\\xa4I\\xf0\\xe5O\\xfcO\\x1f`\\xcc\\xab\\x84\\xf9\\x94\\x12\\xdf)m\\xa3\\xcf\\x95~\\x99\\xdd\\xb3\\xe2\\xa6\\x8e=\\xbe\\x11\\x93h7\\x84\\x08\\x84\\xab8\\xcc\\xeb\\x96\\x8f\\xbeI\\xfc\\x1d5\\xc1\\xe3\\xa0\\x03\\xeexE\\xa0Lh\\xf8W\\x90\\xb0pj\\x1f\\xe8\\x8d\\xed\\xec\\xf0\\xba\\xda\\xd8\"s\\xb0\\x1c\\xa65\\xc4\\xff\\xa9Hg#\\x89\\xfe\\xf9\\xef\\xa3\\xee)\\xfc\\x8f:C\\xd5/J\\xc31\\xd8oK\\x0193)\\xa9?\\xbf\\xd5\\xca&\\xd3\\xe6\\x99\\xdf\\xe1\\xcbD\\xea\\xf4\\xc66\\xaa\\x8eH\\x87\\x160U\\x12\\x02\\xa7\\xad\\x15R\\xd7\\xe0\\x08\\xdc\\xcd>\\xca\\x1d\\x0eEz\\xf8\\xc7\\xa0A\\x93GGHJye\\x0fl\\xfa\\xea\\xba\\xf0\\xdb\\x00\\xd7z\\xc2\\x88\\xa57}\\xdb\\x83B\\xef\\xbc\\x80>.\\xb3\\xcf\\xe2\\xba\\xd7\\xe0\\xff\\xc0\\x0e\\x18\\xf9\\xa5v4\\xb3\\'[\\xf3>vJ\\xeb&U\\x8e\\xf2\\xba_w\\x16\\x95\\xe3\\xe8\\x90}\\x05\\x9b\\xf0Led\\\\\\x9c$\\x83V\\xc8\\x9a\\\\\\xe8\\xcb/\\xb6\\xb6v\\x01T\\xe8@\\x90\\xc5L\\xac\\xaf\\x80\\x01I`\\x83m\\x03\\x1d\\x12\\xeb\\x91q8\\'Lg[\\x0f\\xdfPW\\xe1\\xa4\\x1a\\xe4\\xb7\\x92A\\x1a|:\\xe7\\xfbu\\xa29\\x9cM\\x88\\xd6\\x87:\\t\\x02\\xbd^\\x1d\\xa7Q\\x15\\x11\\x0f\\x85~\\x0f\\x95\\xf6\\xff\\xac-fY\\xb3-\\xbdI\\xb8c\\xec\\xc1\\xe5\\xb1(~w0x-\\x9f\\xbd)>\\xb8\\x7f\\x91\\x9e?U\\xd0l\\xedEd(\\xde%\\xc3N|\\x9a\\x83\\xf5\\xc5<7\\xb8\\xe8\\xf6\\xcal\\xaaL\\x89\\xa6d\\x17\\xce\\x88\\xa47Ch\\xbf\\xf0\\xa6\\x16\\x1c\\xeaD\\xe8\\xffm\\x8e\\x83O\\x91<\\xa2r\\xae\\xa0d>\\xd4l\\xd7D-\\xc6\\x0e\\xc5G\\xc9\\xb1\\xcbJ/vf\\xf9\\xf2\\xc1\\xa2\\x81\\x04\\x85\\x0c\\xc3\\xc9JW\\x842\\xd0:\\xf4\\xce\\x1b\\xf9)(q\\xac\\xc5\\xaf\\xb6\\x80{\\xd1Fq\\xcd\\x17~`K\\xad_7j\\xd7\\x1a\\xaa\\xb9\\xb2\\xdft\\xb3\\xc2$s\\xefA\\xb6\\xbc/\\xed\\xd6\\xc1\\x86%\\xea\\xefL\\x86\\x07\\xb9\\xd8y\\xb3\\xee\\xa9\\xe1\\x05J{2s\\x8b\\xbar^\\xe3\\xb7\\xbc\\x13]\\xc7\\xb4\\xb1\\xd1\\x9a\\x85\\xea*\\x1b5\\x89\\x9el\\xdaf}\\x8e/\\xd5\\xc8\\x93\\x95\\xf8/\\xd3rf\\xf6>\\xb7*\\x10)\\xa5}\\xe2.b\\x10\\xe1C+\\xf1!\\x19I\\xfd@\\xfd\\xdf\\xf5\\x96\\x05\\x80<.\\xbb\\x11wM\\x0b\\xc3\\x15C\\xaa\\xc4%\\xe6\\x9d\\xa7i\\xda\\xf7\\xc2\\x81\\x025\\x9ap\\xc1\\x06\\xc8&.|\\xd6\\xe4\\x9f\\x10I\\xfc\\xf8\\xbcL;i\\x89\\x07\\xfe\\xe7IK\\xa1\\xcc\\xe2\\x8b\\xea\\xbd\\xcb*\\x0bnr~\\xb1\\xdd1*\\x0ew\\xa9zfS+R\\x1f\\x99\\x80\\xaa\\xb2\\xd8\\xbei\\x00\\xffC[\\xc3\\x01]\\x08\\x87\\xbbo\\xd0`|\\xd6g\\xd4\\xc2\\x16W\\x00j3\\x1d\\x95K\\xc9\\xb8^VSK\\xff-\\xe5]\\x93\\x88\\xb3\\xe2|\\x16uo\\x89z\\xdc\\x8fx\\xb8\\xfa\\xd2g\\xea\\xa1\\x17wqO\\xd8?%\\xd5\\xda\\xc3\\xea0g\\x1e\\xc8jl\\xdd\\xf1\\xbf5\\xc0\\x96\\xbc\\xa0Z\\xd7~a&t+\\x82\\xd7r\\xfc\\x83\\x11\\xc9\\xb0\\xcd\\xed\\xd5h\\x1b\\x92vMI\\xac\\x97\\xe7\\xd9\\x9a\\xbf\\xa0\\x84t\\xe8\\xc9\\xa8\\x13k0E~\\xb4I\\xe4\\xcc\\x80\\x06\\xd5\\xa1I\\xa3#i\\xc5k\\xcc.\\xefl9F\\xc29\\xc5}\\xef\\xf7)R\\x02\\xb4\\x1c\\xebE\\xff\\xc4g`\\x1f\\xaed\\xf5\\x8f[\\xfe\\xd5\\x18Ob\\x05\\x9d\\xd6$^\\x0c\\xc0\\x94K\\x92FW\\x98w\\x9d\\xe5lc\\x1ai\\xc0\\xa7\\xb6\\xc4\\x16\\xca-P\\xfcN\\xb4\\x9e\\\\\\x14\\xf6\\xec\\xb6\\xb0\\xb1oD{\\xd4z\\x83\\x99\\xed\\xab\\xe2\\x08\\xfb\\xf9C\\xd9\\xc6_\\x92\\xc1a\\xcc|\\xf7\\xae\\xb9\\xe3\\x9e(\\x1d\\xa1PE\\x1b\\xb9\\xf1{\\x15\\x11\\x07\\xf4\\xea\\xef\\xdb|\\xcfZ5|\\x91\\x9bu\\x0c6i\\xdb\\x92\\xfd\\x8f\\x9c8\\xeeG\\x8f\\xa0\\x9f\\xad\\x12\\x98d\\x82\\xedr\\x01\\xa0\\xe98!\\xda\\xb4\\x81\\x15G\\x9c\\xbf\\xaf\\xcc[\\x1a\\xef\\xa7Su\\xf5S\\xda\\xcb8\\x9f.\\xebS\\xde\\xfbG\\x0f\\xf5Cz\\x16\\x9a\\xd3\\xed\\x83\\xb2\\xaa\\xbb\\x11\\\\\\xdaq\\xfe\\xbe\\x81|!\\x84\\x95\\x11\\x96\\xf4\\xf6S/e\\x19\\xad\\x92!sVJ\\xdd\\xa0f\\xee^\\x00g\\x19\\x08\\'\\xc6\\xb9\\xdf`R\\x02\\xda\\x10}\\x1f\\xc99\\xbd\\xbfD\\xc20\\xa2\\xfa\\x01\\xefx\\xce(\\xdd\\xc0\\t\\xb0\\x96v\\xcb\\xfe\\xce\\xbd\\x19\\x1f\\xd0\\xdbPJ\\xa9aH\\xfb\\xd3\\xa0\\x03\\xbb\\xbe\\xb9)\\xc4C\\x12H\\x19\\x9e\\x87\\xaa\\x14(AFz\\xa2kP\\xe3e\\xd1\\xbeC\\x9f]\\xeb\\x0c[>\\x10H\\xd4\\x95l\\x1d$\\xd9\\x89\\xf0\\xe1\\xee)\\xaf6\\x99u\\x16y;i[\\xc9\\xcfAvi\\xf9N;\\xc4\\xe3\\xb7\\xf6\\xf9\\x1e\\x7f\\x91X\\xf0\"\\xa2,\\x85\\x9aB\\x1e\\xa1(KBX\\x0c\\x00\\x1f#\\xb8\\xf4\\x18\\'\\xeb\\xe8\\t\\x8d\\xb6\\xe5)\\xb1YZ\\x02\\xcacrO\\xf9>\\xb2\\xfb4Z\\x9e1\\x99-;\\xa4\\xe1\\x93\\xe1\\x93\\xe0\\xecL\\x9b\\x8a\\'\\x92\\x11\\xcaB\\xfa\\xa5\\x86>\\x94\\xdfq|\\xc7%\\xcd@\\x81\\x15\\x81x\\xad)\\x84\\xc35C{\\xf8\\xa5\\xec\\xd0)\\xef\\x12\\xdee\\xc9\\x85AD\\xc1\\x1c\\t\\x1b\\xe1\\x01\\xb1\\xe4\\xa7_k\\xe1mf\\xc7\\xa9\\xe2\\x8e\\x8cR\\x99,$\\xf5|0\\xff=\\xe6U9\\xa6\\xc1r1\\xe6u9,\\xf3\\x80\\x9a\\xaa\\xc4|\\xdcN\\xe5\"\\xf3\\x83\\xd1\">\\xc4<\\x88\\xc1\\x10/\\xb0&\\xc8\\xf0\\xf5P\\xcc\\x15\\x85\\xcb\\xc8\\xc5\\xe7\\x07|B%\\xff\\xcek6\\xecd\\xce\\xcf\\xde\\x8f\\x0b\\x16\\xf9\\xd6BZ`\\xc0\\x91(\\x15\\xd3J\\xefQ\\x98\\x14\\x99\\x95\\x10\\xa7\\x96\\x10\\xf9,S\\xc4\\xfc\\x87\\xe5\\x0b\\xd7\\x11\\x97\\x19\\xb1f\\xaf\\\\}F.\\x140O\\x9d\\xa1\\xfc\\xf2\\xc5\\xc2xH5\\xd5\\xc5r\\x04\\xa1\\xd1\\xc6oC\\xdfZ89\\x98Y\\xb4\\xf1\\xfeR\\x88z\\x87$\\xa6}p\\x86RC\\x1d\\xec\\xb6B\\x7f\\x9b\\x15\\xd9\\xe4\\xfc\\x1bX\\xc1\\xff\\xa0\\x9d\\x8eQ\\xb7\\xbc/\\xdb|\\xba0\\xb4|!\\xbb\\x9f\\x16\\xb5\\x06\\xc51\\x01\\x01[\\xec7n\\xbf\"F\\xcd^\\xe00\\x8b\\xf5]\\xbfM=D\\'\\xcaR]r\\x936\\x19o\\x03n\\x06\\xe2b\\xc0\\x98L\\xad\\xbe\\xc17c\\xad\\x04\\xd8\\xe4bT\\x0b\\x86\\xefw*!nG\\x7fz\\xb8\\te\\xe6\\x102Y\\xd2A\\xf8uz\\x1c\\xbeVS\\xdc}\\x89\\xb1g\\x97y4\\x15\\xa8\\x9c[@\\xd3\\xa2\\x91\\x0b~\\x0e\\xa2\\xf4\\x19h\\xcc2\\xe1\\xcf\\xfcg\\xe56bY\\x83\\x86\\x03\"\\xc5\\ta\\xaa\\x8ci\\xf4K\\xe7\\x15\\xc2\\xca\\xcd\\x1c\\x1e\\x94\\xb5wd\\xeb\\xf0\\xf0\\x13a<\\xa4\\x99\\xdb\\x7fP\\x8d\\x88\\xbf6\\xb8\\xd9\\xd9\\xe7\\xf5r2Z\\xe7\\xef\\x1d4+\\xcd\\xcc\\x88a\\xfb\\xb7\\xc09\\x06y\\xfa\\xc5\\x86\\x88+S\\xc92\\x1al\\xb0\\\\Y\\x94;w\\x07\\xd6\\x93PJD\\xa7a>\\xab\\xfcg\\x9f\\x14aZ\\xa9ab\\xd88\\xa7\\x89[\\x01\\x9b\\xc3\\xc5\\xce\\xa2\\xacE\\x84\\x89\\xe1Q\\xecb\\xc4\\xf0/\\xe2>_\\x83\\x9e\\xd2\\x96\\x98f\\xb6Bn5\\xdcn\\x86yC\"\\xac\\x1a\\xe4\\x80\\x1d\\x1d}\\x12\\xb5/V\\\\b`\\x16\\x05\\xd1\\xfc\\x1ez{7\\xa6\\xdaZ\\x10\\xc5\\x9c\\xb5\\x0f\\xeb\\xae\\xc5\\xe0\\xff\\xf2\\xb5S\\xdf\\x1f\\xa8\\x84\\x18\\x0f\\xc4N\\xf3d\\xc7\\xef[s\\x1eT\\xd2\\xe8\\x00e\\x17\\xcb%\\xcd\\x02Hs\\xcc\\xadj4\\xc7\\xa2\\x10\\'g\\xb3\\xb4\\x15\\xda\\x9c\\xde\\x96RVD\\x06\\x00\\xdfnq\\xe01\\x03\\xdfQ\\x93\\xec_\\xc8b\\x94\\xa2:<<\\xf7\\x1a\\xc4\\xb6\\x1c6\\xed\\x88\\x1d\\xa7\\xe0@\\x9f\\xea\\x18@\\x93:>)\\xdb\\xdc+\\xd8\\xb6V\\xfc\\xff\\xd4\\x96\\xec\\xef{jbC\\x1f\\x8d\\x07\\xe2\\xe5Yj\\x94\\x9aJ+^.UW\\xd0Vm\\xd7\\x81\\xadNv\\xd4\\xa8\\x05vW\\x95\\x1d9s\\x0f\\xda\\x02\\x11Y\\t\\xe1\\xd8K\\xba\\xcds\\xfd\\x8f>\\x93\\x0c\\x96\\x1f\\x92\\x1c/\\xbd\\xb6:\\xe6\\x8c\\x11\\x1c\\x8b\\xad\\xb2}\\x8f\\xfa\\x87\"u\\xd1\\xc2\\xf0S\\xd3\\xea\\xdeq\\xe9)\\xca\\xc2`fD\\x13I\\xe9\\xb3\\xb40\\x81{\\xa3\\x9e\\t\\x82\\xde\\xe8\\x87\\xae*\\x06\\x89\\xd9Ov\\xbe\\xc5\\x02xYq=b0bv\\x15\\xd3\\xafI\\x06\\xeen\\x1f\\x113\\x12`\\xb4\\xc0o\\xa3\\xc8\\x95W\\x95\\x9e\\x8e\\xb9tp=\\xc1H\\xb8\\x91\\xb4\\xb6\\x1a\\x1d.\\xde\\xad\\xb6{\\x9c\\x92\\xc5\\xa5UL3Mq\\x9a\\xde\\xd8\\x86\\xbb\\x9e\\xe2\\xe5\\x1c\\xe8\\xd2\\x00?\\x98\\\\%9z\\xb9\\xe5\\xbb\\x94L\\x8e4B\\xfa\\xa9v\\xb4\\x13\\x1c<^\\xfe\\xe8/\\xcf\\x1fL%\\x9b\\x05\\xea|vnB\\xcfCLP\\xb5\\x1c\\xbe\\x0f\\xfe\\xe7/\\x11\\xe5F\\xc3\\x88\\x1e\\x13\\x13^q\\x90<\\x9c^\\x126\\xf4L\\x82;+\\xa8Cvt\\xac\\xe1\\xb2\\x05!\\x8b^\\x07\\xbd\\x96W\\x05\\xfbU\\xb9\\xbb\\xdb\\xff\\xf1\\xb0\\xd12&2u\\xa6i\\x13\\x1e\\xb4q\\xd5\\xc0\\x1a\\x1a\\xdd\\x8e\\xbf%4\\xa8[\\xb2\\xc6\\xefQY\\xd6\\xf1`Qe])-a\\xe7\\x83\\x1f\\xcc\\x8a\\xd7y\\xe7?#ljo\\x0fY\\xd2\\xfa\\xe1\\xa9[b\\xd7/\\xc3\\xba\\xb9,\\xeb\\x03d\\x8e\\xb6\\xb7\\x0e`}\\xd9\\xa6\\xbc\\xe1\\xec8\\x12k\\xaf\\'\\xdc\\x81|\\x1d\\x9f0\\x9fK\\xdc\\xb8*\\x9c$\\xe2\\xf4Sz\\x00\\x0fek\\xa7.\\xc7\\xd2\\xc1\\xaf\\xc1\\xe0\\x90\\xb6aG\\x980\\xf9\\xb3\\xcb^\\x10+\\xfc\\x1e\\xc9OF]#\\xc9b\\xc8\\xb5\\xd4Y\\xd0\\x8cw\\xbf\\x04\\x95\\x93\\x89Ji\\xee\\x13\\x8a:,\\x1a\"\\xfeE\\xf9\\xec\\xc7s\\x1b\\xd4V\\x1a\\x94\\xe8\\x16OajRm@\\t\\xc0\\x08\\xcf\\xbc\\xb8\\xaaM\\xa4\\xa5\\xad\\x1e\\xa5\\xe8S/\\x07\\xf95`\\xc7\\xd28\\x86\\xdf\\x16\\xebn\\x16\\x01\\x96\\xd7\\xab\\xb0\\xcd\\x1f\\x89Ch\\x06R\\xe4\\x1b\\xd27\\x10V\\xeb!\\x05\\x04Hs\\x01\\x10x\\xde7\\xf9\\xbe\\xaaSl}*oT\\x9a/(jB&\\xe6\\x84\\xb8~HXz\\xd9&\\xbeX\\x1e\\x16\\x8e\\x03\\xf4\\xd5b9\\xb4\\xab\\x84T\\x91\\x97\\xf9\\xa5\\xdb8\\x18!\\x9f\\xd7\\xc5\\xbe\\xa8-K\\xe1\\xd5s\\x81\\xd4\\xac\\x9fX\\x1593\\xe0>\\xf3\\xb2\\x8d=\\xa0\\xc3>T\\xe5-\\xff\\xaf?\\xa422|\\xfd|\\xf8\\xac\\x16U\\x1f\\x07\\xdb\\xa9\\x9c}\\xb5J$`\\x11Z\\xb7\\xdf\\x86kRk\\xcf^Yz\\xedI\\x90\\xa5R\\xa3\\x90{cU\\x90\\x10HB\\xdf\\x1a\\xb3\\xe5J\\xdbnP\\xb7Y#\\x86\\xbe\\xab\\x18\\x9cO\\xf6\\x1a\\xee\\xd5,\\t\\x04\\x16\\x08\\x0en\\xbdh\\xe6\\x16\\x19q\\x98f[be\\xbenE3\\xa0R\\xed\\xff\\x0b\\xf4\"\\x06\\xe8\\xa3\\xb7\\xb1\\xd2I?7\\xec\\xa6U#\\xc5\\xe3\\x00E\\x97\\x8f\\x9b\\x1e\\xf3\\xf3\\x1fL\\x00\\xfe\\xd2\\x12|;\\xc6\\x0e\\x9d\\x03\\x0b{\\xc5\\x8e\\xba\\x02m\\xdbm\\xe7\\x19B\\x8a\\x111\\xca0\\x18\\xfd\\xfaL9\\xfa\\x80]\\x1e7\\xed$]\\xac\\xeeP\\xf9\\xbf\\x83\\x98\\xf7X\\x9a\\x0eZ|5\\xc7\\'>\\x972\\x81qX\\xb96\\xe62\\xa5!\\xe4\\xde,9\\xef\\xf1\\x83\\xc3\\xee\\xf2\\xc2\\xc41\\xc0\\xaa\\x05#X\\xfc\\xdc\\x0f+\\xc6\\xa9\\x14\\x00\\xe6Y\\xe7\\x9a\\xd0\\'h\\xda\\xa2\\xfb\\xdb\\xc8\\x0f4W\\xcfO\\x82n\\xfdF\\xaf4P\\xfc\\t\\x9f\\x131\\x89\\xfcP\\xd2\\x80\\xb4\\x96\\xa5\\x81_m7P\\x81=g\\x16F\\xe8:~Z\\xd5\\xd7T\\x14\\xa8\\x06\\xa4WK\\xbc~\\x15\\xd6P\\xa7m|\\xf6\\x90\\x8a\\xf6rR!\\x7f\\xe8G\\xc0V0\\x1d\\x11\\x1c\\xff\\xed\\x0c\\xfc\\x86\\x91\\x8d\\xc3\\xf5<,\\x9f\\xc1\\xdedxN#\\x94i3\\xb3\\x89Fq\\xb7\\xb3Q55d\\x9bx!\\x15\\xaa\\xc1m\\xba\\'\\xeb\\xef\\xa9\\x95\\xaa\\t,AT~h\\xdd\\x9e^6\\xc0\\x04d\"oQ\\xa0h\\xa2u\\x86\\xb1\\xc8\\xa2\\x19\\xe9f8\\xecO\\xc7\\xc1j\\xa0\\xady\\xfd\\xef\\xcc\\x02\\xee\\xb4\\xf6\\xac\\x1c\\xe2\\xc8\\xf3\\xf9\\x93\\x1e\\xecv/\\x9aS\\xe6l\\x88S\\x9a\\xc8\\x03`\\xf5\\x07\\x95\\x87\\x84\\'\\xc7\\x17\\x13d\\xf2n\\xca\\xa5\\x99\\xf9\\x83\\x86R\\xca\\xce\\xffsx\\xd0\\xe4&\\xc6\\x1c\\x00a\\xb4d6\\x13\\xf1a\\x1b[\\xa1\\x15\\x82ia\\xd0![\\x82\\x17J\\x07\\x1enY\\xa7GX\\xce\\x00\\x01\\xaan(\\xf6\\xed%W\\x8a\\t\\xd3\\x95f\\\\\\xa32\\x95\\x9bf9\\x06\\x8fjnxe\\xff\\xa2\\xcc\\xf65\\xbe&\\xee\\x81\\xf3\\x1e\\xaa\\xf4\\x05~@\\x19\\xca1v\\x1b\\x99\\xbd41\\x8d\\x8fNxO\\xf4\\x1c\\xd2\\xe1\\x0f\\x06\\xa9\\xde\\x98\\xf9\\x1a\\xe1\\xa2\\xd9V\\x8f\\xb9{\"J\\xa3\\xca\\x9e\\xa5\\xbb\\xf9Hk\\xd5n5)W\\x07*\\xe8%_\\xb7X]\\xd5&\\xec7\\x01\\xf6\\xba\\xceI\\xbaGy\\xc7\\xa7`3\\x9e\\xe1i\\xe8M\\x83\\x1bSd\\xfbd\\x15\\xcc\\xb0\\xf4\\xd4qc)\\x07O\\xfdn\\xfe\\x89\\xc9?#2\\xb1Ve\\xda\\x9e\\xd1\\x83}\\xc1\\xd0\\x11\\x14b\\xbe\\xcf\\xa4\\xd1\\x8d\\xe7\\xc8YA\\xdc\\xb2\\xbb\\xbf\\xde\\x11\\xbc?\\xab\\x1bl\\xb7[\\x92\\xffY\\xd8\\xbc\\xbe\\x0fU]\\xb7\\xf0\\xe4b>\\xa4\\x08\\xdbq\\xe0\\x9e\\xd7\\x8d(e\\xe79\\x13\\x02rz\\x10\\xff\\xa9ha8\\x0e\\x99\\x8f0D\\xbd\\xe6\\xd8\\xa8\\x1f\\x9b*\\xedqQk\\x95\\xf0\\x92\\x8f2\\x81RZU\\xdb\\x9a\\xcb\\xcbvU\\xd2W\\xa9|oL\\x93&&z;\\x9c\\x05C\\xcf\\xca\\x1c?\\x1aC\\xee\\xca\\x95zQ\\xf0ws\\x80\\xd5\\xeb\\x90CB\\x10BN\\x04\\x81Y\\x11\\xb1\\xf6_v\\xa6^lX\\xfc~@j\\x17\\xab~\\xcf\\xea\\x87];\\x16,\\x12\\x92\\xff\\x19=\\x9f\\xbd\\xb1zl\\x83aS\\xad\\x8e\\xa5\\xb9\\x12\\'mX\\xc9\\xeak\\x06\\xed\\xcb\\xc1\\xb2\\xbd\\xfc\\x04\\x81\\'\\x1d\\xcf\\xd0\\xbf\\xcd^\\x9bd-\\x9b\\x0f\\xd9\\x13\\xea\\x02\\xceg\\xf3\\x83\\x0ckrG\\xa9z\\x86\\xa9\\x12\\xc5\\x94\\x08\\xef\\xd9\\x087X\\x7f\\t\\xcf\\xe3N\\'ma\\xd5\\xb7\\xbcpd0A\\x8d\\xb1\\xa7\\xd9\\x87\\xd3\\xb5t&\\xe8p\\x8d\\x05\\xa3`\\xb7\\x9b\\xbfd\\xb3\\xa5\\x89\\xd0-\\xc1a\\xe5dn\\xa6\\xf5\\xe0\\x02\\x18\\x99@\\xc7$\\x96A\\xa5\\xa4\\xc5\\xf3J\\x83p~\\xc1\\xbc\\x19\\x9a\\xed\\xb0\\x02L\\xf3\\xff\\t\\x10\\xc8\\xdf7h\\xd9\\xbe\\xdc\\xe6\\xc4\\xd9\\xff]m_3\\xd9\\xb8p\\\\\\xc5\\xb5\\xbdHQw\\x83~$(g\\xdf\\xfb\\x13\\xa4p&\\xdb+\\xa3]\\xf4x\\xb5e\\x91U\\xe79\\x0e4\\x81\\x9c4\\x91g\\xecs\\x0e\\xd4%\\xae\\xee\\xe7\\xe7r\\xdd\\x8d\\xc2,\\xcc\\xcb35\\xba\\xb4\\xb3\\xca\\xf4\\xf9inHi;\\x07^\\xf9\\xaf\\x80\\x9f-kH\\x81z1\\x99\\xd5\\xa4\\xb6O\\xebt\\xa0j\\xa8AF\\xca\\x90\\x12\\x0f\\x11\\xd0\\xbb\\x15\\xec\\xe9\\x97\\xcc\\xce\\xa9\\x81\\xf9(L\\xa1!\\xb8\\x1b\\x1f\\xc4\\xa4nG\\xdbw\\x91\\xae\\x02sl\\x87\\xcf\\x99\\xf0\\xcf\\xf9\\xee\\x87\\x08\\xee\\xe5\\xe8\\xdao\\xbb\\xdfWY\\xea\\xb5\\x0bn8\\xbf\\x14\\xe5!\\xa61.\\xbbu.\\xaaB|\\xb3x\\x88}\\xc8\\x12\\x07\\x85\\x8f\\xff;\\xf9\\xd2\\x8f1\\x1f\\xb0\\xf9\\xbc\\x87f\\xdb\\xc3V\\xbc#\\xe3\\x90\\xf0\\xbcg\\xa8\\xc4\\xbcW\\xe3\\xb9\\x80AqQ\\xaa\\x01?GfC\\x19\\xc3GB\\xad\\xf1\\xed1\\x08\\xc7J\\xc2,D+\\x85\\x97M\\xaa3\\xe2+\\x06b\\xb8\\xe0:`\\x08\\x0c5\\x9c\\xd5X\\x85Z\\x17\\x0b``X=\\xb8\\x18\\x9e8Un\\x00\\x19wW\\xd7wH\\x02\\xef\\xfb\\x10K\\xff\\x82\\xed\\xb6\\xad\\xed\\xd5x\\xbf\\xee\\xf5\\xfd\\x03`\\xaab3\\xab\\xee\\x17_\\x85|\\xe5\\xddAX\\x14\\xa0\\xf7\\x98\\x82\\x8e\\xc0}r\\xaf\\x9d\\x8d\\xa3\\xc2\\x85|*\\xfdT\\xbeQ)\\xe2\\xf4\\xba\\xa2&nqJ\\xb5\\xafWTbhi\\x10\\xd4`\\xeb\\xd2\\xa9\\x0e\\xa1[@v\\xd6\\xf9X<?2\\x08\\xee[*-G\\x06\\xd0\\x8ea\\xb0\\xe0\\xfa\\xed\\xfc\\xef\\x854\\xac\\xae\\xe9\\xc6\\x8f\\xc9\\xa9\"\\x9aF\\x84K\\\\_\\xc3?~\\xceW\\x95\\xb1A\\xcb:\\xc2\\xb9t\\x064l\\xc3(\\x0e\\xbb\\xb5\\xc5;FTok\\xeep\\\\\\xec\\x83\\xf7s\\xc8\\t\\x06?X\\x19w\\xa3\\xa16\\xd5\\xf1G\\x14\\x8b\\xb6k\\xaf\\xfdF\\x90\\x94\\x0b\\xba\\xfd\\x0evv\\x19\\x96\\\\\\xf8\\x96#b?^\\x02\\xa4CK\\x1adVrMr|\\x7f\\x92\\xd8wL\\xc1@Y\\xc5\\xc4O;AbU\\xf7v\\xf0!\\xa5\\x1e\\xfe@\\xe4I\\xcb\\xc89\\x0fTc\\x7f\\x88\\xc2\\x8e\\x15\\x12\\xf6\\xe4)\\xddC\\xdel\\t\\x00\\x89\\x0byMh\\xf1\\x88Qb\\x8d\\xbe\\xc7\\x08\\xc0$\\xde\\x97\\x00\\x99<d\\xf2?\\xb7qT\\x04\\xc5\\xc0\\x17QN\\x81\\xf5\\xc9E2\\xb8\\xe4}\\x8f_U\\xe5\\xe3c\\xca#b\\xdb_\\xe0\\x1a&\\x18NI\\xdda\\xc82\\xa4\\xdf\\xc4\\x91a\\xd7\\x16\\x10\\xa7\\x80\\xc1\\xfe\\x96,\\xa6H\\x1b*\\x1d]\\xfb\\xad\\xd8\\x15\\xe3>\\xf9\\x82g\\xc1U\\xdcr\\xbb\\xc62\\xf0\\xcd\\xa7u\\x1c\\'\\x87\\x1dm\\xddmd\\x12!\\x9d\"\\x01J\\xe6P\\x19\\x17zrd\\x0f\\xe7|\\xd9uJ\\xbb\\x1d\\xb6\\xde\\x11\\xb7\\x04p\\xf5\\xcen\\xf0\\x8fV\\xbc\\x956\\x03\\xcd\\xc98BS\\x8e\\xb8\\x17\\x91c\\xc4&\\xeb\\x18N\\x19OG\\xe8XLXG\\xa0x?\\xb9\\x818\\x18Z=\\x1bz\\x18\\x99H\\x03Y\\xea\\x10\\xdc\\x06>\\\\(\\x14\\x17\\xac\\xf4\\xe6\\x8a\\xf63\\x7fr\\x9f\\xd3\\xf5\\x0b\\x97\\xf6\\xe0g\\xc9KZY!\\xa2o\\xff\\x022\\xaf\\x0f\\xa2\\x7fBf\\xb2k\\xabQ\\xd4\\xe2V\\xc9\\xb9\\xbf\\x9b\\x87c\\xb5;\\xb5TK\\x8dY\\x86}r\\xeei\\x80\\x8a\\xfb\\xa1W\\xbc\\x9e\\x02\\x06\\xc3\\xd1\\x91\\xb5JA;+-5\\\\r\\xb8\\x1cp\\xbd\\xd2\\xd4\\x81\\xe0\\xc7\\x06\\xb0\\xeb\\xc5$\\xb76\\xb3\\xe4\\x90;\\xd8\\x93\\xf6\\xdd\\xebI`\\xbf`\\xccG\\xa3\\x10V6\\'k\\x07\\xf8\\xa0\\xf0\\xd7X\\xa9|\\x10\\x96+\\x0c\\x11\\x02\\xe4p\\xa3\\xa1\\xa41C\\x93\\x87\\'\\xcd\\xa2\\xf0\\xa4Y\\x9f\\x15\\x90\\xd8\\x08lF1\\xe8\\x86\\xab25\\xb6\\xd7\\xe3\\xdd\\xc5\\x12\\xad\\x03:a\\xc6x\\x96\\xf4\\xde\\xb8\\xca\\xe1\\xe9\\xdf+\\x97\\xf6\\x95\\xf8!O/4\\xcb[\\xbe]#\\xdb\\x08t\\xde].\\xea\\x19n\\xbc\\xa88Hw\\x05\\xf7T\\xfb\\x90g\\x85\\x84\\xe8\\x17\\x99\\xa7&\\xf6\\xe3\\xf7\\x18\\xba\\xee\\xf9\\xb9\\t\\xb0dN$\\'\\x9f\\xd0\\xd2\\xa0\\x87\\x8a?\\xc5s*\\xf2F[\\xb4z\\x90/R\\xe1\\xbc\\xe2n\\xca\\x18\\x94\\x84\\x01\\xaa^\\x91\\xc2\\x94h\\x98\\xb6\\xfb\\x91\\x83\\xe3nlh\\x99\\xc3\\x13\\x019\\xbf\\xc6\\xb1s\"\\x11u\\xbf\\xd3\\xa3\\xa9\\x98\\x1d\\x8e\\x83\\xe8\\xc0\\xc7\\x11\\x8e\\x13x\\x82\\x1e\\xc2o\\xad\\xe8\\x8e\\xc3\\x981`T\\xe3\\x85\\x08\\xd9\\x10\\xabS\\xa3\\x1b`\\xd5\\xf2u\\xf4*\\xb2\\xddV\\xb37\\xa9#l\\x19>D<h\\xa8G\\xee\\xc1\\x9f\\x05\\xe9J\\xbe\\xf3\\xef\\xf4\\xe3\\xce)\\x13\\xb5B\\xa7\\xf9\\xd3\\x01\\xb2>\\x1f\\xb3\\x7fh\\x1a\\xc3\\x95\\xce\\x15E\\x17ks\\xc5\\xa4\\xb1\\xe6\\xbc\\x13\\x14>*#M\\x1b2\\x05\\xd1\\xa2|xe\\xed\\xe7\\xe0\\xcc\\x06\\x1b\\x99h\\x93}\\x8b\\xa3\\x81\\xb1%\\x86f\\xd4Q\\xdcJq\\xc7\\x05\\xa6\\xc2\"\\xde<\\xfey\\xf5!Y\\x9f\\x86\\xa0\\xb0t\\xc49\\x90t\\x83\\xcd\\xee\\x8ebiZcx\\x9e&!\\x86vk\\xbbeMN\\xc7\\xe9Nkc\\xf3\\xebH\\xae\\x1c\\x14jLjC\\xea\\x16\\xa1\\xe9vf,\\xc7\\x8c.\\x0b\\xb5R\\xa7\\x9d\\xf2\\xf0\\x845\\xec\\x98\\xb8n\\xd4/\\x94t\\xd1\\x8f8ni\\x8d\\xdb\\xb3\\x04\\x01\\xf4\\xa3>\\xbex&17\\x11\\xd3\\x9d\\x1a\\x1a\\xb5]\\xaa\\xe4\\xa6\\x04\\xe9\\x12\\x1c\\xce7\\xd82\\xb2\\xc4\\xdc4J\\x99\\xc4r\\xc2\\xe7\\xc2\\xf3\\xd3T?\\x1ap>\\x1f\\xf4\\xbcVt\\xf8\\x1c\\xd5\\xef\\xbe\\x8eYk\\xfeq\\xed\\xafl?[Y\\x1b0\\xdf6a\\xceq\\xcf\\'\\xdf\\xbe\\xe0\\xe4\\xd75\\xe2\\x05\\xdd\\x12\\x1e\\xce\\x1c\\xe7\\xd8\\xae\\x1d\\xe3\\xff\\x86\\xdb\\xf9V.A\\xa4)\\xcbz\\x19\\x7f\\xae\\x9al\\xbd\\xe2aj?8\\x8b\\xd8\\xd6\\x9b\\x7f@\\x8f\\x89x\\x07<\\x17\\xabE0\\xe9\\xa4\\x84s\\x98\\xd1\\x9aU_\\x94\\x7fXHr\\xef\\xf4\\xbd\\x05\\xae\\xca\\x18\\xbdz\\xa0\\xf3\\x0c\\xfd\\xb9\\'!I\\x1b\\xe1.\\xbe\\x86{O\\x82\\xb9\\xcb\\xfb[\\xff\\xa9\\xd4e\\x8d\\xcc\\xe1,\\x03m\\xb8*\\x10]\\xfa\\xfd\\xc7u\\xd8\\xfd\\xb9\\xe2y\\x0bYX\\xee_u?\\x18\\xce\\x14l\\xa3CfH\\xc7&K\\xe2\\x85\\xf7\\xbf\\x7f\\x14\\\\\\xb4\\x86@\\xa4#\\xfdJ|xn\\xb4u\\xa8?\\xa5D\\x8aI\\xe0\\xb2\\x8a\\xcd\\x16\\xeb\\x86\\xde\\xa4\\x11\\xb8\\x99s\\x18\\x18d\\x87j5\\xb8\\xf91\\x08ga\\xb3\\xcf?ly]0\\xeb\\x7fw\\x01\\xb1\\x0e\\xbf\\x14X+\\xf1a\\x95\\x12\\x81\\xeetUG\\xd3\\xb0_\\xf9\\xe5\\xa9+7\\xc4\\x1a\\xb30n\\xe6\\xd7\\xdd`\\x1e\\xcaIv\\xb6\\x1d\\xba\\xa8\\x9cm\\x10\\xac\\xe0b\\x98\\x03\\xf7\\x1b\\xdb\\x1c\\xbd\\x90\\xd8\\x90\\xde\\x8d\\x17\\xc7k\\x12j62\\x12\\xa0o\\x9f\\xd0\\xf2\\x1f\\xad:#\\x03\\xbc\\xb4\\x13@\\xddZ9\\x8c\\xd2N\\x00d\\xd6\\xda\\x9c\\xa8\\xdfP\\x86?H\\x18\\x16\\xe4\\x85\\x94[\\xf4{W\\x00\\x9d\\x838\\x1e\\\\\\xb6\\x03\\xb7KP\\xda\\xc2\\xef\\x04\\xd2(.\\x05^\\xa7\\xc5\\x96T~\\x00\\xe7\\x07bsN\\x13+\\x92j\\x9c3\\xa2\\xfa\\x11\\x07\\xdd\\x05ZN>\\x91\\xc1IV\\x9c\\xccPC\\x92\\xa5\\xc9\\xf7\\x8c\\x91\\xed\\x9e\\x02\\xb4\\x8bP\\xcc\\xd0\\xd0\\xf3\\xf8\\x19~z\\xe0y\\x1e>\\xef\\xd5\\xde\\xb7\\x89\\x1c\\xb4\\xdb\\xaa\\xc2\\xcb\\x06\\xfe\\x18F\\xae\\x9f\\x0e\\xc8(\\xd3\\xc4#b\\xaa&)\\x19\\x17\\x96\\xa4!\\x87(=\\x04_\\x88\\x15\\x1e\\xaaSh\\x0b\\x80\\xd0\\xd4\\xcf\\xd5jT\\xfe[,ds\\tkt\\xe1P\\xf3w\\xea)Y\\xb8\\xab\\xec`%\\xed4\\x14\\x17\\xbc;\\x97D\\xa9\\xbe~T9.\\xafe+N\\xbbV;{\\xf0\\xe8S\\xf48#\\xf15\\xb4\\xd4\\xd4\\xa7\\xb2\\x11\\xb9\\xa9\\xe4\\x11PSD5S\\x9a\\xb3xv\\xb0\\x0e\\xa9N$*\\xbc\\xb2\\xf2\\xee\\xb3-\\xe9\\xd6\\x1f\\xc4e\\x96\\x13\\xa7q\\xca\\x08\\xc9\\xfc\\xdf\\x99\\xe3l\\xc4\\x89-K\\x03|\\xf9\\xa0\\xa1*\\x9cIX\\x00g\\x1e\\x88\\xf10\\x85\\xaa\\x98\\x8e\\xb9tb\\xe9!\\x89\\xc1GI0\\xac=\\x98J\\x1aM\\x07\\xd0Px/f\\x88\\xe9C\\xf2Z\\xd9\\xbe\\x98\\x0b\\xc1+\\x8bF\\xf6\\x03\\x9a[\\xbbR%\\x88\\x03A\\xae\\xb8N8g\\xe5\\x8dik\\xe5f&.\\xd0\\xd0\\xdc\\xeaX\\xfe\\x857g\\x9a1\\xbf\\x9f\\xb1.\\x02m\\xa31l\\xe6\\xcc\\xc4f\\x7f\\xdf\\xdaA\\xb4\\x8d\\xb8?\\x17\\xc2\\xbf\\xfb^\\xa3)\\xe8}\\x9d\\xd5\\xcc\\xccBob\\x08Q\\xb1D\\x98\\xa4)\\x0c\\x19\\x1f\\x84b`x\\xab\\xc0o)\\x93>n7\\x85\\xbfA\\x88-d\\xa2\\x08\\xb3\\xd0,l\\x14\\t\\xe5\\x9cy\\t\\xc6\\xe9Y\\xe1\\x11\\x04B\\x9b\\xf4\\xf7\\x11\\xe7~d$\\x06\\xdcI\\x02\\x1d\\x8a\\xa5\"q\\x01D1\\xb2f\\x8e\\xf6Y\\xecI\\xa2R\\xc9j\\x98\\x82\\xea\\xe0E^YP\\xff\\xd0\\xa6VG\\x87\\x0b\\xce\\x8bX\\xb47\\x80\\x16Y\\xd9\\x0c!\\x04\\xec\\xdc\\xbbJZ\\x1c\\x04\\xbc*\\x1c>JO\\x0b\\x82pb$\\xb0\\xd0\\xb0\\xfc\\xc4a\\x89a\\xd2z\\xc2o3\\xa5V\\xcez\\xa2\\xbe\\x10jS\\xa4\\x9b\\xe93\\x07_\\xbcgQ\\x8eR8a\\xc0\\xdd\\x9ei!\\x90\\xff\\xect\\x19\\x84\\xa6\\xc8O\\xac\\xa8\\xe7V2\\xe9@N\\x00\\xc4VC7i8\\x1c\\xfbr\\xcb\\xb2\\x96.r\\xbc\\x0c0\\x86\\x8e\\x94\\x9e]\\xdc\\xfa\\xa4\\xc0\\x8f\\xcej\\xd5\\xb3$\\xe4\\x9b\\x9d\\xca\\xb3\\x0e\\x91B9\\xa5y|\\xafG\\x17\\xb2U\\x80\\xcc\\x1es\\x99\\xac\\xaf\\x15\\x01\\xd3\\x91\\x032F\\x907\\x15\\x8b\\x1a\\xf4\\xff\\x1aib\\x18\\xb2\\x8f\\xbes\\xa4\\xa5\\xfc\\x11DA`x\\x1b-\\x11\\x1aa\\xb7\\xd3Pcj\\xbf|u\\xd7\\xa3\\xc5B\\xafD0\\xe7\\x93\\xcd\\xcd3j\\xa3\\xb3\\xc9\\xc7\\xee\\x9c#\\xf6\\x1c\\xf8:\\xa7]X\\xa2\\xd1KX]\\xb9\\xce,nO\\xf9\\xbf\\x8bY\\x9c\\xf7\\x11\\xc4D\\xea\\x9c\\xaf>\\xb0\\xda{7\\x02\\xec=\\xa6\\xfek3\\x0b\\x98\\xd3i\\xa1\\xd9cUY\\x18\\xfc\\xde:X\\x05\\x14*\\xe9\\xdc\\xb2a\\x1c\\xb6\\xf3/\\xbb\\\\\\xc3{)\\x84\\x10\\xd1J\\x88\\xdep\\xa7\\xddo4n\\xb8\\xffR\\xa0\\xc39v\\xcc\\xdb\\xed\\xca\\x92@l\\xa6\\x0c$(\\xa2\\xd8\\x1c\\xf8;\\x07\\xec|\\xf0\\x94\\xc2\\xb3\\x84j\\x1f?4>\\x17)Z\\x94\\xd0\\x1f*:bJ\\xe7\\x04^dnmS\\x01\\xb9\\x0cw\\x17HU:y\\xd1Jj\\xb1\\x1a$\\xbf\\x91\\x9c\\x18n\\xf1\\x0e)\\x17,\\xffm::\\t\\x10\\xd0\\xe3:\\x17\\x08\\x00\\x833\\x80\\x9cR\\xbe\\x1b3\\xae\\xacM\\xd3.\\x8e,\\xe02<\\x1a\\x19$\\x13Hf\\xd4\\x9bp\\x91)$\\x87\\x9d\\xe6\\xfd\\x8b\\xdc\\xd8~\\x0f\\xbb6WMM\\xe8U\\x03\\x06\\xd4\\xc1\\xa7\\xf3\\x91\\x08\\x06\\x00+C~\\xf8f5+\\x8c3bB\\x9aE\\xacJA5\\xca\\xf4s\\x1a\\xe8p\\xf3o\\x99j\\xbc\\x94\\x0e\\xf7W\\xc9\\x8fH\\x8a\\xe2\\xc0W\\x0e\\xe4\\x98\\xdb\\xd0\\xd6\\xdc\\xc7AT+CONF? Topic1\\r\\n'............................................................................................................................................................................................................................................................................\nb'Response: ERR1 OVERFLOW\\r\\n'\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010493590016267262,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_5_3_DataArrivingAfterEOL",
      "lineno": 247,
      "outcome": "passed",
      "keywords": [
        "test_4_5_3_DataArrivingAfterEOL",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.347435863997816,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_5_3_DataArrivingAfterEOL\u001b[0m\n"
      },
      "call": {
        "duration": 0.08469880700067733,
        "outcome": "passed",
        "stdout": "b'Command:  abcdefAT\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT\\n\\r'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT\\r\\r'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008998980010801461,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_6_3_ATCommunicationTest",
      "lineno": 284,
      "outcome": "passed",
      "keywords": [
        "test_4_6_3_ATCommunicationTest",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.915053865002847,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_6_3_ATCommunicationTest\u001b[0m\n"
      },
      "call": {
        "duration": 0.022366245000739582,
        "outcome": "passed",
        "stdout": "b'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011190059994987678,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_1_2_DisconnectedStaging",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_4_7_1_2_DisconnectedStaging",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.91355565199774,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_1_2_DisconnectedStaging\u001b[0m\n"
      },
      "call": {
        "duration": 0.050887900000816444,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 0 0 DISCONNECTED STAGING\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010578960027487483,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_1_3_ConnectedOnboarded",
      "lineno": 308,
      "outcome": "passed",
      "keywords": [
        "test_4_7_1_3_ConnectedOnboarded",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.784258693001902,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_1_3_ConnectedOnboarded\u001b[0m\n"
      },
      "call": {
        "duration": 8.903557797999383,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.................................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONNECT?\\r\\n'....\nb'Response: OK 1 1 CONNECTED CUSTOMER\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010811920001287945,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_1_4_DisconnectedOnboarded",
      "lineno": 314,
      "outcome": "passed",
      "keywords": [
        "test_4_7_1_4_DisconnectedOnboarded",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.79504395299955,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_1_4_DisconnectedOnboarded\u001b[0m\n"
      },
      "call": {
        "duration": 0.09231050599919399,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=test\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT?\\r\\n'...\nb'Response: OK 0 1 DISCONNECTED CUSTOMER\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010591550017124973,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_2_1_SuccessfulConnection",
      "lineno": 329,
      "outcome": "passed",
      "keywords": [
        "test_4_7_2_1_SuccessfulConnection",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.798144194999622,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_2_1_SuccessfulConnection\u001b[0m\n"
      },
      "call": {
        "duration": 8.550426660000085,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001045099001203198,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_2_2_FailedConnection",
      "lineno": 338,
      "outcome": "passed",
      "keywords": [
        "test_4_7_2_2_FailedConnection",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.782929303000856,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_2_2_FailedConnection\u001b[0m\n"
      },
      "call": {
        "duration": 2.251567472001625,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=notavalidendpoint.orvaliddomain\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010781919991131872,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_2_3_AlreadyConnected",
      "lineno": 347,
      "outcome": "passed",
      "keywords": [
        "test_4_7_2_3_AlreadyConnected",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.778602812999452,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_2_3_AlreadyConnected\u001b[0m\n"
      },
      "call": {
        "duration": 8.570949200999166,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..\nb'Response: OK 1 CONNECTED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010675070006982423,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_2_4_BackoffAfterFailure",
      "lineno": 357,
      "outcome": "passed",
      "keywords": [
        "test_4_7_2_4_BackoffAfterFailure",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.776231004001602,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_2_4_BackoffAfterFailure\u001b[0m\n"
      },
      "call": {
        "duration": 4.582491740002297,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=notavalidendpoint.orvaliddomain\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..............................................................................................................................................................................................................................\nb'Response: ERR14 4 UNABLE TO CONNECT Failed to securely authenticate with AWS\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..\nb'Response: ERR14 1 UNABLE TO CONNECT Backoff algorithm imposed delay\\r\\n'\n\nSuccessfully backed off after attempt 1\n"
      },
      "teardown": {
        "duration": 0.0010679690021788701,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_3_1_AlreadyDisconnected",
      "lineno": 380,
      "outcome": "passed",
      "keywords": [
        "test_4_7_3_1_AlreadyDisconnected",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.786086477000936,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_3_1_AlreadyDisconnected\u001b[0m\n"
      },
      "call": {
        "duration": 0.044195223999849986,
        "outcome": "passed",
        "stdout": "b'Command:  AT+DISCONNECT\\r\\n'..\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\nb'Command:  AT+DISCONNECT\\r\\n'..\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010396920006314758,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_1_SleepDuration",
      "lineno": 397,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_1_SleepDuration",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.351169816000038,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_1_SleepDuration\u001b[0m\n"
      },
      "call": {
        "duration": 10.096782669999811,
        "outcome": "passed",
        "stdout": "Sleeping device for 10 seconds\nb'Command:  AT+SLEEP0 10\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 2 0 STARTUP\\r\\n'\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\nWoke up after 10.04134353399786 seconds\n"
      },
      "teardown": {
        "duration": 0.0011765599992941134,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_2_1_SleepInterruptedResetPin",
      "lineno": 437,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_2_1_SleepInterruptedResetPin",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.926973314999486,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_2_1_SleepInterruptedResetPin\u001b[0m\n"
      },
      "call": {
        "duration": 39.09100539800056,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SLEEP0 40\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nVerifying sleep is indefinite...........\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 2 0 STARTUP\\r\\n'\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\nWoke up after 6.020812582999497 seconds\n"
      },
      "teardown": {
        "duration": 0.0010287100012646988,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_2_2_SleepInterruptedWakePin",
      "lineno": 457,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_2_2_SleepInterruptedWakePin",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.908154634998937,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_2_2_SleepInterruptedWakePin\u001b[0m\n"
      },
      "call": {
        "duration": 34.07078082699809,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SLEEP0 40\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nVerifying sleep is indefinite...........\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 2 0 STARTUP\\r\\n'\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\nWoke up after 2.0002846749994205 seconds\n"
      },
      "teardown": {
        "duration": 0.0010361739987274632,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_2_3_SleepInterruptedCommand",
      "lineno": 473,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_2_3_SleepInterruptedCommand",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.917121799000597,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_2_3_SleepInterruptedCommand\u001b[0m\n"
      },
      "call": {
        "duration": 32.04832161500235,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SLEEP0 40\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nVerifying sleep is indefinite...........\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\nWoke up after 0.021147080002265284 seconds\n"
      },
      "teardown": {
        "duration": 0.0011480430002848152,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_3_DefaultSleep",
      "lineno": 488,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_3_DefaultSleep",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.790389747999143,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_3_DefaultSleep\u001b[0m\n"
      },
      "call": {
        "duration": 1.0658455260017945,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=myTopic\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SLEEP0\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF? Topic1\\r\\n'..\nb'Response: OK myTopic\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010833209998963866,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_4_SleepClearsEventQueue",
      "lineno": 503,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_4_SleepClearsEventQueue",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.333350444001553,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_4_SleepClearsEventQueue\u001b[0m\n"
      },
      "call": {
        "duration": 4.1290858130014385,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SLEEP0\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SLEEP0\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 2 0 STARTUP\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011505609982123133,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_5_SleepFormat",
      "lineno": 521,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_5_SleepFormat",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.919482544999482,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_5_SleepFormat\u001b[0m\n"
      },
      "call": {
        "duration": 2.065709020000213,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SLEEP SOME TEXT\\r\\n'..\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+SLEEP9A\\r\\n'..\nb'Response: ERR2 PARSE ERROR\\r\\n'\n\nb'Command:  AT+SLEEP0 1\\r\\n'..\nb'Response: OK 0\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010425250002299435,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_6_NoSleepDuringConnection",
      "lineno": 535,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_6_NoSleepDuringConnection",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.904321084999538,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_6_NoSleepDuringConnection\u001b[0m\n"
      },
      "call": {
        "duration": 10.838756465000188,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SLEEP\\r\\n'..\nb'Response: ERR18 ACTIVE CONNECTION\\r\\n'\n\nb'Command:  AT+DISCONNECT\\r\\n'..............\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\nb'Command:  AT+SLEEP0 1\\r\\n'..\nb'Response: OK 0\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010550070001045242,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_7_SleepModeFallback",
      "lineno": 548,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_7_SleepModeFallback",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.897463940000307,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_7_SleepModeFallback\u001b[0m\n"
      },
      "call": {
        "duration": 2.023505632998422,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SLEEP999\\r\\n'..\nb'Response: OK 4\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010310439975000918,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_4_8_SleepEndStartupEvent",
      "lineno": 559,
      "outcome": "passed",
      "keywords": [
        "test_4_7_4_8_SleepEndStartupEvent",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.785053653002251,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_4_8_SleepEndStartupEvent\u001b[0m\n"
      },
      "call": {
        "duration": 2.5458690019986534,
        "outcome": "passed",
        "stdout": "b'Command:  AT+SLEEP0\\r\\n'..\nb'Response: OK 0\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 2 0 STARTUP\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010349889998906292,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_5_1_ConfmodeEnabled",
      "lineno": 584,
      "outcome": "skipped",
      "keywords": [
        "test_4_7_5_1_ConfmodeEnabled",
        "skipif",
        "pytestmark",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.001112358000682434,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py', 585, 'Skipped: CONFMODE unavailable')"
      },
      "teardown": {
        "duration": 0.0009082500000658911,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_5_2_ConfmodeDisabled",
      "lineno": 592,
      "outcome": "passed",
      "keywords": [
        "test_4_7_5_2_ConfmodeDisabled",
        "skipif",
        "pytestmark",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.335274283002946,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_5_2_ConfmodeDisabled\u001b[0m\n"
      },
      "call": {
        "duration": 0.023403778999636415,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONFMODE\\r\\n'..\nb'Response: ERR17 MODE NOT AVAILABLE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010364890003984328,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_5_3_ConfmodeWhileConnectedFails",
      "lineno": 601,
      "outcome": "skipped",
      "keywords": [
        "test_4_7_5_3_ConfmodeWhileConnectedFails",
        "skipif",
        "pytestmark",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.0009419710004294757,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py', 602, 'Skipped: CONFMODE unavailable')"
      },
      "teardown": {
        "duration": 0.0008743239995965268,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_5_3_ConfmodeAllowsOfflineCommands",
      "lineno": 610,
      "outcome": "skipped",
      "keywords": [
        "test_4_7_5_3_ConfmodeAllowsOfflineCommands",
        "skipif",
        "pytestmark",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.0009319900018454064,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py', 611, 'Skipped: CONFMODE unavailable')"
      },
      "teardown": {
        "duration": 0.001920183000038378,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_5_5_ConfmodeDisallowsConnect",
      "lineno": 620,
      "outcome": "skipped",
      "keywords": [
        "test_4_7_5_5_ConfmodeDisallowsConnect",
        "skipif",
        "pytestmark",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.0009382120006193873,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py', 621, 'Skipped: CONFMODE unavailable')"
      },
      "teardown": {
        "duration": 0.0009196200007863808,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_5_6_ConfmodeResetAbort",
      "lineno": 630,
      "outcome": "skipped",
      "keywords": [
        "test_4_7_5_6_ConfmodeResetAbort",
        "skipif",
        "pytestmark",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.0009709890000522137,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py', 631, 'Skipped: CONFMODE unavailable')"
      },
      "teardown": {
        "duration": 0.0009015079995151609,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_6_ResetNonPersistentConfig",
      "lineno": 652,
      "outcome": "passed",
      "keywords": [
        "test_4_7_6_ResetNonPersistentConfig",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.930490401002317,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_6_ResetNonPersistentConfig\u001b[0m\n"
      },
      "call": {
        "duration": 7.6429438710001705,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF CustomName=myCustomName\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF QoS=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? CustomName\\r\\n'...\nb'Response: OK myCustomName\\r\\n'\n\nb'Command:  AT+CONF? Topic1\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF? QoS\\r\\n'..\nb'Response: OK 0\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010789139996632002,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_6_1_ResetCommand",
      "lineno": 670,
      "outcome": "passed",
      "keywords": [
        "test_4_7_6_1_ResetCommand",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.342488295998919,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_6_1_ResetCommand\u001b[0m\n"
      },
      "call": {
        "duration": 4.032953901001747,
        "outcome": "passed",
        "stdout": "b'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010880250010814052,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_6_2_ResetStartupEvent",
      "lineno": 676,
      "outcome": "failed",
      "keywords": [
        "test_4_7_6_2_ResetStartupEvent",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.354582990999916,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_6_2_ResetStartupEvent\u001b[0m\n"
      },
      "call": {
        "duration": 4.045991648999916,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py",
          "lineno": 680,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section4.py",
            "lineno": 680,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: \\x00OK 2 0 STARTUP\\r\\n'\n\n",
        "longrepr": "def test_4_7_6_2_ResetStartupEvent() -> None:\n        assert cmd('AT+RESET\\r\\n') == 'OK\\r\\n'\n        assert poll(comms.get_event_pin, timeout=120, step=0.01)\n>       assert cmd('AT+EVENT?\\r\\n') == 'OK 2 0 STARTUP\\r\\n'\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section4.py:680: AssertionError"
      },
      "teardown": {
        "duration": 0.001058785001077922,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_7_FactoryResetPersistentStorage",
      "lineno": 686,
      "outcome": "failed",
      "keywords": [
        "test_4_7_7_FactoryResetPersistentStorage",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.329877531003149,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_7_FactoryResetPersistentStorage\u001b[0m\n"
      },
      "call": {
        "duration": 4.727331925998442,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py",
          "lineno": 696,
          "message": "AssertionError: assert '\\x00OK \\r\\n' == 'OK \\r\\n'\n  - OK \r\n  + \u0000OK \r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section4.py",
            "lineno": 696,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF CustomName=myCustomName\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Topic1=myTopic\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF QoS=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+FACTORY_RESET\\r\\n'..............................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? CustomName\\r\\n'..\nb'Response: \\x00OK \\r\\n'\n\n",
        "longrepr": "def test_4_7_7_FactoryResetPersistentStorage() -> None:\n        custom_name: str = 'myCustomName'\n        cmd(f'AT+CONF CustomName={custom_name}\\r\\n')\n        cmd('AT+CONF Topic1=myTopic\\r\\n')\n        cmd('AT+CONF QoS=1\\r\\n')\n    \n        assert cmd('AT+FACTORY_RESET\\r\\n') == 'OK\\r\\n'\n        assert poll(comms.get_event_pin, timeout=120, step=0.01)\n    \n>       assert cmd('AT+CONF? CustomName\\r\\n') == 'OK \\r\\n'\nE       AssertionError: assert '\\x00OK \\r\\n' == 'OK \\r\\n'\nE         - OK \r\nE         + \u0000OK \r\nE         ? +\n\ntests/test_section4.py:696: AssertionError"
      },
      "teardown": {
        "duration": 0.0005710309997084551,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_7_1_FactoryResetCommand",
      "lineno": 701,
      "outcome": "passed",
      "keywords": [
        "test_4_7_7_1_FactoryResetCommand",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.333757996002532,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_7_1_FactoryResetCommand\u001b[0m\n"
      },
      "call": {
        "duration": 4.60797741100032,
        "outcome": "passed",
        "stdout": "b'Command:  AT+FACTORY_RESET\\r\\n'..............................\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010616729996399954,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_7_2_FactoryResetStartupEvent",
      "lineno": 707,
      "outcome": "failed",
      "keywords": [
        "test_4_7_7_2_FactoryResetStartupEvent",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.9181417050022,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_7_2_FactoryResetStartupEvent\u001b[0m\n"
      },
      "call": {
        "duration": 5.063460216999374,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py",
          "lineno": 711,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section4.py",
            "lineno": 711,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+FACTORY_RESET\\r\\n'....................................................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: \\x00OK 2 0 STARTUP\\r\\n'\n\n",
        "longrepr": "def test_4_7_7_2_FactoryResetStartupEvent() -> None:\n        assert cmd('AT+FACTORY_RESET\\r\\n') == 'OK\\r\\n'\n        assert poll(comms.get_event_pin, timeout=120, step=0.01)\n>       assert cmd('AT+EVENT?\\r\\n') == 'OK 2 0 STARTUP\\r\\n'\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section4.py:711: AssertionError"
      },
      "teardown": {
        "duration": 0.001353838000795804,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_8_1_ConnectNonBlockingCommand",
      "lineno": 724,
      "outcome": "passed",
      "keywords": [
        "test_4_7_8_1_ConnectNonBlockingCommand",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.912179819999437,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_8_1_ConnectNonBlockingCommand\u001b[0m\n"
      },
      "call": {
        "duration": 0.022293754998827353,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONNECT!\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001006397000310244,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_8_2_ConnectNonBlockingEvent",
      "lineno": 747,
      "outcome": "passed",
      "keywords": [
        "test_4_7_8_2_ConnectNonBlockingEvent",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.791041598000447,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_8_2_ConnectNonBlockingEvent\u001b[0m\n"
      },
      "call": {
        "duration": 10.196358025001246,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT!\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Topic1\\r\\n'..\nb'Response: OK \\r\\n'\n\n....\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 6 0 CONNECT\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010718400008045137,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_8_2_ConnectNonBlockingHintCode",
      "lineno": 767,
      "outcome": "passed",
      "keywords": [
        "test_4_7_8_2_ConnectNonBlockingHintCode",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.783699449999403,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_8_2_ConnectNonBlockingHintCode\u001b[0m\n"
      },
      "call": {
        "duration": 2.1128987910014985,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=notavalidendpoint.orvaliddomain\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT!\\r\\n'..\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 6 2 CONNECT\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010653030003595632,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_8_3_ConnectNonBlockingAlreadyConnected",
      "lineno": 778,
      "outcome": "failed",
      "keywords": [
        "test_4_7_8_3_ConnectNonBlockingAlreadyConnected",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.778942681001354,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_8_3_ConnectNonBlockingAlreadyConnected\u001b[0m\n"
      },
      "call": {
        "duration": 2.113830425998458,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py",
          "lineno": 787,
          "message": "assert 2 == 0\n +  where 2 = _get_connect_event_hint()"
        },
        "traceback": [
          {
            "path": "tests/test_section4.py",
            "lineno": 793,
            "message": ""
          },
          {
            "path": "tests/test_section4.py",
            "lineno": 787,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT!\\r\\n'..\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 6 2 CONNECT\\r\\n'\n\n",
        "longrepr": "def test_4_7_8_3_ConnectNonBlockingAlreadyConnected() -> None:\n        endpoint = cf.test_config[\"personal_endpoint\"].get(str)\n        assert endpoint\n        assert cmd(f'AT+CONF Endpoint={endpoint}\\r\\n') == 'OK\\r\\n'\n    \n        def get_time_to_connect() -> float:\n            start: float = time.perf_counter()\n            assert cmd('AT+CONNECT!\\r\\n') == 'OK\\r\\n'\n            assert _get_connect_event_hint() == 0\n            duration_seconds: float = time.perf_counter() - start\n            print(f'Connect succeeded in {duration_seconds} seconds', end='\\n\\n')\n            return duration_seconds\n    \n        # get baseline connect time\n>       connect_time: float = get_time_to_connect()\n\ntests/test_section4.py:793: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def get_time_to_connect() -> float:\n        start: float = time.perf_counter()\n        assert cmd('AT+CONNECT!\\r\\n') == 'OK\\r\\n'\n>       assert _get_connect_event_hint() == 0\nE       assert 2 == 0\nE        +  where 2 = _get_connect_event_hint()\n\ntests/test_section4.py:787: AssertionError"
      },
      "teardown": {
        "duration": 0.0005621970012725797,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_8_4_ConnectNonBlockingBackOff",
      "lineno": 805,
      "outcome": "passed",
      "keywords": [
        "test_4_7_8_4_ConnectNonBlockingBackOff",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.766987004997645,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_4_7_8_4_ConnectNonBlockingBackOff\u001b[0m\n"
      },
      "call": {
        "duration": 10.219806293000147,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=notavalidendpoint.orvaliddomain\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT!\\r\\n'..\nb'Response: OK\\r\\n'\n\n..\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 6 4 CONNECT\\r\\n'\n\nb'Command:  AT+CONNECT!\\r\\n'..\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 6 4 CONNECT\\r\\n'\n\nb'Command:  AT+CONNECT!\\r\\n'..\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 6 1 CONNECT\\r\\n'\n\nSuccessfully backed off on attempt 2\n"
      },
      "teardown": {
        "duration": 0.0011417650021030568,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section4.py::test_4_7_8_5_ConnectNonBlockingFailConfmode",
      "lineno": 824,
      "outcome": "skipped",
      "keywords": [
        "test_4_7_8_5_ConnectNonBlockingFailConfmode",
        "skipif",
        "pytestmark",
        "tests/test_section4.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.0009375640001962893,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section4.py', 825, 'Skipped: confmode testing disabled')"
      },
      "teardown": {
        "duration": 0.0009285449996241368,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_1_1_TopicZeroOutOfRangeConf",
      "lineno": 45,
      "outcome": "passed",
      "keywords": [
        "test_5_1_1_1_TopicZeroOutOfRangeConf",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.78942412700053,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_1_1_TopicZeroOutOfRangeConf\u001b[0m\n"
      },
      "call": {
        "duration": 0.023245339001732646,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic0=myTopic\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010580810012470465,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_1_1_TopicZeroOutOfRangeMqtt",
      "lineno": 49,
      "outcome": "passed",
      "keywords": [
        "test_5_1_1_1_TopicZeroOutOfRangeMqtt",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.341740741998365,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_1_1_TopicZeroOutOfRangeMqtt\u001b[0m\n"
      },
      "call": {
        "duration": 9.828372769999987,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE0\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\nb'Command:  AT+SEND0 my message\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010377100006735418,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_1_2_MaxTopic",
      "lineno": 56,
      "outcome": "passed",
      "keywords": [
        "test_5_1_1_2_MaxTopic",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.344159747000958,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_1_2_MaxTopic\u001b[0m\n"
      },
      "call": {
        "duration": 0.0012694310025835875,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0010246000019833446,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_4_1_MqttPublish",
      "lineno": 82,
      "outcome": "error",
      "keywords": [
        "test_5_1_4_1_MqttPublish",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 23.945273325000016,
        "outcome": "failed",
        "crash": {
          "path": "/usr/lib/python3.11/socket.py",
          "lineno": 962,
          "message": "socket.gaierror: [Errno -3] Temporary failure in name resolution"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 251,
            "message": ""
          },
          {
            "path": "venv/lib/python3.11/site-packages/paho/mqtt/client.py",
            "lineno": 914,
            "message": "in connect"
          },
          {
            "path": "venv/lib/python3.11/site-packages/paho/mqtt/client.py",
            "lineno": 1044,
            "message": "in reconnect"
          },
          {
            "path": "venv/lib/python3.11/site-packages/paho/mqtt/client.py",
            "lineno": 3685,
            "message": "in _create_socket_connection"
          },
          {
            "path": "/usr/lib/python3.11/socket.py",
            "lineno": 827,
            "message": "in create_connection"
          },
          {
            "path": "/usr/lib/python3.11/socket.py",
            "lineno": 962,
            "message": "gaierror"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_4_1_MqttPublish\u001b[0m\nAttempting to connect to: a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\n",
        "longrepr": "request = <SubRequest 'mqtt_client' for <Function test_5_1_4_1_MqttPublish>>\n\n    @pytest.fixture()\n    def mqtt_client(request: pytest.FixtureRequest) -> mqtt.Client:\n        \"\"\"Authenticates with AWS IoT MQTT endpoint and returns an MQTT client\n           https://pypi.org/project/paho-mqtt/\"\"\"\n        client = mqtt.Client(protocol=mqtt.MQTTv5, client_id=\"testclient-\")\n        assert mqtt.ssl\n        client.tls_set(ca_certs=_ROOT_CA_PATH,\n                       certfile=\"credentials/tests-certificate.crt\",\n                       keyfile=\"credentials/tests-private.key\",\n                       tls_version=mqtt.ssl.PROTOCOL_TLS_CLIENT)\n    \n        endpoint = cf.get(\"personal_endpoint\", str)\n        print(f\"Attempting to connect to: {endpoint}\")\n    \n        done = False\n    \n        def on_connect(client, userdata, flags, reason, props):\n            nonlocal done\n            done = True\n    \n        def check_connect() -> bool:\n            client.loop(timeout=60)\n            return done\n    \n        client.on_connect = on_connect\n>       client.connect(host=endpoint, port=8883, keepalive=60)\n\ntests/conftest.py:251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/paho/mqtt/client.py:914: in connect\n    return self.reconnect()\nvenv/lib/python3.11/site-packages/paho/mqtt/client.py:1044: in reconnect\n    sock = self._create_socket_connection()\nvenv/lib/python3.11/site-packages/paho/mqtt/client.py:3685: in _create_socket_connection\n    return socket.create_connection(addr, timeout=self._connect_timeout, source_address=source)\n/usr/lib/python3.11/socket.py:827: in create_connection\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com', port = 8883, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 0, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -3] Temporary failure in name resolution\n\n/usr/lib/python3.11/socket.py:962: gaierror"
      },
      "teardown": {
        "duration": 0.0005856610005139373,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_4_2_MqttPublishNoConnection",
      "lineno": 97,
      "outcome": "passed",
      "keywords": [
        "test_5_1_4_2_MqttPublishNoConnection",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.898277031999896,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_4_2_MqttPublishNoConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.08458904199869721,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_4_2_MqttPublishNoConnection2025-04-16T00:59:25.732581\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SEND1 Hello World\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.00113035799950012,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_4_3_MqttPublishOutOfRange",
      "lineno": 109,
      "outcome": "passed",
      "keywords": [
        "test_5_1_4_3_MqttPublishOutOfRange",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.771696356001485,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_4_3_MqttPublishOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 8.617897415999323,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SEND17 Hello World\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001067140998202376,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_4_4_MqttPublishParamterUndefined",
      "lineno": 123,
      "outcome": "passed",
      "keywords": [
        "test_5_1_4_4_MqttPublishParamterUndefined",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.768268007002916,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_4_4_MqttPublishParamterUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 8.863309127998946,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic3=\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SEND3 Hello World\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001031030999001814,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_5_1_GetAnyReturnsTopicMessage",
      "lineno": 140,
      "outcome": "passed",
      "keywords": [
        "test_5_1_5_1_GetAnyReturnsTopicMessage",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.939699420003308,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_5_1_GetAnyReturnsTopicMessage\u001b[0m\n"
      },
      "call": {
        "duration": 44.793558557001234,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..........................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF Topic1=test_5_1_5_1_GetAnyReturnsTopicMessage2025-04-16T01:00:27.630298/1\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'.................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 1 SUBACK\\r\\n'\n\nReceived SUBNACK\nPolling AT+GET..\n\nb'Topic   : OK1 test_5_1_5_1_GetAnyReturnsTopicMessage2025-04-16T01:00:27.630298/1\\r\\n'\nb'Message : Hello World!\\r\\n'\nb'Command:  AT+CONF Topic2=test_5_1_5_1_GetAnyReturnsTopicMessage2025-04-16T01:00:27.630298/2\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE2\\r\\n'................................................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 1 1 MSG\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 2 SUBACK\\r\\n'\n\nReceived SUBNACK\nPolling AT+GET...\n\nb'Topic   : OK1 test_5_1_5_1_GetAnyReturnsTopicMessage2025-04-16T01:00:27.630298/2\\r\\n'\nb'Message : Hello World!\\r\\n'\nb'Command:  AT+CONF Topic3=test_5_1_5_1_GetAnyReturnsTopicMessage2025-04-16T01:00:27.630298/3\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE3\\r\\n'...............................................\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 1 2 MSG\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 3 SUBACK\\r\\n'\n\nReceived SUBNACK\nPolling AT+GET\n\nb'Topic   : OK1 test_5_1_5_1_GetAnyReturnsTopicMessage2025-04-16T01:00:27.630298/3\\r\\n'\nb'Message : Hello World!\\r\\n'\n"
      },
      "teardown": {
        "duration": 0.0014337829998112284,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_5_2_GetAnyReturnsNoMessage",
      "lineno": 180,
      "outcome": "passed",
      "keywords": [
        "test_5_1_5_2_GetAnyReturnsNoMessage",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.781243310997525,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_5_2_GetAnyReturnsNoMessage\u001b[0m\n"
      },
      "call": {
        "duration": 15.7933115550004,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+GET\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011425310003687628,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_6_1_GetUnassignedMessage",
      "lineno": 198,
      "outcome": "passed",
      "keywords": [
        "test_5_1_6_1_GetUnassignedMessage",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.800553430002765,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_6_1_GetUnassignedMessage\u001b[0m\n"
      },
      "call": {
        "duration": 13.317677227001695,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_6_1_GetUnassignedMessage2025-04-16T01:01:57.952665\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 1 SUBACK\\r\\n'\n\nReceived SUBNACK\nb'Command:  AT+CONF Topic1=\\r\\n'..\nb'Response: OK\\r\\n'\n\n..\n\nb'Topic   : OK1 test_5_1_6_1_GetUnassignedMessage2025-04-16T01:01:57.952665\\r\\n'\nb'Message : Hello World\\r\\n'\n"
      },
      "teardown": {
        "duration": 0.0005411179990915116,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_6_2_GetUnassignedNoMessage",
      "lineno": 236,
      "outcome": "passed",
      "keywords": [
        "test_5_1_6_2_GetUnassignedNoMessage",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.790903627999796,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_6_2_GetUnassignedNoMessage\u001b[0m\n"
      },
      "call": {
        "duration": 20.843891265998536,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_6_2_GetUnassignedNoMessage2025-04-16T01:02:26.080714\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+GET0\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011085510013799649,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_7_1_GetIndicatedMessage",
      "lineno": 255,
      "outcome": "error",
      "keywords": [
        "test_5_1_7_1_GetIndicatedMessage",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.775477051000053,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/conftest.py",
          "lineno": 201,
          "message": "AssertionError: assert 'OK' in 'C:/Users/sachouga/Downloads/gecko-sdk/extension/wiseconnect3/third_party/littlefs/src/lfs.c:2481:debug: Relocating {0x6e, 0x46} -> {0x7, 0x6e}\\n'\n +  where 'C:/Users/sachouga/Downloads/gecko-sdk/extension/wiseconnect3/third_party/littlefs/src/lfs.c:2481:debug: Relocating {0x6e, 0x46} -> {0x7, 0x6e}\\n' = cmd('AT+CONF SSID=Ghost_2G\\r\\n')"
        },
        "traceback": [
          {
            "path": "tests/conftest.py",
            "lineno": 201,
            "message": "AssertionError"
          }
        ],
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: C:/Users/sachouga/Downloads/gecko-sdk/extension/wiseconnect3/third_party/littlefs/src/lfs.c:2481:debug: Relocating {0x6e, 0x46} -> {0x7, 0x6e}\\n'\n\n",
        "longrepr": "request = <SubRequest 'setup_device' for <Function test_5_1_7_1_GetIndicatedMessage>>\n\n    @pytest.fixture(autouse=True)\n    def setup_device(request: pytest.FixtureRequest) -> None:\n        \"\"\"Initializes, factory resets, and configure device\"\"\"\n        DeviceLib().reset_device()\n        config_commands = cf.get('config_commands', list)\n        for command in config_commands:\n>           assert \"OK\" in cmd(f\"{command}\\r\\n\")\nE           AssertionError: assert 'OK' in 'C:/Users/sachouga/Downloads/gecko-sdk/extension/wiseconnect3/third_party/littlefs/src/lfs.c:2481:debug: Relocating {0x6e, 0x46} -> {0x7, 0x6e}\\n'\nE            +  where 'C:/Users/sachouga/Downloads/gecko-sdk/extension/wiseconnect3/third_party/littlefs/src/lfs.c:2481:debug: Relocating {0x6e, 0x46} -> {0x7, 0x6e}\\n' = cmd('AT+CONF SSID=Ghost_2G\\r\\n')\n\ntests/conftest.py:201: AssertionError"
      },
      "teardown": {
        "duration": 0.0011606059997575358,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_7_2_GetIndicatedNoMessage",
      "lineno": 274,
      "outcome": "passed",
      "keywords": [
        "test_5_1_7_2_GetIndicatedNoMessage",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.31140359300116,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_7_2_GetIndicatedNoMessage\u001b[0m\n"
      },
      "call": {
        "duration": 0.08378384900061064,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_7_2_GetIndicatedNoMessage2025-04-16T01:03:15.070211\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+GET1\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010813480002980214,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_7_3_GetIndicatedMessageAfterDisconnect",
      "lineno": 282,
      "outcome": "passed",
      "keywords": [
        "test_5_1_7_3_GetIndicatedMessageAfterDisconnect",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.94027748499866,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_7_3_GetIndicatedMessageAfterDisconnect\u001b[0m\n"
      },
      "call": {
        "duration": 14.628014211000846,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_7_3_GetIndicatedMessageAfterDisconnect2025-04-16T01:03:29.083077\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 1 SUBACK\\r\\n'\n\nReceived SUBNACK\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 1 1 MSG\\r\\n'\n\nb'Command:  AT+DISCONNECT\\r\\n'....\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\nb'Command:  AT+GET1\\r\\n'..\nb'Response: OK test_5_1_7_3_GetIndicatedMessageAfterDisconnect2025-04-16T01:03:29.083077\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0005034530004195403,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_7_4_GetIndicatedOutOfRange",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_5_1_7_4_GetIndicatedOutOfRange",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.921662494001794,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_7_4_GetIndicatedOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 0.023227730998769403,
        "outcome": "passed",
        "stdout": "b'Command:  AT+GET17\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009742780021042563,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_7_5_GetIndicatedErrorNoTopic",
      "lineno": 310,
      "outcome": "passed",
      "keywords": [
        "test_5_1_7_5_GetIndicatedErrorNoTopic",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.802901974999259,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_7_5_GetIndicatedErrorNoTopic\u001b[0m\n"
      },
      "call": {
        "duration": 0.02338356600012048,
        "outcome": "passed",
        "stdout": "b'Command:  AT+GET1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010361460008425638,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_8_1_SubscribeCommand",
      "lineno": 332,
      "outcome": "passed",
      "keywords": [
        "test_5_1_8_1_SubscribeCommand",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.345192777000193,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_8_1_SubscribeCommand\u001b[0m\n"
      },
      "call": {
        "duration": 8.851230641001166,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_8_1_SubscribeCommand2025-04-16T01:04:26.856307\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'................\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011070719992858358,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_8_2_SubscribeNoConnection",
      "lineno": 340,
      "outcome": "passed",
      "keywords": [
        "test_5_1_8_2_SubscribeNoConnection",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.341410031000123,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_8_2_SubscribeNoConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.08460377099981997,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_8_2_SubscribeNoConnection2025-04-16T01:04:50.053458\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001109996999730356,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_8_2_SubscribeTopicUndefined",
      "lineno": 347,
      "outcome": "passed",
      "keywords": [
        "test_5_1_8_2_SubscribeTopicUndefined",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.901041678000183,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_8_2_SubscribeTopicUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 8.956627891999233,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011272929987171665,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_8_2_SubscribeTopicOutOfRange",
      "lineno": 354,
      "outcome": "passed",
      "keywords": [
        "test_5_1_8_2_SubscribeTopicOutOfRange",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.905370063999726,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_8_2_SubscribeTopicOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 16.240925910999067,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...........................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'......................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE17\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010720909995143302,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_8_5_SubscribeSuback",
      "lineno": 365,
      "outcome": "passed",
      "keywords": [
        "test_5_1_8_5_SubscribeSuback",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.929747527003201,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_8_5_SubscribeSuback\u001b[0m\n"
      },
      "call": {
        "duration": 11.309629581999616,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_8_5_SubscribeSuback2025-04-16T01:05:57.085165\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'...............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 1 SUBACK\\r\\n'\n\nReceived SUBNACK\n"
      },
      "teardown": {
        "duration": 0.001140313001087634,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_8_7_SubscribeAgainOneSuback",
      "lineno": 380,
      "outcome": "passed",
      "keywords": [
        "test_5_1_8_7_SubscribeAgainOneSuback",
        "slow",
        "pytestmark",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.912248419997923,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_8_7_SubscribeAgainOneSuback\u001b[0m\n"
      },
      "call": {
        "duration": 132.13015643100152,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF Topic1=test_5_1_8_7_SubscribeAgainOneSuback2025-04-16T01:06:22.311512\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'............\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'..............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 1 SUBACK\\r\\n'\n\n............................................................Timed out while waiting for an event to match: ^.*SUBN?ACK\\r\\n$\n"
      },
      "teardown": {
        "duration": 0.0011304629988444503,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_9_1_UnsubcribeCommand",
      "lineno": 421,
      "outcome": "passed",
      "keywords": [
        "test_5_1_9_1_UnsubcribeCommand",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.919635090001975,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_9_1_UnsubcribeCommand\u001b[0m\n"
      },
      "call": {
        "duration": 16.430316145997494,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_9_1_UnsubcribeCommand2025-04-16T01:08:48.365763\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...........................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+UNSUBSCRIBE1\\r\\n'...............\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0012977199985471088,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_9_2_UnsubscribeNoConnection",
      "lineno": 429,
      "outcome": "passed",
      "keywords": [
        "test_5_1_9_2_UnsubscribeNoConnection",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.904506719998608,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_9_2_UnsubscribeNoConnection\u001b[0m\n"
      },
      "call": {
        "duration": 0.08467772099902504,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=test_5_1_9_2_UnsubscribeNoConnection2025-04-16T01:09:18.705169\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+UNSUBSCRIBE1\\r\\n'..\nb'Response: ERR6 NO CONNECTION\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009682800009613857,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_9_3_UnsubscribeParameterUndefined",
      "lineno": 436,
      "outcome": "passed",
      "keywords": [
        "test_5_1_9_3_UnsubscribeParameterUndefined",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.916148439002427,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_9_3_UnsubscribeParameterUndefined\u001b[0m\n"
      },
      "call": {
        "duration": 8.567388051000307,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+UNSUBSCRIBE1\\r\\n'..\nb'Response: ERR8 PARAMETER UNDEFINED\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010903529982897453,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section5.py::test_5_1_9_4_UnsubscribeOutOfRange",
      "lineno": 444,
      "outcome": "passed",
      "keywords": [
        "test_5_1_9_4_UnsubscribeOutOfRange",
        "tests/test_section5.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.923482090998732,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_5_1_9_4_UnsubscribeOutOfRange\u001b[0m\n"
      },
      "call": {
        "duration": 8.497781490998022,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+UNSUBSCRIBE17\\r\\n'..\nb'Response: ERR7 OUT OF RANGE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010792419998324476,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_1_1_2_InvalidKeyLength",
      "lineno": 28,
      "outcome": "passed",
      "keywords": [
        "test_6_1_1_2_InvalidKeyLength",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.922903079997923,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_1_1_2_InvalidKeyLength\u001b[0m\n"
      },
      "call": {
        "duration": 0.06557972600057838,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF aaaaaaaaaaaaaaaaa=testvalue\\r\\n'...\nb'Response: ERR9 INVALID KEY LENGTH\\r\\n'\n\nb'Command:  AT+CONF? aaaaaaaaaaaaaaaaa\\r\\n'..\nb'Response: ERR9 INVALID KEY LENGTH\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010616680010571145,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_1_1_4_InvalidKeyName",
      "lineno": 40,
      "outcome": "passed",
      "keywords": [
        "test_6_1_1_4_InvalidKeyName",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.795820995001122,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_1_1_4_InvalidKeyName\u001b[0m\n"
      },
      "call": {
        "duration": 0.04518431700125802,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF bad%key=testvalue\\r\\n'..\nb'Response: ERR10 INVALID KEY NAME\\r\\n'\n\nb'Command:  AT+CONF? bad%key\\r\\n'..\nb'Response: ERR10 INVALID KEY NAME\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010512609987927135,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_1_1_5_UnknownKey",
      "lineno": 49,
      "outcome": "passed",
      "keywords": [
        "test_6_1_1_5_UnknownKey",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.34338835699964,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_1_1_5_UnknownKey\u001b[0m\n"
      },
      "call": {
        "duration": 0.04537537300348049,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF unknownkey=testvalue\\r\\n'..\nb'Response: ERR11 UNKNOWN KEY\\r\\n'\n\nb'Command:  AT+CONF? unknownkey\\r\\n'..\nb'Response: ERR11 UNKNOWN KEY\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010662049971870147,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_2_1_ConfWrite",
      "lineno": 71,
      "outcome": "passed",
      "keywords": [
        "test_6_2_1_ConfWrite",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.925489598997956,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_2_1_ConfWrite\u001b[0m\n"
      },
      "call": {
        "duration": 0.022135835999506526,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Topic1=testwrite\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0008826720004435629,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_2_1_5_KeyReadOnly",
      "lineno": 92,
      "outcome": "passed",
      "keywords": [
        "test_6_2_1_5_KeyReadOnly",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.911965169001633,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_2_1_5_KeyReadOnly\u001b[0m\n"
      },
      "call": {
        "duration": 0.02318793300219113,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF ThingName=testvalue\\r\\n'..\nb'Response: ERR12 KEY READONLY\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009337260016764048,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_2_2_1_ConfRead",
      "lineno": 109,
      "outcome": "passed",
      "keywords": [
        "test_6_2_2_1_ConfRead",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.79102092299945,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_2_2_1_ConfRead\u001b[0m\n"
      },
      "call": {
        "duration": 0.02330506199723459,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? ThingName\\r\\n'..\nb'Response: OK silicon_labs_thing\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011099080002168193,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfAbout",
      "lineno": 162,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfAbout",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.346010363999085,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfAbout\u001b[0m\n"
      },
      "call": {
        "duration": 4.2223861109996506,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 174,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 174,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? About\\r\\n'..\nb'Response: OK Si-Labs - SiWG917\\r\\n'\n\nb'Command:  AT+CONF About=testwrite\\r\\n'..\nb'Response: ERR12 KEY READONLY\\r\\n'\n\nb'Command:  AT+CONF? About\\r\\n'..\nb'Response: OK Si-Labs - SiWG917\\r\\n'\n\nb'Command:  AT+CONF? About\\r\\n'..\nb'Response: OK Si-Labs - SiWG917\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfAbout() -> None:\n        re_key = r'^OK .+ - .+\\r\\n$'\n        initial_value = cmd(\"AT+CONF? About\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        assert len(initial_value[3:-2]) <= 64\n    \n        _CheckNonVolatileKeyIsReadonly('About', initial_value)\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:174: AssertionError"
      },
      "teardown": {
        "duration": 0.0008228389997384511,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfVersion",
      "lineno": 190,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfVersion",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.337720694999007,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfVersion\u001b[0m\n"
      },
      "call": {
        "duration": 4.230834334000974,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 202,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 202,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? Version\\r\\n'..\nb'Response: OK 1.0.0\\r\\n'\n\nb'Command:  AT+CONF Version=testwrite\\r\\n'..\nb'Response: ERR12 KEY READONLY\\r\\n'\n\nb'Command:  AT+CONF? Version\\r\\n'..\nb'Response: OK 1.0.0\\r\\n'\n\nb'Command:  AT+CONF? Version\\r\\n'..\nb'Response: OK 1.0.0\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfVersion() -> None:\n        re_key = r'^OK [^ ].*\\r\\n$'\n        initial_value = cmd(\"AT+CONF? Version\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        assert len(initial_value[3:-2]) <= 32\n    \n        _CheckNonVolatileKeyIsReadonly('Version', initial_value)\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:202: AssertionError"
      },
      "teardown": {
        "duration": 0.000573361998249311,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfTechSpec",
      "lineno": 216,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfTechSpec",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.346723055001348,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfTechSpec\u001b[0m\n"
      },
      "call": {
        "duration": 4.220650014001876,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 228,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 228,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? TechSpec\\r\\n'..\nb'Response: OK v1.2\\r\\n'\n\nb'Command:  AT+CONF TechSpec=testwrite\\r\\n'..\nb'Response: ERR12 KEY READONLY\\r\\n'\n\nb'Command:  AT+CONF? TechSpec\\r\\n'..\nb'Response: OK v1.2\\r\\n'\n\nb'Command:  AT+CONF? TechSpec\\r\\n'..\nb'Response: OK v1.2\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfTechSpec() -> None:\n        expected_techspec = f\"OK {pytest.expresslink_info['test_techspec']}\\r\\n\"  # type: ignore\n        initial_value = cmd(\"AT+CONF? TechSpec\\r\\n\")\n    \n        assert initial_value == expected_techspec\n        assert len(initial_value[3:-2]) <= 16\n    \n        _CheckNonVolatileKeyIsReadonly('TechSpec', initial_value)\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:228: AssertionError"
      },
      "teardown": {
        "duration": 0.0011865750020660926,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfThingName",
      "lineno": 243,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfThingName",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.336480501999176,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfThingName\u001b[0m\n"
      },
      "call": {
        "duration": 4.2323091230027785,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 256,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 256,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? ThingName\\r\\n'..\nb'Response: OK silicon_labs_thing\\r\\n'\n\nb'Command:  AT+CONF ThingName=testwrite\\r\\n'..\nb'Response: ERR12 KEY READONLY\\r\\n'\n\nb'Command:  AT+CONF? ThingName\\r\\n'..\nb'Response: OK silicon_labs_thing\\r\\n'\n\nb'Command:  AT+CONF? ThingName\\r\\n'..\nb'Response: OK silicon_labs_thing\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfThingName() -> None:\n        re_key = r'^OK .+\\r\\n$'\n        initial_value = cmd(\"AT+CONF? ThingName\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        assert len(initial_value[3:-2]) <= 64\n        assert len(initial_value[3:-2]) >= 16\n    \n        _CheckNonVolatileKeyIsReadonly('ThingName', initial_value)\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:256: AssertionError"
      },
      "teardown": {
        "duration": 0.0010232989989162888,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfCertificate",
      "lineno": 271,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfCertificate",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.341711611999926,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfCertificate\u001b[0m\n"
      },
      "call": {
        "duration": 4.5389703450018715,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 282,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 282,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? Certificate\\r\\n'..\nb'Response: OK -----BEGIN CERTIFICATE-----\\\\AMIIDWTCCAkGgAwIBAgIUOWBvTtHMVup0MWDN3Z2ugpshHhYwDQYJKoZIhvcNAQEL\\\\ABQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\\\\ASW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIzMDMyMzEyNDE0\\\\AMloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\\\\AZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrT0KmqZTJovLoCnaaa\\\\A9issa0GvqIOAYqPL3J8dD8HIRQnJnDggWHvf0K23hP1Uhfwpe6IrPB9wPS2O523/\\\\AFzDf5O+KBVVd2VyWgNvfhzAU+1nKx9/1ktjNR4bkFozOtS4AWrTCOS4f/fq+Bx4R\\\\Asb+8gtjfbO6XP6sbvj+ygoN8Zm7SyLCBxBgSyCiZGWlecYhVXSpdWx2kjImYpXzG\\\\Atf0ltnAPuUJhQ7rcqWvh/LWnIYX1/UUlVX/sTy4fHU4o/5S3W+dKdK6JQNk4f3VQ\\\\AdrFeApdRk8EKlCfPZlDjZiZPsQkhpMqG3Vc3I04fA34JMfSgWGGOnl6IVjWJuVvO\\\\AE2MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUDIXnS+v3EsBBkQLM2hzTvEJMqNAwHQYD\\\\AVR0OBBYEFImms3SJJei7bsV2aPqFQ9WoC9XCMAwGA1UdEwEB/wQCMAAwDgYDVR0P\\\\AAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQDenzmAeoxlJ0yPMmPS5ceG+VmW\\\\A1yGY+tENA0lY5JHq4uza4UIHOlNXCWtkd53SjoT2UoTuPVN8tZb4+F2Yjjkpj/yq\\\\A8yEND8UyyyWiqWbOx2EXJUgdL86Mi/LQ+c7nblUOwLMw/esSqa0qS7XsxtO46xYo\\\\A8mB/MIMK+Uvfhn5etHXkiWjAu71guyYeF0II46O3yUxxhKNVxpclGTdmzbOzogP9\\\\AJYIaJ2Yw/ptCw+zjkIRi7Vlh18Hx/i2lNKOhWOADw0tXMWyCKg0KJqrcP4QG/t9Z\\\\AQjP2EnJSEJTuqn74i+/7mm2eE018e0SENMIzEJpC1d25huun0xh7XqnO7zxB\\\\A-----END CERTIFICATE-----\\\\A\\r\\n'\n\nb'Command:  AT+CONF Certificate=testwrite\\r\\n'..\nb'Response: ERR12 KEY READONLY\\r\\n'\n\nb'Command:  AT+CONF? Certificate\\r\\n'..\nb'Response: OK -----BEGIN CERTIFICATE-----\\\\AMIIDWTCCAkGgAwIBAgIUOWBvTtHMVup0MWDN3Z2ugpshHhYwDQYJKoZIhvcNAQEL\\\\ABQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\\\\ASW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIzMDMyMzEyNDE0\\\\AMloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\\\\AZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrT0KmqZTJovLoCnaaa\\\\A9issa0GvqIOAYqPL3J8dD8HIRQnJnDggWHvf0K23hP1Uhfwpe6IrPB9wPS2O523/\\\\AFzDf5O+KBVVd2VyWgNvfhzAU+1nKx9/1ktjNR4bkFozOtS4AWrTCOS4f/fq+Bx4R\\\\Asb+8gtjfbO6XP6sbvj+ygoN8Zm7SyLCBxBgSyCiZGWlecYhVXSpdWx2kjImYpXzG\\\\Atf0ltnAPuUJhQ7rcqWvh/LWnIYX1/UUlVX/sTy4fHU4o/5S3W+dKdK6JQNk4f3VQ\\\\AdrFeApdRk8EKlCfPZlDjZiZPsQkhpMqG3Vc3I04fA34JMfSgWGGOnl6IVjWJuVvO\\\\AE2MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUDIXnS+v3EsBBkQLM2hzTvEJMqNAwHQYD\\\\AVR0OBBYEFImms3SJJei7bsV2aPqFQ9WoC9XCMAwGA1UdEwEB/wQCMAAwDgYDVR0P\\\\AAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQDenzmAeoxlJ0yPMmPS5ceG+VmW\\\\A1yGY+tENA0lY5JHq4uza4UIHOlNXCWtkd53SjoT2UoTuPVN8tZb4+F2Yjjkpj/yq\\\\A8yEND8UyyyWiqWbOx2EXJUgdL86Mi/LQ+c7nblUOwLMw/esSqa0qS7XsxtO46xYo\\\\A8mB/MIMK+Uvfhn5etHXkiWjAu71guyYeF0II46O3yUxxhKNVxpclGTdmzbOzogP9\\\\AJYIaJ2Yw/ptCw+zjkIRi7Vlh18Hx/i2lNKOhWOADw0tXMWyCKg0KJqrcP4QG/t9Z\\\\AQjP2EnJSEJTuqn74i+/7mm2eE018e0SENMIzEJpC1d25huun0xh7XqnO7zxB\\\\A-----END CERTIFICATE-----\\\\A\\r\\n'\n\nb'Command:  AT+CONF? Certificate\\r\\n'..\nb'Response: OK -----BEGIN CERTIFICATE-----\\\\AMIIDWTCCAkGgAwIBAgIUOWBvTtHMVup0MWDN3Z2ugpshHhYwDQYJKoZIhvcNAQEL\\\\ABQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\\\\ASW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIzMDMyMzEyNDE0\\\\AMloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\\\\AZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrT0KmqZTJovLoCnaaa\\\\A9issa0GvqIOAYqPL3J8dD8HIRQnJnDggWHvf0K23hP1Uhfwpe6IrPB9wPS2O523/\\\\AFzDf5O+KBVVd2VyWgNvfhzAU+1nKx9/1ktjNR4bkFozOtS4AWrTCOS4f/fq+Bx4R\\\\Asb+8gtjfbO6XP6sbvj+ygoN8Zm7SyLCBxBgSyCiZGWlecYhVXSpdWx2kjImYpXzG\\\\Atf0ltnAPuUJhQ7rcqWvh/LWnIYX1/UUlVX/sTy4fHU4o/5S3W+dKdK6JQNk4f3VQ\\\\AdrFeApdRk8EKlCfPZlDjZiZPsQkhpMqG3Vc3I04fA34JMfSgWGGOnl6IVjWJuVvO\\\\AE2MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUDIXnS+v3EsBBkQLM2hzTvEJMqNAwHQYD\\\\AVR0OBBYEFImms3SJJei7bsV2aPqFQ9WoC9XCMAwGA1UdEwEB/wQCMAAwDgYDVR0P\\\\AAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQDenzmAeoxlJ0yPMmPS5ceG+VmW\\\\A1yGY+tENA0lY5JHq4uza4UIHOlNXCWtkd53SjoT2UoTuPVN8tZb4+F2Yjjkpj/yq\\\\A8yEND8UyyyWiqWbOx2EXJUgdL86Mi/LQ+c7nblUOwLMw/esSqa0qS7XsxtO46xYo\\\\A8mB/MIMK+Uvfhn5etHXkiWjAu71guyYeF0II46O3yUxxhKNVxpclGTdmzbOzogP9\\\\AJYIaJ2Yw/ptCw+zjkIRi7Vlh18Hx/i2lNKOhWOADw0tXMWyCKg0KJqrcP4QG/t9Z\\\\AQjP2EnJSEJTuqn74i+/7mm2eE018e0SENMIzEJpC1d25huun0xh7XqnO7zxB\\\\A-----END CERTIFICATE-----\\\\A\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfCertificate() -> None:\n        re_key = r'^OK -----BEGIN CERTIFICATE-----\\\\A.+\\\\A-----END CERTIFICATE-----\\\\A\\r\\n$'\n        initial_value = cmd(\"AT+CONF? Certificate\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n    \n        _CheckNonVolatileKeyIsReadonly('Certificate', initial_value)\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:282: AssertionError"
      },
      "teardown": {
        "duration": 0.0008090980009001214,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfCustomName",
      "lineno": 296,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfCustomName",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.33324311099932,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfCustomName\u001b[0m\n"
      },
      "call": {
        "duration": 4.346998027998779,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 309,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 309,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? CustomName\\r\\n'...\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF CustomName=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'.......\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? CustomName\\r\\n'...\nb'Response: OK aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfCustomName() -> None:\n        re_key = r'^OK \\r\\n$'\n        initial_value = cmd(\"AT+CONF? CustomName\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = 'a' * 128\n    \n        assert cmd(f\"AT+CONF CustomName={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? CustomName\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:309: AssertionError"
      },
      "teardown": {
        "duration": 0.0012014259991701692,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfEndpoint",
      "lineno": 323,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfEndpoint",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.797996933000832,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfEndpoint\u001b[0m\n"
      },
      "call": {
        "duration": 4.37608112000089,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 336,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 336,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? Endpoint\\r\\n'...\nb'Response: OK d01957845e3vbsmdo9am-ats.iot.us-east-2.amazonaws.com\\r\\n'\n\nb'Command:  AT+CONF Endpoint=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'.......\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Endpoint\\r\\n'...\nb'Response: OK aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfEndpoint() -> None:\n        re_key = r'^OK .+\\r\\n$'\n        initial_value = cmd(\"AT+CONF? Endpoint\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = 'a' * 128\n    \n        assert cmd(f\"AT+CONF Endpoint={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? Endpoint\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:336: AssertionError"
      },
      "teardown": {
        "duration": 0.0006919520019437186,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfRootCA",
      "lineno": 350,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfRootCA",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.909705443998973,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfRootCA\u001b[0m\n"
      },
      "call": {
        "duration": 8.342851228000654,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 364,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 364,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? RootCA\\r\\n'...\nb'Response: OK -----BEGIN CERTIFICATE-----\\\\AMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\\\\AMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\\\\AU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\\\\ANjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\\\\AChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\\\\AZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\\\\ADQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\\\\A8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\\\\A+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\\\\AX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\\\\AK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\\\\A1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\\\\AA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\\\\Azt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\\\\AYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\\\\AbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\\\\ADQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\\\\AL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\\\\Aeruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\\\\Axy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\\\\AVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\\\\AWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\\\\A-----END CERTIFICATE-----\\\\A\\r\\n'\n\nb'Command:  AT+CONF RootCA=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'.................................................................................................................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? RootCA\\r\\n'...\nb'Response: OK aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF RootCA=-----BEGIN CERTIFICATE-----\\\\AMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\\\\AMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\\\\AU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\\\\ANjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\\\\AChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\\\\AZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\\\\ADQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\\\\A8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\\\\A+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\\\\AX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\\\\AK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\\\\A1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\\\\AA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\\\\Azt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\\\\AYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\\\\AbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\\\\ADQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\\\\AL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\\\\Aeruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\\\\Axy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\\\\AVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\\\\AWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\\\\A-----END CERTIFICATE-----\\\\A\\r\\n'..............................................\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfRootCA() -> None:\n        re_key = r'^OK -----BEGIN CERTIFICATE-----\\\\A.+\\\\A-----END CERTIFICATE-----\\\\A\\r\\n$'\n        initial_value = cmd(\"AT+CONF? RootCA\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = 'a' * 4000\n    \n        try:\n            assert cmd(f\"AT+CONF RootCA={test_value}\\r\\n\") == \"OK\\r\\n\"\n            assert cmd(\"AT+CONF? RootCA\\r\\n\")[3:-2] == test_value\n    \n            assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n            poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>           assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE           AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE             - OK 2 0 STARTUP\r\nE             + \u0000OK 2 0 STARTUP\r\nE             ? +\n\ntests/test_section6.py:364: AssertionError"
      },
      "teardown": {
        "duration": 0.0009841520004556514,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfShadowToken",
      "lineno": 382,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfShadowToken",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.328353853998124,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfShadowToken\u001b[0m\n"
      },
      "call": {
        "duration": 4.361261258000013,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 397,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 397,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? ShadowToken\\r\\n'...\nb'Response: OK ExpressLink\\r\\n'\n\nb'Command:  AT+CONF ShadowToken=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF ShadowToken=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'....\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF? ShadowToken\\r\\n'...\nb'Response: OK aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfShadowToken() -> None:\n        expected_shadowtoken = \"OK ExpressLink\\r\\n\"\n        initial_value = cmd(\"AT+CONF? ShadowToken\\r\\n\")\n    \n        assert initial_value == expected_shadowtoken\n        test_value = 'a' * 64\n    \n        assert cmd(f\"AT+CONF ShadowToken={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(f\"AT+CONF ShadowToken={test_value + 'a'}\\r\\n\"\n                   ) == \"ERR4 PARAMETER ERROR\\r\\n\"\n        assert cmd(\"AT+CONF? ShadowToken\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:397: AssertionError"
      },
      "teardown": {
        "duration": 0.0008185240003513172,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfDefenderPeriod",
      "lineno": 411,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfDefenderPeriod",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.798069455002405,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfDefenderPeriod\u001b[0m\n"
      },
      "call": {
        "duration": 4.262110225001379,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 424,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 424,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? DefenderPeriod\\r\\n'...\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF DefenderPeriod=11111111\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? DefenderPeriod\\r\\n'...\nb'Response: OK 11111111\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfDefenderPeriod() -> None:\n        expected_defenderperiod = \"OK 0\\r\\n\"\n        initial_value = cmd(\"AT+CONF? DefenderPeriod\\r\\n\")\n    \n        assert initial_value == expected_defenderperiod\n        test_value = '1' * 8\n    \n        assert cmd(f\"AT+CONF DefenderPeriod={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? DefenderPeriod\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:424: AssertionError"
      },
      "teardown": {
        "duration": 0.0011684829987643752,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfHOTAcertificate",
      "lineno": 438,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfHOTAcertificate",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.91821845800223,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfHOTAcertificate\u001b[0m\n"
      },
      "call": {
        "duration": 7.1819529499989585,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 451,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 451,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? HOTAcertificate\\r\\n'...\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF HOTAcertificate=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'.................................................................................................................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? HOTAcertificate\\r\\n'...\nb'Response: OK aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table2_ConfHOTAcertificate() -> None:\n        re_key = r'^OK \\r\\n$'\n        initial_value = cmd(\"AT+CONF? HOTAcertificate\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = 'a' * 4000\n    \n        assert cmd(f\"AT+CONF HOTAcertificate={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? HOTAcertificate\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:451: AssertionError"
      },
      "teardown": {
        "duration": 0.0005675850006809924,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfOTAcertificate",
      "lineno": 465,
      "outcome": "passed",
      "keywords": [
        "test_6_table2_ConfOTAcertificate",
        "skipif",
        "pytestmark",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.904504018999432,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfOTAcertificate\u001b[0m\n"
      },
      "call": {
        "duration": 0.0654754690003756,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF OTAcertificate=\\r\\n'...\nb'Response: ERR26 INVALID CERTIFICATE\\r\\n'\n\nb'Command:  AT+CONF? OTAcertificate\\r\\n'..\nb'Response: ERR13 KEY WRITEONLY\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010427810011606198,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfSSID",
      "lineno": 479,
      "outcome": "failed",
      "keywords": [
        "test_6_table2_ConfSSID",
        "prod",
        "skipif",
        "pytestmark",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.932921804000216,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfSSID\u001b[0m\n"
      },
      "call": {
        "duration": 4.722151011999813,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 486,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 486,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+FACTORY_RESET\\r\\n'..............................\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "@pytest.mark.skipif(not cf.get('feature_wifi', bool),\n                        reason='wifi testing disabled')\n    @pytest.mark.prod\n    def test_6_table2_ConfSSID() -> None:\n        assert cmd(\"AT+FACTORY_RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:486: AssertionError"
      },
      "teardown": {
        "duration": 0.0011698909984261263,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_NoConfSSID",
      "lineno": 509,
      "outcome": "skipped",
      "keywords": [
        "test_6_table2_NoConfSSID",
        "skipif",
        "pytestmark",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.001003190001938492,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py', 510, 'Skipped: wifi testing enabled')"
      },
      "teardown": {
        "duration": 0.0009633009976823814,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfPassphrase",
      "lineno": 522,
      "outcome": "passed",
      "keywords": [
        "test_6_table2_ConfPassphrase",
        "skipif",
        "pytestmark",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.789590398002474,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_ConfPassphrase\u001b[0m\n"
      },
      "call": {
        "duration": 0.17455028499898617,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Passphrase=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'.....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'....\nb'Response: ERR4 PARAMETER ERROR\\r\\n'\n\nb'Command:  AT+CONF? Passphrase\\r\\n'..\nb'Response: ERR13 KEY WRITEONLY\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001060466001945315,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_NoConfPassphrase",
      "lineno": 532,
      "outcome": "skipped",
      "keywords": [
        "test_6_table2_NoConfPassphrase",
        "skipif",
        "pytestmark",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.0009195060010824818,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py', 533, 'Skipped: wifi testing enabled')"
      },
      "teardown": {
        "duration": 0.000902265001059277,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_ConfAPN",
      "lineno": 545,
      "outcome": "skipped",
      "keywords": [
        "test_6_table2_ConfAPN",
        "skipif",
        "pytestmark",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.000957856002059998,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py', 546, 'Skipped: cellular testing disabled')"
      },
      "teardown": {
        "duration": 0.000903635002032388,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table2_NoConfAPN",
      "lineno": 575,
      "outcome": "passed",
      "keywords": [
        "test_6_table2_NoConfAPN",
        "skipif",
        "pytestmark",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.805595521000214,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table2_NoConfAPN\u001b[0m\n"
      },
      "call": {
        "duration": 0.04474700100035989,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? APN\\r\\n'..\nb'Response: ERR11 UNKNOWN KEY\\r\\n'\n\nb'Command:  AT+CONF APN=testwrite\\r\\n'..\nb'Response: ERR11 UNKNOWN KEY\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001054133001161972,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table3_ConfQoS",
      "lineno": 594,
      "outcome": "failed",
      "keywords": [
        "test_6_table3_ConfQoS",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.349022796002828,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table3_ConfQoS\u001b[0m\n"
      },
      "call": {
        "duration": 4.191568838999956,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 607,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 607,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? QoS\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF QoS=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? QoS\\r\\n'..\nb'Response: OK 1\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table3_ConfQoS() -> None:\n        re_key = r'^OK 0\\r\\n$'\n        initial_value = cmd(\"AT+CONF? QoS\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = '1'\n    \n        assert cmd(f\"AT+CONF QoS={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? QoS\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:607: AssertionError"
      },
      "teardown": {
        "duration": 0.0019417309995333198,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table3_ConfTopic1",
      "lineno": 622,
      "outcome": "failed",
      "keywords": [
        "test_6_table3_ConfTopic1",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.337248086001637,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table3_ConfTopic1\u001b[0m\n"
      },
      "call": {
        "duration": 4.27866104900022,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 635,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 635,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? Topic1\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF Topic1=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'......\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Topic1\\r\\n'..\nb'Response: OK aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table3_ConfTopic1() -> None:\n        re_key = r'^OK \\r\\n$'\n        initial_value = cmd(\"AT+CONF? Topic1\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = 'a' * 128\n    \n        assert cmd(f\"AT+CONF Topic1={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? Topic1\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:635: AssertionError"
      },
      "teardown": {
        "duration": 0.0011664829980873037,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table3_ConfTopic2",
      "lineno": 650,
      "outcome": "failed",
      "keywords": [
        "test_6_table3_ConfTopic2",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.354843851000624,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table3_ConfTopic2\u001b[0m\n"
      },
      "call": {
        "duration": 9.138456176002364,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 670,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 670,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? Topic2\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF Topic2=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'......\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Topic2\\r\\n'..\nb'Response: OK aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Topic2\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF Topic2=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'......\nb'Response: OK\\r\\n'\n\nb'Command:  AT+FACTORY_RESET\\r\\n'...............................\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table3_ConfTopic2() -> None:\n        re_key = r'^OK \\r\\n$'\n        initial_value = cmd(\"AT+CONF? Topic2\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = 'a' * 128\n    \n        assert cmd(f\"AT+CONF Topic2={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? Topic2\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n        assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\n        assert cmd(\"AT+CONF? Topic2\\r\\n\") == initial_value\n    \n        assert cmd(f\"AT+CONF Topic2={test_value}\\r\\n\") == \"OK\\r\\n\"\n    \n        assert cmd(\"AT+FACTORY_RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:670: AssertionError"
      },
      "teardown": {
        "duration": 0.0005712880010833032,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table3_ConfEnableShadow",
      "lineno": 678,
      "outcome": "failed",
      "keywords": [
        "test_6_table3_ConfEnableShadow",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.331584856998234,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table3_ConfEnableShadow\u001b[0m\n"
      },
      "call": {
        "duration": 4.196103127000242,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 691,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 691,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? EnableShadow\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF EnableShadow=1\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? EnableShadow\\r\\n'..\nb'Response: OK 1\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table3_ConfEnableShadow() -> None:\n        re_key = r'^OK 0\\r\\n$'\n        initial_value = cmd(\"AT+CONF? EnableShadow\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = '1'\n    \n        assert cmd(f\"AT+CONF EnableShadow={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? EnableShadow\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:691: AssertionError"
      },
      "teardown": {
        "duration": 0.0011844830005429685,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section6.py::test_6_table3_ConfShadow1",
      "lineno": 706,
      "outcome": "failed",
      "keywords": [
        "test_6_table3_ConfShadow1",
        "tests/test_section6.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.343159883002954,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_6_table3_ConfShadow1\u001b[0m\n"
      },
      "call": {
        "duration": 4.241324769998755,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section6.py",
          "lineno": 719,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section6.py",
            "lineno": 719,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF? Shadow1\\r\\n'..\nb'Response: OK \\r\\n'\n\nb'Command:  AT+CONF Shadow1=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? Shadow1\\r\\n'..\nb'Response: OK aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\n",
        "longrepr": "def test_6_table3_ConfShadow1() -> None:\n        re_key = r'^OK \\r\\n$'\n        initial_value = cmd(\"AT+CONF? Shadow1\\r\\n\")\n    \n        assert re.match(re_key, initial_value)\n        test_value = 'a' * 64\n    \n        assert cmd(f\"AT+CONF Shadow1={test_value}\\r\\n\") == \"OK\\r\\n\"\n        assert cmd(\"AT+CONF? Shadow1\\r\\n\")[3:-2] == test_value\n    \n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\n\", False) == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section6.py:719: AssertionError"
      },
      "teardown": {
        "duration": 0.0007660810006200336,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_1_1_2_EventPinBehavior",
      "lineno": 29,
      "outcome": "passed",
      "keywords": [
        "test_8_1_1_2_EventPinBehavior",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.335652305999247,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_1_1_2_EventPinBehavior\u001b[0m\n"
      },
      "call": {
        "duration": 14.840655604999483,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+DISCONNECT\\r\\n'...............\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 3 0 CONLOST\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.003182622000167612,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_2_1_1_EventQueryFormatFull",
      "lineno": 52,
      "outcome": "failed",
      "keywords": [
        "test_8_2_1_1_EventQueryFormatFull",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.317978973998834,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_2_1_1_EventQueryFormatFull\u001b[0m\n"
      },
      "call": {
        "duration": 4.185121976999653,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/commands.py",
          "lineno": 44,
          "message": "AssertionError"
        },
        "traceback": [
          {
            "path": "tests/test_section8.py",
            "lineno": 58,
            "message": ""
          },
          {
            "path": "tests/commands.py",
            "lineno": 44,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: \\x00OK\\r\\n'\n\n",
        "longrepr": "get_topic_prefix = 'test_8_2_1_1_EventQueryFormatFull2025-04-16T01:18:26.786061'\n\n    def test_8_2_1_1_EventQueryFormatFull(get_topic_prefix):\n        # Generate startup event\n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n        # Generate conlost event\n>       assert connect_with_retries(cf.get('personal_endpoint', str))\n\ntests/test_section8.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nendpoint = 'a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com'\n\n    def connect_with_retries(endpoint: Optional[str] = None) -> bool:\n        \"\"\"Attempt to connect to IoT Core with retries over 30 seconds\"\"\"\n        if endpoint:\n>           assert cmd(f\"AT+CONF Endpoint={endpoint}\\r\\n\") == \"OK\\r\\n\"\nE           AssertionError\n\ntests/commands.py:44: AssertionError"
      },
      "teardown": {
        "duration": 0.0013573140022344887,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_2_1_2_EventQueryFormatEmpty",
      "lineno": 69,
      "outcome": "passed",
      "keywords": [
        "test_8_2_1_2_EventQueryFormatEmpty",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.801533470999857,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_2_1_2_EventQueryFormatEmpty\u001b[0m\n"
      },
      "call": {
        "duration": 0.02239079699938884,
        "outcome": "passed",
        "stdout": "b'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011530390002008062,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_2_1_3_EventQueueClearedSleep",
      "lineno": 75,
      "outcome": "passed",
      "keywords": [
        "test_8_2_1_3_EventQueueClearedSleep",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.34156348200122,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_2_1_3_EventQueueClearedSleep\u001b[0m\n"
      },
      "call": {
        "duration": 10.898840358997404,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+DISCONNECT\\r\\n'................\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\nb'Command:  AT+SLEEP 1\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 2 0 STARTUP\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010352450008213054,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_2_1_3_EventQueueClearedReset",
      "lineno": 90,
      "outcome": "failed",
      "keywords": [
        "test_8_2_1_3_EventQueueClearedReset",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.33509567999863,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_2_1_3_EventQueueClearedReset\u001b[0m\n"
      },
      "call": {
        "duration": 12.905041877998883,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section8.py",
          "lineno": 96,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section8.py",
            "lineno": 96,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+DISCONNECT\\r\\n'...............\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\nb'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: \\x00OK 2 0 STARTUP\\r\\n'\n\n",
        "longrepr": "def test_8_2_1_3_EventQueueClearedReset() -> None:\n        assert connect_with_retries(cf.get('personal_endpoint', str))\n        assert cmd(\"AT+DISCONNECT\\r\\n\") == \"OK 0 DISCONNECTED\\r\\n\"\n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\r\\n\") == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section8.py:96: AssertionError"
      },
      "teardown": {
        "duration": 0.0011808909985120408,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_2_1_3_EventQueueClearedFactoryReset",
      "lineno": 105,
      "outcome": "failed",
      "keywords": [
        "test_8_2_1_3_EventQueueClearedFactoryReset",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.790725284001383,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_2_1_3_EventQueueClearedFactoryReset\u001b[0m\n"
      },
      "call": {
        "duration": 14.85271830000056,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section8.py",
          "lineno": 111,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section8.py",
            "lineno": 111,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+DISCONNECT\\r\\n'................\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\nb'Command:  AT+FACTORY_RESET\\r\\n'..............................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: \\x00OK 2 0 STARTUP\\r\\n'\n\n",
        "longrepr": "def test_8_2_1_3_EventQueueClearedFactoryReset() -> None:\n        assert connect_with_retries(cf.get('personal_endpoint', str))\n        assert cmd(\"AT+DISCONNECT\\r\\n\") == \"OK 0 DISCONNECTED\\r\\n\"\n        assert cmd(\"AT+FACTORY_RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\r\\n\") == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section8.py:111: AssertionError"
      },
      "teardown": {
        "duration": 0.001249853001354495,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_table4_EventMsg",
      "lineno": 128,
      "outcome": "passed",
      "keywords": [
        "test_8_table4_EventMsg",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.811903653000627,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_table4_EventMsg\u001b[0m\n"
      },
      "call": {
        "duration": 21.04486553999959,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF Topic1=test_8_table4_EventMsg2025-04-16T01:20:22.811127\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'.............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 1 SUBACK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 1 1 MSG\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0005105849995743483,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_table4_EventStartup",
      "lineno": 140,
      "outcome": "failed",
      "keywords": [
        "test_8_table4_EventStartup",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.790255765001348,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_table4_EventStartup\u001b[0m\n"
      },
      "call": {
        "duration": 4.133544247997634,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section8.py",
          "lineno": 144,
          "message": "AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\n  - OK 2 0 STARTUP\r\n  + \u0000OK 2 0 STARTUP\r\n  ? +"
        },
        "traceback": [
          {
            "path": "tests/test_section8.py",
            "lineno": 144,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+RESET\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: \\x00OK 2 0 STARTUP\\r\\n'\n\n",
        "longrepr": "def test_8_table4_EventStartup() -> None:\n        assert cmd(\"AT+RESET\\r\\n\") == \"OK\\r\\n\"\n        poll(lambda: comms.get_event_pin(), step=0.1, timeout=120)\n>       assert cmd(\"AT+EVENT?\\r\\n\") == \"OK 2 0 STARTUP\\r\\n\"\nE       AssertionError: assert '\\x00OK 2 0 STARTUP\\r\\n' == 'OK 2 0 STARTUP\\r\\n'\nE         - OK 2 0 STARTUP\r\nE         + \u0000OK 2 0 STARTUP\r\nE         ? +\n\ntests/test_section8.py:144: AssertionError"
      },
      "teardown": {
        "duration": 0.0011688539998431224,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_table4_EventConlost",
      "lineno": 148,
      "outcome": "passed",
      "keywords": [
        "test_8_table4_EventConlost",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.782957569001155,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_table4_EventConlost\u001b[0m\n"
      },
      "call": {
        "duration": 10.826350434999767,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+DISCONNECT\\r\\n'................\nb'Response: OK 0 DISCONNECTED\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 3 0 CONLOST\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011959280018345453,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_table4_EventConnect",
      "lineno": 165,
      "outcome": "passed",
      "keywords": [
        "test_8_table4_EventConnect",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.803250901000865,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_table4_EventConnect\u001b[0m\n"
      },
      "call": {
        "duration": 10.155101666998235,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT!\\r\\n'..\nb'Response: OK\\r\\n'\n\n....\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 6 0 CONNECT\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001068132998625515,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section8.py::test_8_table4_EventSuback",
      "lineno": 179,
      "outcome": "passed",
      "keywords": [
        "test_8_table4_EventSuback",
        "tests/test_section8.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.790057348000119,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_8_table4_EventSuback\u001b[0m\n"
      },
      "call": {
        "duration": 17.07012539399875,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...........................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'....................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nb'Command:  AT+CONF Topic1=test_8_table4_EventSuback2025-04-16T01:22:08.197842\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+SUBSCRIBE1\\r\\n'............\nb'Response: OK\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 8 1 SUBACK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0012228539999341592,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_1_OTAStatusQuery",
      "lineno": 195,
      "outcome": "passed",
      "keywords": [
        "test_9_2_1_OTAStatusQuery",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.77929495999706,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_1_OTAStatusQuery\u001b[0m\n"
      },
      "call": {
        "duration": 0.023314017002121545,
        "outcome": "passed",
        "stdout": "b'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\n_OtaCode.NoOtaInProgress None\n"
      },
      "teardown": {
        "duration": 0.001138594998337794,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_3_2_OtaAcceptNoUpdate",
      "lineno": 533,
      "outcome": "passed",
      "keywords": [
        "test_9_2_3_2_OtaAcceptNoUpdate",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.345979488000012,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_3_2_OtaAcceptNoUpdate\u001b[0m\n"
      },
      "call": {
        "duration": 0.023439534001227003,
        "outcome": "passed",
        "stdout": "b'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: ERR21 INVALID OTA UPDATE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010607260010147002,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_4_2_HotaReadNotReady",
      "lineno": 566,
      "outcome": "passed",
      "keywords": [
        "test_9_2_4_2_HotaReadNotReady",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.925906281998323,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_4_2_HotaReadNotReady\u001b[0m\n"
      },
      "call": {
        "duration": 0.02371669800049858,
        "outcome": "passed",
        "stdout": "b'Command:  AT+OTA READ 1\\r\\n'..\nb'Response: ERR19 HOST IMAGE NOT AVAILABLE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010969299983116798,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_5_HotaSeekRandomAccess",
      "lineno": 587,
      "outcome": "passed",
      "keywords": [
        "test_9_2_5_HotaSeekRandomAccess",
        "slow",
        "pytestmark",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.935469495998404,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_5_HotaSeekRandomAccess\u001b[0m\n"
      },
      "call": {
        "duration": 270.374820088,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF HOTAcertificate=\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nRandom sampling with seed: 2336807515185740763\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_012349', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_012349', 'creationDate': datetime.datetime(2025, 4, 16, 1, 23, 49, 815000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 23, 52, 154000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_012349', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-74e13abe-7cc5-445d-a5ed-47ed3b388a90', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_012349', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_012349'}\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 3\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 5 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 5\\r\\n'\n\n................................................................................................................................................................................................................................................................\n"
      },
      "teardown": {
        "duration": 0.0005109190024086274,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_5_HotaSeekBeginning",
      "lineno": 645,
      "outcome": "passed",
      "keywords": [
        "test_9_2_5_HotaSeekBeginning",
        "slow",
        "pytestmark",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.948758843001997,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_5_HotaSeekBeginning\u001b[0m\n"
      },
      "call": {
        "duration": 58.15445514000021,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF HOTAcertificate=\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_012851', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_012851', 'creationDate': datetime.datetime(2025, 4, 16, 1, 28, 52, 367000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 28, 54, 824000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_012851', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-ea850224-956a-4e65-b48e-f9076d8baec3', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_012851', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_012851'}\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 3\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 5 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 5\\r\\n'\n\nb'Command:  AT+OTA READ 4096\\r\\n'....\nb'Response: OK 1000  0F48\\r\\n'\n\nb'Command:  AT+OTA SEEK\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+OTA READ 4096\\r\\n'....\nb'Response: OK 1000  0F48\\r\\n'\n\nb'Command:  AT+OTA SEEK 0\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+OTA READ 4096\\r\\n'....\nb'Response: OK 1000  0F48\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.000530882000020938,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_5_1_HotaSeekInvalidAddress",
      "lineno": 687,
      "outcome": "passed",
      "keywords": [
        "test_9_2_5_1_HotaSeekInvalidAddress",
        "slow",
        "pytestmark",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.38074320799933,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_5_1_HotaSeekInvalidAddress\u001b[0m\n"
      },
      "call": {
        "duration": 58.19814606500222,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF HOTAcertificate=\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_013007', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_013007', 'creationDate': datetime.datetime(2025, 4, 16, 1, 30, 7, 448000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 30, 8, 636000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_013007', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-f512033c-48f6-4fcc-af53-c91af405cc08', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013007', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_013007'}\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 3\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 5 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 5\\r\\n'\n\nb'Command:  AT+OTA SEEK 4097\\r\\n'..\nb'Response: ERR20 INVALID ADDRESS\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.001240706002135994,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_5_2_HotaSeekNotReady",
      "lineno": 729,
      "outcome": "passed",
      "keywords": [
        "test_9_2_5_2_HotaSeekNotReady",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.79305146399929,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_5_2_HotaSeekNotReady\u001b[0m\n"
      },
      "call": {
        "duration": 0.04537710799922934,
        "outcome": "passed",
        "stdout": "b'Command:  AT+OTA SEEK 0\\r\\n'..\nb'Response: ERR19 HOST IMAGE NOT AVAILABLE\\r\\n'\n\nb'Command:  AT+OTA SEEK\\r\\n'..\nb'Response: ERR19 HOST IMAGE NOT AVAILABLE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009281549973820802,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_6_2_OtaApplyNotReady",
      "lineno": 757,
      "outcome": "passed",
      "keywords": [
        "test_9_2_6_2_OtaApplyNotReady",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.346976107000955,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'.........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_6_2_OtaApplyNotReady\u001b[0m\n"
      },
      "call": {
        "duration": 0.023719911001535365,
        "outcome": "passed",
        "stdout": "b'Command:  AT+OTA APPLY\\r\\n'..\nb'Response: ERR19 HOST IMAGE NOT AVAILABLE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0010434860014356673,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_7_1_OtaCloseReturnsOk",
      "lineno": 791,
      "outcome": "passed",
      "keywords": [
        "test_9_2_7_1_OtaCloseReturnsOk",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.914149135998741,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_7_1_OtaCloseReturnsOk\u001b[0m\n"
      },
      "call": {
        "duration": 0.02237092900031712,
        "outcome": "passed",
        "stdout": "b'Command:  AT+OTA CLOSE\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011152070001116954,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_8_OtaFlushAllStates",
      "lineno": 798,
      "outcome": "failed",
      "keywords": [
        "test_9_2_8_OtaFlushAllStates",
        "skipif",
        "slow",
        "pytestmark",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.94890641800157,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_8_OtaFlushAllStates\u001b[0m\n"
      },
      "call": {
        "duration": 370.40302561299904,
        "outcome": "failed",
        "crash": {
          "path": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section9.py",
          "lineno": 824,
          "message": "assert <_OtaCode.NoOtaInProgress: 0> == <_OtaCode.OtaUpdateAvailable: 1>\n +  where <_OtaCode.OtaUpdateAvailable: 1> = _OtaCode.OtaUpdateAvailable"
        },
        "traceback": [
          {
            "path": "tests/test_section9.py",
            "lineno": 824,
            "message": "AssertionError"
          }
        ],
        "stdout": "b'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nUploading imagePath='/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/firmware_image.rps' to bucketName='expresslinkbletests3' with imageName='firmware_image.rps'\nUploading signaturePath='/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/firmware_image.base64' to bucketName='expresslinkbletests3' with signatureName='firmware_image.base64'\nCreated OTA Job. Job details:\n{'otaUpdateId': 'OTAUpdate_2025-04-16_013516', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/OTAUpdate_2025-04-16_013516', 'creationDate': datetime.datetime(2025, 4, 16, 1, 35, 17, 679000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 35, 20, 30000, tzinfo=tzlocal()), 'description': 'Creating an OTA job for testing. Job created by OTA setup script at 2025-04-16_013516', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'firmware_image.rps', 'fileType': 101, 'fileVersion': 'oXjp0prgS0XdIuBXMFnqP64TVvjlfacF', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-db56bb46-ceb5-4b60-a2af-856033988666', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'firmware_image.rps', 'version': 'oXjp0prgS0XdIuBXMFnqP64TVvjlfacF'}}, 'codeSigning': {'customCodeSigning': {'signature': {'inlineDocument': b'MEYCIQChMODuhkyAFYyKT6pYkEvhpNPBWI5YEwThjkIXWasRjQIhALiT7+vbN4E1WLJczM+bd37lp0pR8mqU5BY3L7hmpWn3'}, 'certificateChain': {'certificateName': 'TheCertificate', 'inlineDocument': '-----BEGIN CERTIFICATE-----\\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\\nJCE=\\n-----END CERTIFICATE-----\\n'}, 'hashAlgorithm': 'SHA256', 'signatureAlgorithm': 'ECDSA'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-OTAUpdate_2025-04-16_013516', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-OTAUpdate_2025-04-16_013516'}\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 3 0 CONLOST\\r\\n'\n\n...........................................................Timed out while waiting for an event to match: ^OK 5 [^0]+ OTA\\r\\n$\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\n",
        "longrepr": "iot_services_client = <botocore.client.IoT object at 0x7fb6787890>\n\n    @pytest.mark.slow\n    # TODO: Support custom flows\n    @pytest.mark.skipif(cf.get('feature_custom_ota', bool),\n                        reason='Custom OTA flow')\n    def test_9_2_8_OtaFlushAllStates(iot_services_client: IoTClient) -> None:\n        _CleanOtaJobs(iot_services_client)\n        assert cmd('AT+OTA FLUSH\\r\\n') == 'OK\\r\\n'\n        assert _getOTAStatus()[0] == _OtaCode.NoOtaInProgress\n    \n        def checkedFlush(awsIotJobId: str):\n            assert cmd('AT+OTA FLUSH\\r\\n') == 'OK\\r\\n'\n            assert _WaitForJobCompletion(\n                iot_services_client,\n                awsIotJobId)['execution']['status'] not in ('QUEUED', 'SUCCEEDED',\n                                                            'IN_PROGRESS')\n            assert _getOTAStatus()[0] == _OtaCode.NoOtaInProgress\n    \n        connect_with_retries(cf.get('personal_endpoint', str))\n    \n        for testState in (_OtaCode.OtaUpdateAvailable, _OtaCode.OtaInProgress,\n                          _OtaCode.OtaImageReady):\n            with _ConfigureModuleOTA(iot_services_client) as otaJob:\n                # Wait for OTA event to arrive at device\n                if get_next_event(r'^OK 5 [^0]+ OTA\\r\\n$') is None:\n                    warnings.warn('OTA Event was not raised', RuntimeWarning)\n>               assert _getOTAStatus()[0] == _OtaCode.OtaUpdateAvailable\nE               assert <_OtaCode.NoOtaInProgress: 0> == <_OtaCode.OtaUpdateAvailable: 1>\nE                +  where <_OtaCode.OtaUpdateAvailable: 1> = _OtaCode.OtaUpdateAvailable\n\ntests/test_section9.py:824: AssertionError"
      },
      "teardown": {
        "duration": 0.0006028559982951265,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_8_HotaUpdateFlushAllStates",
      "lineno": 857,
      "outcome": "passed",
      "keywords": [
        "test_9_2_8_HotaUpdateFlushAllStates",
        "slow",
        "pytestmark",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.951788340000348,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_8_HotaUpdateFlushAllStates\u001b[0m\n"
      },
      "call": {
        "duration": 77.32229183099844,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF HOTAcertificate=\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'..........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_013751', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_013751', 'creationDate': datetime.datetime(2025, 4, 16, 1, 37, 52, 162000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 37, 53, 579000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_013751', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-c583633e-7173-4eeb-8b65-8138895c8d64', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013751', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_013751'}\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'.\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013751', 'status': 'QUEUED', 'statusDetails': {}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 37, 55, 764000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 37, 55, 764000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 1}\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013751', 'status': 'FAILED', 'statusDetails': {'detailsMap': {'reason': 'rejected: 0x00000000'}}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 37, 55, 764000, tzinfo=tzlocal()), 'startedAt': datetime.datetime(2025, 4, 16, 1, 38, 0, 209000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 38, 0, 209000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 2}\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_013812', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_013812', 'creationDate': datetime.datetime(2025, 4, 16, 1, 38, 13, 47000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 38, 14, 473000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_013812', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-aaa29f43-5118-4aa3-af43-e5a5d96971f3', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013812', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_013812'}\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 0 OTA\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 3\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013812', 'status': 'QUEUED', 'statusDetails': {}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 38, 17, 776000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 38, 17, 776000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 1}\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013812', 'status': 'FAILED', 'statusDetails': {'detailsMap': {'reason': 'aborted: 0x00000013'}}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 38, 17, 776000, tzinfo=tzlocal()), 'startedAt': datetime.datetime(2025, 4, 16, 1, 38, 23, 265000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 38, 23, 265000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 2}\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_013835', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_013835', 'creationDate': datetime.datetime(2025, 4, 16, 1, 38, 36, 31000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 38, 37, 992000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_013835', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-0712b361-644c-4e16-a5d8-a60bf9fe30d6', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013835', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_013835'}\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 3\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 5 5 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'.\nb'Response: OK 5\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013835', 'status': 'QUEUED', 'statusDetails': {}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 38, 41, 745000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 38, 41, 745000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 1}\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_013835', 'status': 'FAILED', 'statusDetails': {'detailsMap': {'reason': 'rejected: 0x00000000'}}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 38, 41, 745000, tzinfo=tzlocal()), 'startedAt': datetime.datetime(2025, 4, 16, 1, 38, 46, 726000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 38, 46, 726000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 2}\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0013002280029468238,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_2_8_1_OtaFlushReturnsOk",
      "lineno": 920,
      "outcome": "passed",
      "keywords": [
        "test_9_2_8_1_OtaFlushReturnsOk",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.886488250002003,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_2_8_1_OtaFlushReturnsOk\u001b[0m\n"
      },
      "call": {
        "duration": 0.022460013002273627,
        "outcome": "passed",
        "stdout": "b'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0009865780011750758,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_3_OtaUpdate",
      "lineno": 959,
      "outcome": "skipped",
      "keywords": [
        "test_9_3_OtaUpdate",
        "skipif",
        "slow",
        "destructive",
        "pytest_impl",
        "pytestmark",
        "skip",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 0.0010157260003325064,
        "outcome": "skipped",
        "longrepr": "('/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section9.py', 960, \"Skipped: Add '--run-destructive' to run\")"
      },
      "teardown": {
        "duration": 0.00092991099882056,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_6_1_1_OtaCertificateSelfAssign",
      "lineno": 1064,
      "outcome": "passed",
      "keywords": [
        "test_9_6_1_1_OtaCertificateSelfAssign",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.877839251003024,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_6_1_1_OtaCertificateSelfAssign\u001b[0m\n"
      },
      "call": {
        "duration": 0.5737152010005957,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF OTAcertificate=pem\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\\r\\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\\r\\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\\r\\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\\r\\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\\r\\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\\r\\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\\r\\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\\r\\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\\r\\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\\r\\nJCE=\\r\\n-----END CERTIFICATE-----\\r\\n\\r\\n'...........................\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011979299997619819,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_6_1_2_OtaCertificateInvalidSignature",
      "lineno": 1073,
      "outcome": "passed",
      "keywords": [
        "test_9_6_1_2_OtaCertificateInvalidSignature",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.885372575001384,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_6_1_2_OtaCertificateInvalidSignature\u001b[0m\n"
      },
      "call": {
        "duration": 0.9978972950011666,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF OTAcertificate=pem\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\\r\\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\\r\\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\\r\\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\\r\\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\\r\\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\\r\\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\\r\\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\\r\\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\\r\\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\\r\\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\\r\\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\\r\\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\\r\\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\\r\\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\\r\\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\\r\\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\\r\\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\\r\\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\\r\\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\\r\\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\\r\\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\\r\\n-----END CERTIFICATE-----\\r\\n\\r\\n'............................................\nb'Response: ERR23 INVALID SIGNATURE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.0011299480029265396,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_6_1_6_OtaCertificateSetInvalidCertificate",
      "lineno": 1109,
      "outcome": "passed",
      "keywords": [
        "test_9_6_1_6_OtaCertificateSetInvalidCertificate",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.680192790998262,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'.......................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_6_1_6_OtaCertificateSetInvalidCertificate\u001b[0m\n"
      },
      "call": {
        "duration": 0.7277795689988125,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF OTAcertificate=pem\\r\\n-----BEGIN CERTIFICATE-----\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n-----END CERTIFICATE-----\\r\\n\\r\\n'.................................\nb'Response: ERR26 INVALID CERTIFICATE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.00106568800038076,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_9_HotaUpdate",
      "lineno": 1161,
      "outcome": "passed",
      "keywords": [
        "test_9_9_HotaUpdate",
        "slow",
        "pytestmark",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 14.329433846000029,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'........................\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_9_HotaUpdate\u001b[0m\n"
      },
      "call": {
        "duration": 33.807841720001306,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF HOTAcertificate=\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'.\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.......................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_014021', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_014021', 'creationDate': datetime.datetime(2025, 4, 16, 1, 40, 22, 123000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 40, 23, 711000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_014021', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-2281ce6f-0174-455d-91b5-062645ba3047', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_014021', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_014021'}\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 3\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 5 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 5\\r\\n'\n\nb'Command:  AT+OTA READ 4096\\r\\n'....\nb'Response: OK 1000  0F48\\r\\n'\n\nb'Command:  AT+OTA CLOSE\\r\\n'..\nb'Response: OK\\r\\n'\n\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_014021', 'status': 'QUEUED', 'statusDetails': {}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 40, 27, 778000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 40, 27, 778000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 1}\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_014021', 'status': 'SUCCEEDED', 'statusDetails': {'detailsMap': {'reason': 'accepted  v..202', 'updatedBy': '  v..'}}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 40, 27, 778000, tzinfo=tzlocal()), 'startedAt': datetime.datetime(2025, 4, 16, 1, 40, 33, 704000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 40, 33, 704000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 2}\n"
      },
      "teardown": {
        "duration": 0.00111490900235367,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_10_HostUpdateInvalidSigning",
      "lineno": 1213,
      "outcome": "passed",
      "keywords": [
        "test_9_10_HostUpdateInvalidSigning",
        "slow",
        "pytestmark",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.957595181000215,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_10_HostUpdateInvalidSigning\u001b[0m\n"
      },
      "call": {
        "duration": 44.8119848009992,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF HOTAcertificate=pem\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\\r\\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\\r\\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\\r\\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\\r\\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\\r\\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\\r\\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\\r\\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\\r\\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\\r\\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\\r\\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\\r\\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\\r\\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\\r\\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\\r\\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\\r\\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\\r\\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\\r\\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\\r\\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\\r\\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\\r\\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\\r\\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\\r\\n-----END CERTIFICATE-----\\r\\n\\r\\n'...................................................................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'....\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..........................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'..\nb'Response: ERR14 1 UNABLE TO CONNECT Backoff algorithm imposed delay\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'...............................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nGenerated single-use private key and signing certificate:\n-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIKb9ZwYoNssQapxWyuImIW1K05sCBicaPjC98Ne4xFAFoAoGCCqGSM49\nAwEHoUQDQgAEW9xmPN3YzH9gkek6Sw67FW3QMaZZfXICslLNgYpT8zyNxo86SNl+\n6iCWkbyX58jI8Xp882bmKV8WxLZX82ggDA==\n-----END EC PRIVATE KEY-----\n\n-----BEGIN CERTIFICATE-----\nMIIBXzCCAQagAwIBAgIUP4iSzKeoN0IGOKz2MIRRT9zQR0swCgYIKoZIzj0EAwIw\nHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMB4XDTI1MDQxNTAxNDEyOVoX\nDTI2MDQxNTAxNDEyOVowHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMFkw\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEW9xmPN3YzH9gkek6Sw67FW3QMaZZfXIC\nslLNgYpT8zyNxo86SNl+6iCWkbyX58jI8Xp882bmKV8WxLZX82ggDKMkMCIwCwYD\nVR0PBAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMAoGCCqGSM49BAMCA0cAMEQC\nIETyHT4X/ysUixyn9LgxyFcPol7avwX+QZvoGUmLZOfpAiBfggNy06npgdfyinFd\nuLNCG58eAHLXRsTJdVEAbIJpmA==\n-----END CERTIFICATE-----\n\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_014129', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_014129', 'creationDate': datetime.datetime(2025, 4, 16, 1, 41, 29, 980000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 41, 31, 737000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_014129', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-038fe6b4-5cf0-4cb0-ac58-ec605c27dc9d', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'codeSigning': {'customCodeSigning': {'signature': {'inlineDocument': b'MEUCIQCgRRCmHqg2AB84WwuJEI8aAw248BCWFoqgdtKbeE66twIgBPHNXx9Na8kofvLsdEQaFOkLsL07gy0rAZoH9LwCMVA='}, 'certificateChain': {'certificateName': 'TheCertificate', 'inlineDocument': '-----BEGIN CERTIFICATE-----\\nMIIBXzCCAQagAwIBAgIUP4iSzKeoN0IGOKz2MIRRT9zQR0swCgYIKoZIzj0EAwIw\\nHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMB4XDTI1MDQxNTAxNDEyOVoX\\nDTI2MDQxNTAxNDEyOVowHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMFkw\\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEW9xmPN3YzH9gkek6Sw67FW3QMaZZfXIC\\nslLNgYpT8zyNxo86SNl+6iCWkbyX58jI8Xp882bmKV8WxLZX82ggDKMkMCIwCwYD\\nVR0PBAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMAoGCCqGSM49BAMCA0cAMEQC\\nIETyHT4X/ysUixyn9LgxyFcPol7avwX+QZvoGUmLZOfpAiBfggNy06npgdfyinFd\\nuLNCG58eAHLXRsTJdVEAbIJpmA==\\n-----END CERTIFICATE-----\\n'}, 'hashAlgorithm': 'SHA256', 'signatureAlgorithm': 'ECDSA'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_014129', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_014129'}\n\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 3\\r\\n'\n\n.\n\nb'Command:  AT+EVENT?\\r\\n'.\nb'Response: OK 5 0 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_014129', 'status': 'FAILED', 'statusDetails': {'detailsMap': {'reason': '0x000000e3: 0x00000000'}}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 41, 34, 877000, tzinfo=tzlocal()), 'startedAt': datetime.datetime(2025, 4, 16, 1, 41, 39, 668000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 41, 39, 668000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 2}\nb'Command:  AT+OTA READ 1\\r\\n'..\nb'Response: ERR19 HOST IMAGE NOT AVAILABLE\\r\\n'\n\nb'Command:  AT+OTA SEEK\\r\\n'..\nb'Response: ERR19 HOST IMAGE NOT AVAILABLE\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.00120052000056603,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_10_HotaValidSigning",
      "lineno": 1260,
      "outcome": "passed",
      "keywords": [
        "test_9_10_HotaValidSigning",
        "skipif",
        "slow",
        "pytestmark",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.921942257002229,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_10_HotaValidSigning\u001b[0m\n"
      },
      "call": {
        "duration": 43.061798055998224,
        "outcome": "passed",
        "stdout": "b'Command:  AT+OTA FLUSH\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 0\\r\\n'\n\nb'Command:  AT+CONF Endpoint=a2m21kovu9tcsh-ats.iot.us-east-2.amazonaws.com\\r\\n'........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'............................................................................................................\nb'Response: ERR14 2 UNABLE TO CONNECT Failed to access network\\r\\n'\n\nb'Command:  AT+CONNECT\\r\\n'.................................................................................................................................................................................................................................................................................................................................................................................................................................\nb'Response: OK 1 CONNECTED\\r\\n'\n\nGenerated single-use private key and signing certificate:\n-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIBn8T1WdxBsNRHkSBwe1pRCgkd8FGSH73+VJIeaIEOSEoAoGCCqGSM49\nAwEHoUQDQgAEaujsL79dJCagZbHEDdVU4z2p8i6NLjYJTIV/xUYFEpkAI6UEMtgB\nvg1IivmVrlk2itumbRmQpYUwYow9iMhdFA==\n-----END EC PRIVATE KEY-----\n\n-----BEGIN CERTIFICATE-----\nMIIBYDCCAQagAwIBAgIUQp7bzdhgHMgZAN5qnN5+gAdeoOwwCgYIKoZIzj0EAwIw\nHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMB4XDTI1MDQxNTAxNDIxN1oX\nDTI2MDQxNTAxNDIxN1owHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMFkw\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaujsL79dJCagZbHEDdVU4z2p8i6NLjYJ\nTIV/xUYFEpkAI6UEMtgBvg1IivmVrlk2itumbRmQpYUwYow9iMhdFKMkMCIwCwYD\nVR0PBAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMAoGCCqGSM49BAMCA0gAMEUC\nIDTwfZ2HaAaqFl/O4aY8VGVsSVVNd+dpULZJ9lb6RUxuAiEA98//TGhcPJSgGcS5\nnQW/nuZA1F0W0ERcDYVWiZotE1w=\n-----END CERTIFICATE-----\n\nb'Command:  AT+CONF HOTAcertificate=pem\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIBYDCCAQagAwIBAgIUQp7bzdhgHMgZAN5qnN5+gAdeoOwwCgYIKoZIzj0EAwIw\\r\\nHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMB4XDTI1MDQxNTAxNDIxN1oX\\r\\nDTI2MDQxNTAxNDIxN1owHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMFkw\\r\\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaujsL79dJCagZbHEDdVU4z2p8i6NLjYJ\\r\\nTIV/xUYFEpkAI6UEMtgBvg1IivmVrlk2itumbRmQpYUwYow9iMhdFKMkMCIwCwYD\\r\\nVR0PBAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMAoGCCqGSM49BAMCA0gAMEUC\\r\\nIDTwfZ2HaAaqFl/O4aY8VGVsSVVNd+dpULZJ9lb6RUxuAiEA98//TGhcPJSgGcS5\\r\\nnQW/nuZA1F0W0ERcDYVWiZotE1w=\\r\\n-----END CERTIFICATE-----\\r\\n'....................\nb'Response: OK\\r\\n'\n\nCreated OTA Job. Job details:\n{'otaUpdateId': 'HOTAUpdate_2025-04-16_014217', 'otaUpdateArn': 'arn:aws:iot:us-east-2:037920876429:otaupdate/HOTAUpdate_2025-04-16_014217', 'creationDate': datetime.datetime(2025, 4, 16, 1, 42, 17, 912000, tzinfo=tzlocal()), 'lastModifiedDate': datetime.datetime(2025, 4, 16, 1, 42, 19, 895000, tzinfo=tzlocal()), 'description': 'Creating an HOTA job for testing. Job created by OTA setup script at 2025-04-16_014217', 'targets': ['arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing'], 'protocols': ['MQTT'], 'awsJobExecutionsRolloutConfig': {}, 'awsJobPresignedUrlConfig': {}, 'targetSelection': 'SNAPSHOT', 'otaUpdateFiles': [{'fileName': 'HOTAImage.bin', 'fileType': 202, 'fileVersion': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL', 'fileLocation': {'stream': {'streamId': 'AFR_OTA-1bc944e5-8de6-4ffc-adae-ecbf8a94887c', 'fileId': 0}, 's3Location': {'bucket': 'expresslinkbletests3', 'key': 'HOTAImage.bin', 'version': 'YeCwPD5BwoZ.hTGu2zjmbdmanESGc9mL'}}, 'codeSigning': {'customCodeSigning': {'signature': {'inlineDocument': b'MEQCIDVEfhjolbkeMpWw35yO0I+jmEFQ+nGLre+yyETWJr1tAiB31sTZXLiAugAkWsHcQ9vLYqVsSywapSLrH3VkPgVNxw=='}, 'certificateChain': {'certificateName': 'TheCertificate', 'inlineDocument': '-----BEGIN CERTIFICATE-----\\nMIIBYDCCAQagAwIBAgIUQp7bzdhgHMgZAN5qnN5+gAdeoOwwCgYIKoZIzj0EAwIw\\nHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMB4XDTI1MDQxNTAxNDIxN1oX\\nDTI2MDQxNTAxNDIxN1owHTEbMBkGA1UEAwwSc2lsaWNvbl9sYWJzX3RoaW5nMFkw\\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaujsL79dJCagZbHEDdVU4z2p8i6NLjYJ\\nTIV/xUYFEpkAI6UEMtgBvg1IivmVrlk2itumbRmQpYUwYow9iMhdFKMkMCIwCwYD\\nVR0PBAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMAoGCCqGSM49BAMCA0gAMEUC\\nIDTwfZ2HaAaqFl/O4aY8VGVsSVVNd+dpULZJ9lb6RUxuAiEA98//TGhcPJSgGcS5\\nnQW/nuZA1F0W0ERcDYVWiZotE1w=\\n-----END CERTIFICATE-----\\n'}, 'hashAlgorithm': 'SHA256', 'signatureAlgorithm': 'ECDSA'}}, 'attributes': {'force': 'NO'}}], 'otaUpdateStatus': 'CREATE_COMPLETE', 'awsIotJobId': 'AFR_OTA-HOTAUpdate_2025-04-16_014217', 'awsIotJobArn': 'arn:aws:iot:us-east-2:037920876429:job/AFR_OTA-HOTAUpdate_2025-04-16_014217'}\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 5 2 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'..\nb'Response: OK 2\\r\\n'\n\nb'Command:  AT+OTA ACCEPT\\r\\n'..\nb'Response: OK\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'.\nb'Response: OK 3\\r\\n'\n\n\n\nb'Command:  AT+EVENT?\\r\\n'..\nb'Response: OK 5 5 OTA\\r\\n'\n\nb'Command:  AT+OTA?\\r\\n'.\nb'Response: OK 5\\r\\n'\n\nb'Command:  AT+OTA READ 4096\\r\\n'....\nb'Response: OK 1000  0F48\\r\\n'\n\nb'Command:  AT+OTA CLOSE\\r\\n'..\nb'Response: OK\\r\\n'\n\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_014217', 'status': 'QUEUED', 'statusDetails': {}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 42, 23, 836000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 42, 23, 836000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 1}\n{'jobId': 'AFR_OTA-HOTAUpdate_2025-04-16_014217', 'status': 'SUCCEEDED', 'statusDetails': {'detailsMap': {'reason': 'accepted  v..202', 'updatedBy': '  v..'}}, 'thingArn': 'arn:aws:iot:us-east-2:037920876429:thing/silicon_labs_thing', 'queuedAt': datetime.datetime(2025, 4, 16, 1, 42, 23, 836000, tzinfo=tzlocal()), 'startedAt': datetime.datetime(2025, 4, 16, 1, 42, 29, 408000, tzinfo=tzlocal()), 'lastUpdatedAt': datetime.datetime(2025, 4, 16, 1, 42, 29, 408000, tzinfo=tzlocal()), 'executionNumber': 1, 'versionNumber': 2}\n"
      },
      "teardown": {
        "duration": 0.0011959249968640506,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_11_1_1_OtaCertificateGetPem",
      "lineno": 1363,
      "outcome": "passed",
      "keywords": [
        "test_9_11_1_1_OtaCertificateGetPem",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.933675896998466,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_11_1_1_OtaCertificateGetPem\u001b[0m\n"
      },
      "call": {
        "duration": 1.3988196620011877,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF? HOTAcertificate pem\\r\\n'...\nb'Response: OK0 pem\\r\\n'\n\nb'Command:  AT+CONF HOTAcertificate=pem\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\\r\\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\\r\\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\\r\\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\\r\\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\\r\\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\\r\\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\\r\\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\\r\\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\\r\\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\\r\\nJCE=\\r\\n-----END CERTIFICATE-----\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? HOTAcertificate pem\\r\\n'...\nb'Response: OK13 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\r\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\r\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\r\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\r\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\r\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\r\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\r\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\r\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\r\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\r\nJCE=\r\n-----END CERTIFICATE-----\r\nb'Command:  AT+CONF? HOTAcertificate\\r\\n'...\nb'Response: OK -----BEGIN CERTIFICATE-----\\\\AMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\\\\ARTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\\\\AdGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\\\\AMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\\\\AVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\\\\APQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\\\\AzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\\\\Ai7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\\\\AVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\\\\A8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\\\\AJCE=\\\\A-----END CERTIFICATE-----\\\\A\\r\\n'\n\nb'Command:  AT+CONF? Certificate pem\\r\\n'..\nb'Response: OK20 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIDWTCCAkGgAwIBAgIUOWBvTtHMVup0MWDN3Z2ugpshHhYwDQYJKoZIhvcNAQEL\r\nBQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\r\nSW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIzMDMyMzEyNDE0\r\nMloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\r\nZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrT0KmqZTJovLoCnaaa\r\n9issa0GvqIOAYqPL3J8dD8HIRQnJnDggWHvf0K23hP1Uhfwpe6IrPB9wPS2O523/\r\nFzDf5O+KBVVd2VyWgNvfhzAU+1nKx9/1ktjNR4bkFozOtS4AWrTCOS4f/fq+Bx4R\r\nsb+8gtjfbO6XP6sbvj+ygoN8Zm7SyLCBxBgSyCiZGWlecYhVXSpdWx2kjImYpXzG\r\ntf0ltnAPuUJhQ7rcqWvh/LWnIYX1/UUlVX/sTy4fHU4o/5S3W+dKdK6JQNk4f3VQ\r\ndrFeApdRk8EKlCfPZlDjZiZPsQkhpMqG3Vc3I04fA34JMfSgWGGOnl6IVjWJuVvO\r\nE2MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUDIXnS+v3EsBBkQLM2hzTvEJMqNAwHQYD\r\nVR0OBBYEFImms3SJJei7bsV2aPqFQ9WoC9XCMAwGA1UdEwEB/wQCMAAwDgYDVR0P\r\nAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQDenzmAeoxlJ0yPMmPS5ceG+VmW\r\n1yGY+tENA0lY5JHq4uza4UIHOlNXCWtkd53SjoT2UoTuPVN8tZb4+F2Yjjkpj/yq\r\n8yEND8UyyyWiqWbOx2EXJUgdL86Mi/LQ+c7nblUOwLMw/esSqa0qS7XsxtO46xYo\r\n8mB/MIMK+Uvfhn5etHXkiWjAu71guyYeF0II46O3yUxxhKNVxpclGTdmzbOzogP9\r\nJYIaJ2Yw/ptCw+zjkIRi7Vlh18Hx/i2lNKOhWOADw0tXMWyCKg0KJqrcP4QG/t9Z\r\nQjP2EnJSEJTuqn74i+/7mm2eE018e0SENMIzEJpC1d25huun0xh7XqnO7zxB\r\n-----END CERTIFICATE-----\r\nb'Command:  AT+CONF? Certificate\\r\\n'..\nb'Response: OK -----BEGIN CERTIFICATE-----\\\\AMIIDWTCCAkGgAwIBAgIUOWBvTtHMVup0MWDN3Z2ugpshHhYwDQYJKoZIhvcNAQEL\\\\ABQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\\\\ASW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIzMDMyMzEyNDE0\\\\AMloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\\\\AZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrT0KmqZTJovLoCnaaa\\\\A9issa0GvqIOAYqPL3J8dD8HIRQnJnDggWHvf0K23hP1Uhfwpe6IrPB9wPS2O523/\\\\AFzDf5O+KBVVd2VyWgNvfhzAU+1nKx9/1ktjNR4bkFozOtS4AWrTCOS4f/fq+Bx4R\\\\Asb+8gtjfbO6XP6sbvj+ygoN8Zm7SyLCBxBgSyCiZGWlecYhVXSpdWx2kjImYpXzG\\\\Atf0ltnAPuUJhQ7rcqWvh/LWnIYX1/UUlVX/sTy4fHU4o/5S3W+dKdK6JQNk4f3VQ\\\\AdrFeApdRk8EKlCfPZlDjZiZPsQkhpMqG3Vc3I04fA34JMfSgWGGOnl6IVjWJuVvO\\\\AE2MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUDIXnS+v3EsBBkQLM2hzTvEJMqNAwHQYD\\\\AVR0OBBYEFImms3SJJei7bsV2aPqFQ9WoC9XCMAwGA1UdEwEB/wQCMAAwDgYDVR0P\\\\AAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQDenzmAeoxlJ0yPMmPS5ceG+VmW\\\\A1yGY+tENA0lY5JHq4uza4UIHOlNXCWtkd53SjoT2UoTuPVN8tZb4+F2Yjjkpj/yq\\\\A8yEND8UyyyWiqWbOx2EXJUgdL86Mi/LQ+c7nblUOwLMw/esSqa0qS7XsxtO46xYo\\\\A8mB/MIMK+Uvfhn5etHXkiWjAu71guyYeF0II46O3yUxxhKNVxpclGTdmzbOzogP9\\\\AJYIaJ2Yw/ptCw+zjkIRi7Vlh18Hx/i2lNKOhWOADw0tXMWyCKg0KJqrcP4QG/t9Z\\\\AQjP2EnJSEJTuqn74i+/7mm2eE018e0SENMIzEJpC1d25huun0xh7XqnO7zxB\\\\A-----END CERTIFICATE-----\\\\A\\r\\n'\n\nb'Command:  AT+CONF? RootCA pem\\r\\n'...\nb'Response: OK24 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\r\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\r\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\r\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\r\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\r\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\r\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\r\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\r\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\r\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\r\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\r\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\r\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\r\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\r\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\r\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\r\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\r\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\r\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\r\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\r\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\r\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\r\n-----END CERTIFICATE-----\r\nb'Command:  AT+CONF? RootCA\\r\\n'...\nb'Response: OK -----BEGIN CERTIFICATE-----\\\\AMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\\\\AMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\\\\AU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\\\\ANjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\\\\AChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\\\\AZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\\\\ADQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\\\\A8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\\\\A+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\\\\AX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\\\\AK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\\\\A1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\\\\AA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\\\\Azt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\\\\AYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\\\\AbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\\\\ADQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\\\\AL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\\\\Aeruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\\\\Axy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\\\\AVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\\\\AWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\\\\A-----END CERTIFICATE-----\\\\A\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.00045581499944091775,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/test_section9.py::test_9_11_2_1_OtaCertificateSetPem",
      "lineno": 1410,
      "outcome": "passed",
      "keywords": [
        "test_9_11_2_1_OtaCertificateSetPem",
        "tests/test_section9.py",
        "expresslink_tests_python-main"
      ],
      "setup": {
        "duration": 13.916617707000114,
        "outcome": "passed",
        "stdout": "Reseting device\nDone\nb'Command:  AT+CONF SSID=Ghost_2G\\r\\n'...\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF Passphrase=P@ssw0rd\\r\\n'...\nb'Response: OK\\r\\n'\n\n\u001b[96mExecuting test: \u001b[92mtest_9_11_2_1_OtaCertificateSetPem\u001b[0m\n"
      },
      "call": {
        "duration": 4.662632424999174,
        "outcome": "passed",
        "stdout": "b'Command:  AT+CONF HOTAcertificate=pem\\r\\n-----BEGIN CERTIFICATE-----\\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\\nJCE=\\n-----END CERTIFICATE-----\\n\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? HOTAcertificate pem\\r\\n'...\nb'Response: OK13 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\r\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\r\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\r\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\r\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\r\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\r\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\r\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\r\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\r\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\r\nJCE=\r\n-----END CERTIFICATE-----\r\nb'Command:  AT+CONF HOTAcertificate=pem\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\\r\\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\\r\\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\\r\\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\\r\\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\\r\\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\\r\\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\\r\\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\\r\\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\\r\\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\\r\\nJCE=\\r\\n-----END CERTIFICATE-----\\r\\n\\r\\n'...............................................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? HOTAcertificate PEM\\r\\n'...\nb'Response: OK13 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\r\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\r\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\r\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\r\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\r\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\r\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\r\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\r\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\r\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\r\nJCE=\r\n-----END CERTIFICATE-----\r\nb'Command:  AT+CONF HOTAcertificate=PEM\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIB3jCCAYWgAwIBAgIURJoHSIfTIS8KL1KsAlNHIG9diwkwCgYIKoZIzj0EAwIw\\r\\nRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\\r\\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MDkxMjIxMzFaFw0yNjA0MDkx\\r\\nMjIxMzFaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD\\r\\nVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwWTATBgcqhkjOPQIBBggqhkjO\\r\\nPQMBBwNCAAQNOHQ8gZJyhtpj/FdNkubgKmH86mWu5yJ+i1CaS+uPsJxDxDG07wa9\\r\\nzFnGvaETPzF9IsryiEksxS8ExuwaoBV5o1MwUTAdBgNVHQ4EFgQUTNZpb6HCPNal\\r\\ni7gWQZkOo0wkoy8wHwYDVR0jBBgwFoAUTNZpb6HCPNali7gWQZkOo0wkoy8wDwYD\\r\\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAE0gYRnKkGJH8HH31f+exl\\r\\n8kUSq5HTIOMgnU+f8oeXcAIgPqnK5mZ9OE0hSizhjkDSRgJuHvuqDOWHJHBrGbEj\\r\\nJCE=\\r\\n-----END CERTIFICATE-----\\r\\n\\r\\n'.........................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? RootCA pem\\r\\n'...\nb'Response: OK24 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\r\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\r\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\r\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\r\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\r\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\r\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\r\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\r\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\r\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\r\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\r\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\r\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\r\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\r\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\r\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\r\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\r\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\r\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\r\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\r\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\r\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\r\n-----END CERTIFICATE-----\r\nb'Command:  AT+CONF RootCA=pem\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\\r\\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\\r\\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\\r\\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\\r\\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\\r\\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\\r\\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\\r\\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\\r\\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\\r\\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\\r\\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\\r\\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\\r\\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\\r\\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\\r\\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\\r\\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\\r\\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\\r\\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\\r\\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\\r\\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\\r\\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\\r\\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\\r\\n-----END CERTIFICATE-----\\r\\n\\r\\n'...............................................\nb'Response: OK\\r\\n'\n\nb'Command:  AT+CONF? RootCA PEM\\r\\n'...\nb'Response: OK24 pem\\r\\n'\n\n-----BEGIN CERTIFICATE-----\r\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\r\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\r\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\r\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\r\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\r\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\r\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\r\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\r\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\r\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\r\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\r\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\r\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\r\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\r\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\r\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\r\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\r\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\r\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\r\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\r\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\r\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\r\n-----END CERTIFICATE-----\r\nb'Command:  AT+CONF RootCA=PEM\\r\\n-----BEGIN CERTIFICATE-----\\r\\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\\r\\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\\r\\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\\r\\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\\r\\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\\r\\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\\r\\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\\r\\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\\r\\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\\r\\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\\r\\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\\r\\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\\r\\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\\r\\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\\r\\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\\r\\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\\r\\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\\r\\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\\r\\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\\r\\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\\r\\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\\r\\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\\r\\n-----END CERTIFICATE-----\\r\\n\\r\\n'..............................................\nb'Response: OK\\r\\n'\n\n"
      },
      "teardown": {
        "duration": 0.7097864790011954,
        "outcome": "passed",
        "stdout": "\nServer: Stopping the BLE service...\n"
      }
    }
  ],
  "warnings": [
    {
      "message": "OTA Event was not raised",
      "category": "RuntimeWarning",
      "when": "runtest",
      "filename": "/home/pi/expresslink_tests_python-main/expresslink_tests_python-main/tests/test_section9.py",
      "lineno": 823
    }
  ],
  "expresslink_info": {
    "platform": "raspberry_pi",
    "test_version": "eltest-0.0.1",
    "test_techspec": "v1.2",
    "device_version": "1.0.0",
    "device_techspec": "v1.2",
    "thing_name": "silicon_labs_thing",
    "about": "Si-Labs - SiWG917",
    "certificate": "-----BEGIN CERTIFICATE-----\\AMIIDWTCCAkGgAwIBAgIUOWBvTtHMVup0MWDN3Z2ugpshHhYwDQYJKoZIhvcNAQEL\\ABQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\\ASW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIzMDMyMzEyNDE0\\AMloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\\AZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrT0KmqZTJovLoCnaaa\\A9issa0GvqIOAYqPL3J8dD8HIRQnJnDggWHvf0K23hP1Uhfwpe6IrPB9wPS2O523/\\AFzDf5O+KBVVd2VyWgNvfhzAU+1nKx9/1ktjNR4bkFozOtS4AWrTCOS4f/fq+Bx4R\\Asb+8gtjfbO6XP6sbvj+ygoN8Zm7SyLCBxBgSyCiZGWlecYhVXSpdWx2kjImYpXzG\\Atf0ltnAPuUJhQ7rcqWvh/LWnIYX1/UUlVX/sTy4fHU4o/5S3W+dKdK6JQNk4f3VQ\\AdrFeApdRk8EKlCfPZlDjZiZPsQkhpMqG3Vc3I04fA34JMfSgWGGOnl6IVjWJuVvO\\AE2MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUDIXnS+v3EsBBkQLM2hzTvEJMqNAwHQYD\\AVR0OBBYEFImms3SJJei7bsV2aPqFQ9WoC9XCMAwGA1UdEwEB/wQCMAAwDgYDVR0P\\AAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQDenzmAeoxlJ0yPMmPS5ceG+VmW\\A1yGY+tENA0lY5JHq4uza4UIHOlNXCWtkd53SjoT2UoTuPVN8tZb4+F2Yjjkpj/yq\\A8yEND8UyyyWiqWbOx2EXJUgdL86Mi/LQ+c7nblUOwLMw/esSqa0qS7XsxtO46xYo\\A8mB/MIMK+Uvfhn5etHXkiWjAu71guyYeF0II46O3yUxxhKNVxpclGTdmzbOzogP9\\AJYIaJ2Yw/ptCw+zjkIRi7Vlh18Hx/i2lNKOhWOADw0tXMWyCKg0KJqrcP4QG/t9Z\\AQjP2EnJSEJTuqn74i+/7mm2eE018e0SENMIzEJpC1d25huun0xh7XqnO7zxB\\A-----END CERTIFICATE-----\\A",
    "staging_endpoint": "d01957845e3vbsmdo9am-ats.iot.us-east-2.amazonaws.com"
  }
}